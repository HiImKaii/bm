
bm_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  080047dc  080047dc  000057dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b3c  08004b3c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b44  08004b44  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b48  08004b48  00005b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004b4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  08004bb4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004bb4  0000627c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9e2  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281a  00000000  00000000  00013a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00016290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5c  00000000  00000000  00017330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd3f  00000000  00000000  00017f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ce7  00000000  00000000  00035ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b66b6  00000000  00000000  000469b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b50  00000000  00000000  000fd0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00101bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	080047c4 	.word	0x080047c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	080047c4 	.word	0x080047c4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <KeyExpansion>:
		0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
};


// Key expansion
static void KeyExpansion(const uint8_t *key, uint8_t *RoundKey) {
 800022c:	b480      	push	{r7}
 800022e:	b087      	sub	sp, #28
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint8_t temp[4];

    for (i = 0; i < 4; ++i) {
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e030      	b.n	800029e <KeyExpansion+0x72>
        RoundKey[i * 4 + 0] = key[i * 4 + 0];
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	441a      	add	r2, r3
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	6839      	ldr	r1, [r7, #0]
 800024a:	440b      	add	r3, r1
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 1] = key[i * 4 + 1];
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	3301      	adds	r3, #1
 8000256:	687a      	ldr	r2, [r7, #4]
 8000258:	441a      	add	r2, r3
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	3301      	adds	r3, #1
 8000260:	6839      	ldr	r1, [r7, #0]
 8000262:	440b      	add	r3, r1
 8000264:	7812      	ldrb	r2, [r2, #0]
 8000266:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 2] = key[i * 4 + 2];
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	3302      	adds	r3, #2
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	441a      	add	r2, r3
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	3302      	adds	r3, #2
 8000278:	6839      	ldr	r1, [r7, #0]
 800027a:	440b      	add	r3, r1
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 3] = key[i * 4 + 3];
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	3303      	adds	r3, #3
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	441a      	add	r2, r3
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	3303      	adds	r3, #3
 8000290:	6839      	ldr	r1, [r7, #0]
 8000292:	440b      	add	r3, r1
 8000294:	7812      	ldrb	r2, [r2, #0]
 8000296:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; ++i) {
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	3301      	adds	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d9cb      	bls.n	800023c <KeyExpansion+0x10>
    }

    for (i = 4; i < 44; ++i) {
 80002a4:	2304      	movs	r3, #4
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	e099      	b.n	80003de <KeyExpansion+0x1b2>
        temp[0] = RoundKey[(i - 1) * 4 + 0];
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	683a      	ldr	r2, [r7, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	733b      	strb	r3, [r7, #12]
        temp[1] = RoundKey[(i - 1) * 4 + 1];
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	3301      	adds	r3, #1
 80002c0:	683a      	ldr	r2, [r7, #0]
 80002c2:	4413      	add	r3, r2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	737b      	strb	r3, [r7, #13]
        temp[2] = RoundKey[(i - 1) * 4 + 2];
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	3302      	adds	r3, #2
 80002d0:	683a      	ldr	r2, [r7, #0]
 80002d2:	4413      	add	r3, r2
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	73bb      	strb	r3, [r7, #14]
        temp[3] = RoundKey[(i - 1) * 4 + 3];
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	3b01      	subs	r3, #1
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	3303      	adds	r3, #3
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	4413      	add	r3, r2
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	73fb      	strb	r3, [r7, #15]

        if (i % 4 == 0) {
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	f003 0303 	and.w	r3, r3, #3
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d11b      	bne.n	800032a <KeyExpansion+0xfe>
            uint8_t t = temp[0];
 80002f2:	7b3b      	ldrb	r3, [r7, #12]
 80002f4:	74fb      	strb	r3, [r7, #19]
            temp[0] = sbox[temp[1]] ^ Rcon[i / 8];
 80002f6:	7b7b      	ldrb	r3, [r7, #13]
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b3e      	ldr	r3, [pc, #248]	@ (80003f4 <KeyExpansion+0x1c8>)
 80002fc:	5c9a      	ldrb	r2, [r3, r2]
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	08db      	lsrs	r3, r3, #3
 8000302:	493d      	ldr	r1, [pc, #244]	@ (80003f8 <KeyExpansion+0x1cc>)
 8000304:	5ccb      	ldrb	r3, [r1, r3]
 8000306:	4053      	eors	r3, r2
 8000308:	b2db      	uxtb	r3, r3
 800030a:	733b      	strb	r3, [r7, #12]
            temp[1] = sbox[temp[2]];
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	461a      	mov	r2, r3
 8000310:	4b38      	ldr	r3, [pc, #224]	@ (80003f4 <KeyExpansion+0x1c8>)
 8000312:	5c9b      	ldrb	r3, [r3, r2]
 8000314:	737b      	strb	r3, [r7, #13]
            temp[2] = sbox[temp[3]];
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	461a      	mov	r2, r3
 800031a:	4b36      	ldr	r3, [pc, #216]	@ (80003f4 <KeyExpansion+0x1c8>)
 800031c:	5c9b      	ldrb	r3, [r3, r2]
 800031e:	73bb      	strb	r3, [r7, #14]
            temp[3] = sbox[t];
 8000320:	7cfb      	ldrb	r3, [r7, #19]
 8000322:	4a34      	ldr	r2, [pc, #208]	@ (80003f4 <KeyExpansion+0x1c8>)
 8000324:	5cd3      	ldrb	r3, [r2, r3]
 8000326:	73fb      	strb	r3, [r7, #15]
 8000328:	e018      	b.n	800035c <KeyExpansion+0x130>
        } else if (i % 4 == 3) {
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	f003 0303 	and.w	r3, r3, #3
 8000330:	2b03      	cmp	r3, #3
 8000332:	d113      	bne.n	800035c <KeyExpansion+0x130>
            temp[0] = sbox[temp[0]];
 8000334:	7b3b      	ldrb	r3, [r7, #12]
 8000336:	461a      	mov	r2, r3
 8000338:	4b2e      	ldr	r3, [pc, #184]	@ (80003f4 <KeyExpansion+0x1c8>)
 800033a:	5c9b      	ldrb	r3, [r3, r2]
 800033c:	733b      	strb	r3, [r7, #12]
            temp[1] = sbox[temp[1]];
 800033e:	7b7b      	ldrb	r3, [r7, #13]
 8000340:	461a      	mov	r2, r3
 8000342:	4b2c      	ldr	r3, [pc, #176]	@ (80003f4 <KeyExpansion+0x1c8>)
 8000344:	5c9b      	ldrb	r3, [r3, r2]
 8000346:	737b      	strb	r3, [r7, #13]
            temp[2] = sbox[temp[2]];
 8000348:	7bbb      	ldrb	r3, [r7, #14]
 800034a:	461a      	mov	r2, r3
 800034c:	4b29      	ldr	r3, [pc, #164]	@ (80003f4 <KeyExpansion+0x1c8>)
 800034e:	5c9b      	ldrb	r3, [r3, r2]
 8000350:	73bb      	strb	r3, [r7, #14]
            temp[3] = sbox[temp[3]];
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	461a      	mov	r2, r3
 8000356:	4b27      	ldr	r3, [pc, #156]	@ (80003f4 <KeyExpansion+0x1c8>)
 8000358:	5c9b      	ldrb	r3, [r3, r2]
 800035a:	73fb      	strb	r3, [r7, #15]
        }

        RoundKey[i * 4 + 0] = RoundKey[(i - 8) * 4 + 0] ^ temp[0];
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	3b08      	subs	r3, #8
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	683a      	ldr	r2, [r7, #0]
 8000364:	4413      	add	r3, r2
 8000366:	7819      	ldrb	r1, [r3, #0]
 8000368:	7b3a      	ldrb	r2, [r7, #12]
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	6838      	ldr	r0, [r7, #0]
 8000370:	4403      	add	r3, r0
 8000372:	404a      	eors	r2, r1
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 1] = RoundKey[(i - 8) * 4 + 1] ^ temp[1];
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	3b08      	subs	r3, #8
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	3301      	adds	r3, #1
 8000380:	683a      	ldr	r2, [r7, #0]
 8000382:	4413      	add	r3, r2
 8000384:	7819      	ldrb	r1, [r3, #0]
 8000386:	7b7a      	ldrb	r2, [r7, #13]
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	3301      	adds	r3, #1
 800038e:	6838      	ldr	r0, [r7, #0]
 8000390:	4403      	add	r3, r0
 8000392:	404a      	eors	r2, r1
 8000394:	b2d2      	uxtb	r2, r2
 8000396:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 2] = RoundKey[(i - 8) * 4 + 2] ^ temp[2];
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	3b08      	subs	r3, #8
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	3302      	adds	r3, #2
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	4413      	add	r3, r2
 80003a4:	7819      	ldrb	r1, [r3, #0]
 80003a6:	7bba      	ldrb	r2, [r7, #14]
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	3302      	adds	r3, #2
 80003ae:	6838      	ldr	r0, [r7, #0]
 80003b0:	4403      	add	r3, r0
 80003b2:	404a      	eors	r2, r1
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 3] = RoundKey[(i - 8) * 4 + 3] ^ temp[3];
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	3b08      	subs	r3, #8
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	3303      	adds	r3, #3
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	4413      	add	r3, r2
 80003c4:	7819      	ldrb	r1, [r3, #0]
 80003c6:	7bfa      	ldrb	r2, [r7, #15]
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	3303      	adds	r3, #3
 80003ce:	6838      	ldr	r0, [r7, #0]
 80003d0:	4403      	add	r3, r0
 80003d2:	404a      	eors	r2, r1
 80003d4:	b2d2      	uxtb	r2, r2
 80003d6:	701a      	strb	r2, [r3, #0]
    for (i = 4; i < 44; ++i) {
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	3301      	adds	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	2b2b      	cmp	r3, #43	@ 0x2b
 80003e2:	f67f af62 	bls.w	80002aa <KeyExpansion+0x7e>
    }
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	371c      	adds	r7, #28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	080048ec 	.word	0x080048ec
 80003f8:	08004aec 	.word	0x08004aec

080003fc <AddRoundKey>:

// AddRoundKey
static void AddRoundKey(uint8_t *state, const uint8_t *RoundKey) {
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	e010      	b.n	800042e <AddRoundKey+0x32>
        state[i] ^= RoundKey[i];
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	7819      	ldrb	r1, [r3, #0]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	683a      	ldr	r2, [r7, #0]
 8000418:	4413      	add	r3, r2
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	4403      	add	r3, r0
 8000422:	404a      	eors	r2, r1
 8000424:	b2d2      	uxtb	r2, r2
 8000426:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3301      	adds	r3, #1
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b0f      	cmp	r3, #15
 8000432:	ddeb      	ble.n	800040c <AddRoundKey+0x10>
    }
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <SubBytes>:

// SubBytes
static void SubBytes(uint8_t *state) {
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	e00d      	b.n	800046a <SubBytes+0x2a>
        state[i] = sbox[state[i]];
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	4413      	add	r3, r2
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	4619      	mov	r1, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	4a07      	ldr	r2, [pc, #28]	@ (800047c <SubBytes+0x3c>)
 8000460:	5c52      	ldrb	r2, [r2, r1]
 8000462:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3301      	adds	r3, #1
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2b0f      	cmp	r3, #15
 800046e:	ddee      	ble.n	800044e <SubBytes+0xe>
    }
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	080048ec 	.word	0x080048ec

08000480 <InvSubBytes>:

// InvSubBytes
static void InvSubBytes(uint8_t *state) {
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e00d      	b.n	80004aa <InvSubBytes+0x2a>
        state[i] = rsbox[state[i]];
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	4413      	add	r3, r2
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	4a07      	ldr	r2, [pc, #28]	@ (80004bc <InvSubBytes+0x3c>)
 80004a0:	5c52      	ldrb	r2, [r2, r1]
 80004a2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3301      	adds	r3, #1
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	2b0f      	cmp	r3, #15
 80004ae:	ddee      	ble.n	800048e <InvSubBytes+0xe>
    }
}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	080049ec 	.word	0x080049ec

080004c0 <ShiftRows>:

// ShiftRows
static void ShiftRows(uint8_t *state) {
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    uint8_t temp;

    // Row 1
    temp = state[1];
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	785b      	ldrb	r3, [r3, #1]
 80004cc:	73fb      	strb	r3, [r7, #15]
    state[1] = state[5];
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3301      	adds	r3, #1
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	7952      	ldrb	r2, [r2, #5]
 80004d6:	701a      	strb	r2, [r3, #0]
    state[5] = state[9];
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3305      	adds	r3, #5
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	7a52      	ldrb	r2, [r2, #9]
 80004e0:	701a      	strb	r2, [r3, #0]
    state[9] = state[13];
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3309      	adds	r3, #9
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	7b52      	ldrb	r2, [r2, #13]
 80004ea:	701a      	strb	r2, [r3, #0]
    state[13] = temp;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	330d      	adds	r3, #13
 80004f0:	7bfa      	ldrb	r2, [r7, #15]
 80004f2:	701a      	strb	r2, [r3, #0]

    // Row 2
    temp = state[2];
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	789b      	ldrb	r3, [r3, #2]
 80004f8:	73fb      	strb	r3, [r7, #15]
    state[2] = state[10];
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3302      	adds	r3, #2
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	7a92      	ldrb	r2, [r2, #10]
 8000502:	701a      	strb	r2, [r3, #0]
    state[10] = temp;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	330a      	adds	r3, #10
 8000508:	7bfa      	ldrb	r2, [r7, #15]
 800050a:	701a      	strb	r2, [r3, #0]
    temp = state[6];
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	799b      	ldrb	r3, [r3, #6]
 8000510:	73fb      	strb	r3, [r7, #15]
    state[6] = state[14];
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3306      	adds	r3, #6
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	7b92      	ldrb	r2, [r2, #14]
 800051a:	701a      	strb	r2, [r3, #0]
    state[14] = temp;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	330e      	adds	r3, #14
 8000520:	7bfa      	ldrb	r2, [r7, #15]
 8000522:	701a      	strb	r2, [r3, #0]

    // Row 3
    temp = state[3];
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	78db      	ldrb	r3, [r3, #3]
 8000528:	73fb      	strb	r3, [r7, #15]
    state[3] = state[15];
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3303      	adds	r3, #3
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7bd2      	ldrb	r2, [r2, #15]
 8000532:	701a      	strb	r2, [r3, #0]
    state[15] = state[11];
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	330f      	adds	r3, #15
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7ad2      	ldrb	r2, [r2, #11]
 800053c:	701a      	strb	r2, [r3, #0]
    state[11] = state[7];
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	330b      	adds	r3, #11
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	79d2      	ldrb	r2, [r2, #7]
 8000546:	701a      	strb	r2, [r3, #0]
    state[7] = temp;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3307      	adds	r3, #7
 800054c:	7bfa      	ldrb	r2, [r7, #15]
 800054e:	701a      	strb	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <InvShiftRows>:

// InvShiftRows
static void InvShiftRows(uint8_t *state) {
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
    uint8_t temp;

    // Row 1
    temp = state[13];
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7b5b      	ldrb	r3, [r3, #13]
 8000566:	73fb      	strb	r3, [r7, #15]
    state[13] = state[9];
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	330d      	adds	r3, #13
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	7a52      	ldrb	r2, [r2, #9]
 8000570:	701a      	strb	r2, [r3, #0]
    state[9] = state[5];
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3309      	adds	r3, #9
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7952      	ldrb	r2, [r2, #5]
 800057a:	701a      	strb	r2, [r3, #0]
    state[5] = state[1];
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3305      	adds	r3, #5
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7852      	ldrb	r2, [r2, #1]
 8000584:	701a      	strb	r2, [r3, #0]
    state[1] = temp;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3301      	adds	r3, #1
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	701a      	strb	r2, [r3, #0]

    // Row 2
    temp = state[2];
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	789b      	ldrb	r3, [r3, #2]
 8000592:	73fb      	strb	r3, [r7, #15]
    state[2] = state[10];
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3302      	adds	r3, #2
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7a92      	ldrb	r2, [r2, #10]
 800059c:	701a      	strb	r2, [r3, #0]
    state[10] = temp;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	330a      	adds	r3, #10
 80005a2:	7bfa      	ldrb	r2, [r7, #15]
 80005a4:	701a      	strb	r2, [r3, #0]
    temp = state[6];
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	799b      	ldrb	r3, [r3, #6]
 80005aa:	73fb      	strb	r3, [r7, #15]
    state[6] = state[14];
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3306      	adds	r3, #6
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7b92      	ldrb	r2, [r2, #14]
 80005b4:	701a      	strb	r2, [r3, #0]
    state[14] = temp;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	330e      	adds	r3, #14
 80005ba:	7bfa      	ldrb	r2, [r7, #15]
 80005bc:	701a      	strb	r2, [r3, #0]

    // Row 3
    temp = state[3];
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	78db      	ldrb	r3, [r3, #3]
 80005c2:	73fb      	strb	r3, [r7, #15]
    state[3] = state[7];
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3303      	adds	r3, #3
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	79d2      	ldrb	r2, [r2, #7]
 80005cc:	701a      	strb	r2, [r3, #0]
    state[7] = state[11];
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3307      	adds	r3, #7
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7ad2      	ldrb	r2, [r2, #11]
 80005d6:	701a      	strb	r2, [r3, #0]
    state[11] = state[15];
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	330b      	adds	r3, #11
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	7bd2      	ldrb	r2, [r2, #15]
 80005e0:	701a      	strb	r2, [r3, #0]
    state[15] = temp;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	330f      	adds	r3, #15
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	701a      	strb	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <MixColumns>:

// MixColumns
static void MixColumns(uint8_t *state) {
 80005f4:	b480      	push	{r7}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    // Implementation of MixColumns step
    for (int i = 0; i < 4; ++i) {
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e072      	b.n	80006e8 <MixColumns+0xf4>
        uint8_t *col = &state[i * 4];
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	613b      	str	r3, [r7, #16]
        uint8_t a[4] = {col[0], col[1], col[2], col[3]};
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	733b      	strb	r3, [r7, #12]
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	737b      	strb	r3, [r7, #13]
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	78db      	ldrb	r3, [r3, #3]
 8000624:	73fb      	strb	r3, [r7, #15]
        col[0] = (uint8_t)(0x02 * a[0] ^ 0x03 * a[1] ^ a[2] ^ a[3]);
 8000626:	7b3b      	ldrb	r3, [r7, #12]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	b25a      	sxtb	r2, r3
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	4619      	mov	r1, r3
 8000632:	0049      	lsls	r1, r1, #1
 8000634:	440b      	add	r3, r1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	b25b      	sxtb	r3, r3
 800063a:	4053      	eors	r3, r2
 800063c:	b25a      	sxtb	r2, r3
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	b25b      	sxtb	r3, r3
 8000642:	4053      	eors	r3, r2
 8000644:	b25a      	sxtb	r2, r3
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	4053      	eors	r3, r2
 800064c:	b25b      	sxtb	r3, r3
 800064e:	b2da      	uxtb	r2, r3
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	701a      	strb	r2, [r3, #0]
        col[1] = (uint8_t)(a[0] ^ 0x02 * a[1] ^ 0x03 * a[2] ^ a[3]);
 8000654:	7b3b      	ldrb	r3, [r7, #12]
 8000656:	b25a      	sxtb	r2, r3
 8000658:	7b7b      	ldrb	r3, [r7, #13]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	b25b      	sxtb	r3, r3
 8000660:	4053      	eors	r3, r2
 8000662:	b25a      	sxtb	r2, r3
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	4619      	mov	r1, r3
 8000668:	0049      	lsls	r1, r1, #1
 800066a:	440b      	add	r3, r1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	b25b      	sxtb	r3, r3
 8000670:	4053      	eors	r3, r2
 8000672:	b25a      	sxtb	r2, r3
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	b25b      	sxtb	r3, r3
 8000678:	4053      	eors	r3, r2
 800067a:	b25a      	sxtb	r2, r3
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3301      	adds	r3, #1
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
        col[2] = (uint8_t)(a[0] ^ a[1] ^ 0x02 * a[2] ^ 0x03 * a[3]);
 8000684:	7b3a      	ldrb	r2, [r7, #12]
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	4053      	eors	r3, r2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	b25a      	sxtb	r2, r3
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	b25b      	sxtb	r3, r3
 8000696:	4053      	eors	r3, r2
 8000698:	b25a      	sxtb	r2, r3
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4619      	mov	r1, r3
 800069e:	0049      	lsls	r1, r1, #1
 80006a0:	440b      	add	r3, r1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	4053      	eors	r3, r2
 80006a8:	b25a      	sxtb	r2, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	3302      	adds	r3, #2
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	701a      	strb	r2, [r3, #0]
        col[3] = (uint8_t)(0x03 * a[0] ^ a[1] ^ a[2] ^ 0x02 * a[3]);
 80006b2:	7b3b      	ldrb	r3, [r7, #12]
 80006b4:	461a      	mov	r2, r3
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	b25a      	sxtb	r2, r3
 80006be:	7b7b      	ldrb	r3, [r7, #13]
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4053      	eors	r3, r2
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	4053      	eors	r3, r2
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	4053      	eors	r3, r2
 80006d8:	b25a      	sxtb	r2, r3
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	3303      	adds	r3, #3
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3301      	adds	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	dd89      	ble.n	8000602 <MixColumns+0xe>
    }
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	371c      	adds	r7, #28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <InvMixColumns>:

// InvMixColumns
static void InvMixColumns(uint8_t *state) {
 80006fa:	b480      	push	{r7}
 80006fc:	b087      	sub	sp, #28
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    // Implementation of inverse MixColumns step
    for (int i = 0; i < 4; ++i) {
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	e0af      	b.n	8000868 <InvMixColumns+0x16e>
        uint8_t *col = &state[i * 4];
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	461a      	mov	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        uint8_t a[4] = {col[0], col[1], col[2], col[3]};
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	733b      	strb	r3, [r7, #12]
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	785b      	ldrb	r3, [r3, #1]
 800071e:	737b      	strb	r3, [r7, #13]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	73bb      	strb	r3, [r7, #14]
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	78db      	ldrb	r3, [r3, #3]
 800072a:	73fb      	strb	r3, [r7, #15]
        col[0] = (uint8_t)(0x0e * a[0] ^ 0x0b * a[1] ^ 0x0d * a[2] ^ 0x09 * a[3]);
 800072c:	7b3b      	ldrb	r3, [r7, #12]
 800072e:	461a      	mov	r2, r3
 8000730:	00d2      	lsls	r2, r2, #3
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	b25a      	sxtb	r2, r3
 800073a:	7b7b      	ldrb	r3, [r7, #13]
 800073c:	4619      	mov	r1, r3
 800073e:	0089      	lsls	r1, r1, #2
 8000740:	4419      	add	r1, r3
 8000742:	0049      	lsls	r1, r1, #1
 8000744:	440b      	add	r3, r1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	b25b      	sxtb	r3, r3
 800074a:	4053      	eors	r3, r2
 800074c:	b25a      	sxtb	r2, r3
 800074e:	7bbb      	ldrb	r3, [r7, #14]
 8000750:	4619      	mov	r1, r3
 8000752:	0049      	lsls	r1, r1, #1
 8000754:	4419      	add	r1, r3
 8000756:	0089      	lsls	r1, r1, #2
 8000758:	440b      	add	r3, r1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	b25b      	sxtb	r3, r3
 800075e:	4053      	eors	r3, r2
 8000760:	b25a      	sxtb	r2, r3
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	4619      	mov	r1, r3
 8000766:	00c9      	lsls	r1, r1, #3
 8000768:	440b      	add	r3, r1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4053      	eors	r3, r2
 8000770:	b25b      	sxtb	r3, r3
 8000772:	b2da      	uxtb	r2, r3
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	701a      	strb	r2, [r3, #0]
        col[1] = (uint8_t)(0x09 * a[0] ^ 0x0e * a[1] ^ 0x0b * a[2] ^ 0x0d * a[3]);
 8000778:	7b3b      	ldrb	r3, [r7, #12]
 800077a:	461a      	mov	r2, r3
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	4413      	add	r3, r2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	b25a      	sxtb	r2, r3
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	4619      	mov	r1, r3
 8000788:	00c9      	lsls	r1, r1, #3
 800078a:	1acb      	subs	r3, r1, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	b2db      	uxtb	r3, r3
 8000790:	b25b      	sxtb	r3, r3
 8000792:	4053      	eors	r3, r2
 8000794:	b25a      	sxtb	r2, r3
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	4619      	mov	r1, r3
 800079a:	0089      	lsls	r1, r1, #2
 800079c:	4419      	add	r1, r3
 800079e:	0049      	lsls	r1, r1, #1
 80007a0:	440b      	add	r3, r1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	4053      	eors	r3, r2
 80007a8:	b25a      	sxtb	r2, r3
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	4619      	mov	r1, r3
 80007ae:	0049      	lsls	r1, r1, #1
 80007b0:	4419      	add	r1, r3
 80007b2:	0089      	lsls	r1, r1, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	4053      	eors	r3, r2
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	701a      	strb	r2, [r3, #0]
        col[2] = (uint8_t)(0x0d * a[0] ^ 0x09 * a[1] ^ 0x0e * a[2] ^ 0x0b * a[3]);
 80007c6:	7b3b      	ldrb	r3, [r7, #12]
 80007c8:	461a      	mov	r2, r3
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	441a      	add	r2, r3
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	7b7b      	ldrb	r3, [r7, #13]
 80007d8:	4619      	mov	r1, r3
 80007da:	00c9      	lsls	r1, r1, #3
 80007dc:	440b      	add	r3, r1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	4053      	eors	r3, r2
 80007e4:	b25a      	sxtb	r2, r3
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	4619      	mov	r1, r3
 80007ea:	00c9      	lsls	r1, r1, #3
 80007ec:	1acb      	subs	r3, r1, r3
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	4053      	eors	r3, r2
 80007f6:	b25a      	sxtb	r2, r3
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	4619      	mov	r1, r3
 80007fc:	0089      	lsls	r1, r1, #2
 80007fe:	4419      	add	r1, r3
 8000800:	0049      	lsls	r1, r1, #1
 8000802:	440b      	add	r3, r1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	b25b      	sxtb	r3, r3
 8000808:	4053      	eors	r3, r2
 800080a:	b25a      	sxtb	r2, r3
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	3302      	adds	r3, #2
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	701a      	strb	r2, [r3, #0]
        col[3] = (uint8_t)(0x0b * a[0] ^ 0x0d * a[1] ^ 0x09 * a[2] ^ 0x0e * a[3]);
 8000814:	7b3b      	ldrb	r3, [r7, #12]
 8000816:	461a      	mov	r2, r3
 8000818:	0092      	lsls	r2, r2, #2
 800081a:	441a      	add	r2, r3
 800081c:	0052      	lsls	r2, r2, #1
 800081e:	4413      	add	r3, r2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	b25a      	sxtb	r2, r3
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	4619      	mov	r1, r3
 8000828:	0049      	lsls	r1, r1, #1
 800082a:	4419      	add	r1, r3
 800082c:	0089      	lsls	r1, r1, #2
 800082e:	440b      	add	r3, r1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	b25b      	sxtb	r3, r3
 8000834:	4053      	eors	r3, r2
 8000836:	b25a      	sxtb	r2, r3
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	4619      	mov	r1, r3
 800083c:	00c9      	lsls	r1, r1, #3
 800083e:	440b      	add	r3, r1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	b25b      	sxtb	r3, r3
 8000844:	4053      	eors	r3, r2
 8000846:	b25a      	sxtb	r2, r3
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	4619      	mov	r1, r3
 800084c:	00c9      	lsls	r1, r1, #3
 800084e:	1acb      	subs	r3, r1, r3
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	b25b      	sxtb	r3, r3
 8000856:	4053      	eors	r3, r2
 8000858:	b25a      	sxtb	r2, r3
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	3303      	adds	r3, #3
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b03      	cmp	r3, #3
 800086c:	f77f af4c 	ble.w	8000708 <InvMixColumns+0xe>
    }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	371c      	adds	r7, #28
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <AES_Init>:

// Initialization
void AES_Init(AES_Context *ctx, const uint8_t *key) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    KeyExpansion(key, ctx->RoundKey);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4619      	mov	r1, r3
 800088a:	6838      	ldr	r0, [r7, #0]
 800088c:	f7ff fcce 	bl	800022c <KeyExpansion>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <AES_Encrypt>:

// AES Encryption
void AES_Encrypt(AES_Context *ctx, uint8_t *input, uint8_t *output) {
 8000898:	b5b0      	push	{r4, r5, r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
    uint8_t state[AES_BLOCK_SIZE];
    memcpy(state, input, AES_BLOCK_SIZE);
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	f107 0414 	add.w	r4, r7, #20
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	6859      	ldr	r1, [r3, #4]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    AddRoundKey(state, ctx->RoundKey);
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fd9d 	bl	80003fc <AddRoundKey>

    for (int round = 1; round < 10; ++round) {
 80008c2:	2301      	movs	r3, #1
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80008c6:	e01b      	b.n	8000900 <AES_Encrypt+0x68>
        SubBytes(state);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fdb7 	bl	8000440 <SubBytes>
        ShiftRows(state);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fdf2 	bl	80004c0 <ShiftRows>
        MixColumns(state);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe87 	bl	80005f4 <MixColumns>
        AddRoundKey(state, ctx->RoundKey + round * AES_BLOCK_SIZE);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008ea:	0112      	lsls	r2, r2, #4
 80008ec:	441a      	add	r2, r3
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fd81 	bl	80003fc <AddRoundKey>
    for (int round = 1; round < 10; ++round) {
 80008fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fc:	3301      	adds	r3, #1
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000902:	2b09      	cmp	r3, #9
 8000904:	dde0      	ble.n	80008c8 <AES_Encrypt+0x30>
    }

    SubBytes(state);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fd98 	bl	8000440 <SubBytes>
    ShiftRows(state);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fdd3 	bl	80004c0 <ShiftRows>
    AddRoundKey(state, ctx->RoundKey + 10 * AES_BLOCK_SIZE);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fd68 	bl	80003fc <AddRoundKey>

    memcpy(output, state, AES_BLOCK_SIZE);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	461d      	mov	r5, r3
 8000930:	f107 0414 	add.w	r4, r7, #20
 8000934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000936:	6028      	str	r0, [r5, #0]
 8000938:	6069      	str	r1, [r5, #4]
 800093a:	60aa      	str	r2, [r5, #8]
 800093c:	60eb      	str	r3, [r5, #12]
}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	@ 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bdb0      	pop	{r4, r5, r7, pc}

08000946 <AES_Decrypt>:

// AES Decryption
void AES_Decrypt(AES_Context *ctx, uint8_t *input, uint8_t *output) {
 8000946:	b5b0      	push	{r4, r5, r7, lr}
 8000948:	b08a      	sub	sp, #40	@ 0x28
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
    uint8_t state[AES_BLOCK_SIZE];
    memcpy(state, input, AES_BLOCK_SIZE);
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	f107 0414 	add.w	r4, r7, #20
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	6859      	ldr	r1, [r3, #4]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    AddRoundKey(state, ctx->RoundKey + 10 * AES_BLOCK_SIZE);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fd44 	bl	80003fc <AddRoundKey>

    for (int round = 9; round > 0; --round) {
 8000974:	2309      	movs	r3, #9
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
 8000978:	e01b      	b.n	80009b2 <AES_Decrypt+0x6c>
        InvShiftRows(state);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fdeb 	bl	800055a <InvShiftRows>
        InvSubBytes(state);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fd79 	bl	8000480 <InvSubBytes>
        AddRoundKey(state, ctx->RoundKey + round * AES_BLOCK_SIZE);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	441a      	add	r2, r3
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fd2d 	bl	80003fc <AddRoundKey>
        InvMixColumns(state);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fea7 	bl	80006fa <InvMixColumns>
    for (int round = 9; round > 0; --round) {
 80009ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ae:	3b01      	subs	r3, #1
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	dce0      	bgt.n	800097a <AES_Decrypt+0x34>
    }

    InvShiftRows(state);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fdcc 	bl	800055a <InvShiftRows>
    InvSubBytes(state);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd5a 	bl	8000480 <InvSubBytes>
    AddRoundKey(state, ctx->RoundKey);
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fd11 	bl	80003fc <AddRoundKey>

    memcpy(output, state, AES_BLOCK_SIZE);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	461d      	mov	r5, r3
 80009de:	f107 0414 	add.w	r4, r7, #20
 80009e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e4:	6028      	str	r0, [r5, #0]
 80009e6:	6069      	str	r1, [r5, #4]
 80009e8:	60aa      	str	r2, [r5, #8]
 80009ea:	60eb      	str	r3, [r5, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bdb0      	pop	{r4, r5, r7, pc}

080009f4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a18:	68fb      	ldr	r3, [r7, #12]
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b0c1      	sub	sp, #260	@ 0x104
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

    AES_Context ctx;
    bool is_done = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

    // Example 256-bit key
    uint8_t key[AES_KEY_SIZE] = {
 8000a30:	4b48      	ldr	r3, [pc, #288]	@ (8000b54 <main+0x130>)
 8000a32:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
        0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    };

    // Example plaintext (16 bytes)
    uint8_t plaintext[AES_BLOCK_SIZE] = {
 8000a3c:	4b46      	ldr	r3, [pc, #280]	@ (8000b58 <main+0x134>)
 8000a3e:	f107 0420 	add.w	r4, r7, #32
 8000a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uint8_t encrypted[AES_BLOCK_SIZE];
    uint8_t decrypted[AES_BLOCK_SIZE];

    // Initialize AES context with the key
    AES_Init(&ctx, key);
 8000a48:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000a4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff12 	bl	800087c <AES_Init>

    // Encrypt the plaintext
    AES_Encrypt(&ctx, plaintext, encrypted);
 8000a58:	f107 0210 	add.w	r2, r7, #16
 8000a5c:	f107 0120 	add.w	r1, r7, #32
 8000a60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff17 	bl	8000898 <AES_Encrypt>

    // Decrypt the ciphertext
    AES_Decrypt(&ctx, encrypted, decrypted);
 8000a6a:	463a      	mov	r2, r7
 8000a6c:	f107 0110 	add.w	r1, r7, #16
 8000a70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff66 	bl	8000946 <AES_Decrypt>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 fab9 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f875 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a82:	f000 f913 	bl	8000cac <MX_GPIO_Init>
  MX_USART2_Init();
 8000a86:	f000 f8c5 	bl	8000c14 <MX_USART2_Init>
//  {
//    Error_Handler();
//  }

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f000 fde2 	bl	8001654 <HAL_PWREx_ReleaseCore>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a94:	f000 fb22 	bl	80010dc <HAL_Delay>

    /* USER CODE BEGIN 3 */
//	  printf("Hello \n");
	  if (!is_done)
 8000a98:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8000a9c:	f083 0301 	eor.w	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f4      	beq.n	8000a90 <main+0x6c>
	  {
	    printf("Plaintext: \n");
 8000aa6:	482d      	ldr	r0, [pc, #180]	@ (8000b5c <main+0x138>)
 8000aa8:	f002 fffa 	bl	8003aa0 <puts>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ab2:	e00e      	b.n	8000ad2 <main+0xae>
	        printf("%02x ", plaintext[i]);
 8000ab4:	f107 0220 	add.w	r2, r7, #32
 8000ab8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000abc:	4413      	add	r3, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4827      	ldr	r0, [pc, #156]	@ (8000b60 <main+0x13c>)
 8000ac4:	f002 ff7c 	bl	80039c0 <iprintf>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000ac8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000acc:	3301      	adds	r3, #1
 8000ace:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000ad6:	2b0f      	cmp	r3, #15
 8000ad8:	ddec      	ble.n	8000ab4 <main+0x90>
	    }
	    printf("\n\nEncrypted: \n");
 8000ada:	4822      	ldr	r0, [pc, #136]	@ (8000b64 <main+0x140>)
 8000adc:	f002 ffe0 	bl	8003aa0 <puts>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000ae6:	e00e      	b.n	8000b06 <main+0xe2>
	        printf("%02x ", encrypted[i]);
 8000ae8:	f107 0210 	add.w	r2, r7, #16
 8000aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	481a      	ldr	r0, [pc, #104]	@ (8000b60 <main+0x13c>)
 8000af8:	f002 ff62 	bl	80039c0 <iprintf>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000b00:	3301      	adds	r3, #1
 8000b02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	ddec      	ble.n	8000ae8 <main+0xc4>
	    }
	    printf("\n\nDecrypted: \n");
 8000b0e:	4816      	ldr	r0, [pc, #88]	@ (8000b68 <main+0x144>)
 8000b10:	f002 ffc6 	bl	8003aa0 <puts>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8000b1a:	e010      	b.n	8000b3e <main+0x11a>
	        printf("%02x ", decrypted[i]);
 8000b1c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b20:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8000b24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000b28:	4413      	add	r3, r2
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <main+0x13c>)
 8000b30:	f002 ff46 	bl	80039c0 <iprintf>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000b34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000b38:	3301      	adds	r3, #1
 8000b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8000b3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000b42:	2b0f      	cmp	r3, #15
 8000b44:	ddea      	ble.n	8000b1c <main+0xf8>
	    }
	    printf("\n");
 8000b46:	200a      	movs	r0, #10
 8000b48:	f002 ff4c 	bl	80039e4 <putchar>
	    is_done = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	  HAL_Delay(1000);
 8000b52:	e79d      	b.n	8000a90 <main+0x6c>
 8000b54:	08004810 	.word	0x08004810
 8000b58:	08004820 	.word	0x08004820
 8000b5c:	080047dc 	.word	0x080047dc
 8000b60:	080047e8 	.word	0x080047e8
 8000b64:	080047f0 	.word	0x080047f0
 8000b68:	08004800 	.word	0x08004800

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b09a      	sub	sp, #104	@ 0x68
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	2248      	movs	r2, #72	@ 0x48
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 f870 	bl	8003c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <SystemClock_Config+0xa4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <SystemClock_Config+0xa4>)
 8000b9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <SystemClock_Config+0xa4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bba:	2360      	movs	r3, #96	@ 0x60
 8000bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f806 	bl	8001bd8 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bd2:	f000 f875 	bl	8000cc0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000bd6:	236f      	movs	r3, #111	@ 0x6f
 8000bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fb70 	bl	80022dc <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c02:	f000 f85d 	bl	8000cc0 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3768      	adds	r7, #104	@ 0x68
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	58000400 	.word	0x58000400

08000c14 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <MX_USART2_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c5e:	f002 f829 	bl	8002cb4 <HAL_USART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f82a 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c70:	f002 fd1f 	bl	80036b2 <HAL_USARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 f821 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c82:	f002 fd54 	bl	800372e <HAL_USARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f818 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_USART2_Init+0x90>)
 8000c92:	f002 fcd6 	bl	8003642 <HAL_USARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART2_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f810 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000084 	.word	0x20000084
 8000ca8:	40004400 	.word	0x40004400

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	2004      	movs	r0, #4
 8000cb2:	f7ff fe9f 	bl	80009f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fe9c 	bl	80009f4 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <Error_Handler+0x8>

08000ccc <_write>:
}
#endif /* USE_FULL_ASSERT */


#if defined(__GNUC__)
int _write(int fd, char * ptr, int len) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  HAL_USART_Transmit( & husart2, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <_write+0x28>)
 8000ce4:	f002 f840 	bl	8002d68 <HAL_USART_Transmit>
  return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000084 	.word	0x20000084

08000cf8 <LL_AHB2_GRP1_EnableClock>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b096      	sub	sp, #88	@ 0x58
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2238      	movs	r2, #56	@ 0x38
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 ff6b 	bl	8003c60 <memset>
  if(husart->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <HAL_USART_MspInit+0x88>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d126      	bne.n	8000de2 <HAL_USART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d98:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000d9c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fe5a 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8000dae:	f7ff ff87 	bl	8000cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000db6:	f7ff ffb7 	bl	8000d28 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ff9c 	bl	8000cf8 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_4;
 8000dc0:	231c      	movs	r3, #28
 8000dc2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dde:	f000 fab1 	bl	8001344 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000de2:	bf00      	nop
 8000de4:	3758      	adds	r7, #88	@ 0x58
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40004400 	.word	0x40004400

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f930 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW1);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f8bd 	bl	8000fcc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW2);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 f8b6 	bl	8000fcc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW3);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f000 f8af 	bl	8000fcc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e00a      	b.n	8000e9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e84:	f3af 8000 	nop.w
 8000e88:	4601      	mov	r1, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	60ba      	str	r2, [r7, #8]
 8000e90:	b2ca      	uxtb	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	dbf0      	blt.n	8000e84 <_read+0x12>
  }

  return len;
 8000ea2:	687b      	ldr	r3, [r7, #4]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <_isatty>:

int _isatty(int file)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f14:	4a14      	ldr	r2, [pc, #80]	@ (8000f68 <_sbrk+0x5c>)
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <_sbrk+0x60>)
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <_sbrk+0x64>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	@ (8000f74 <_sbrk+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d207      	bcs.n	8000f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f3c:	f002 fede 	bl	8003cfc <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	220c      	movs	r2, #12
 8000f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e009      	b.n	8000f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <_sbrk+0x64>)
 8000f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20008000 	.word	0x20008000
 8000f6c:	00000400 	.word	0x00000400
 8000f70:	20000110 	.word	0x20000110
 8000f74:	20000280 	.word	0x20000280

08000f78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f7c:	f7ff f950 	bl	8000220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc4 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fa6:	f002 feaf 	bl	8003d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000faa:	f7ff fd3b 	bl	8000a24 <main>

08000fae <LoopForever>:

LoopForever:
    b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   r0, =_estack
 8000fb0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fbc:	08004b4c 	.word	0x08004b4c
  ldr r2, =_sbss
 8000fc0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fc4:	2000027c 	.word	0x2000027c

08000fc8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>
	...

08000fcc <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <BSP_PB_IRQHandler+0x20>)
 8000fdc:	4413      	add	r3, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f981 	bl	80012e6 <HAL_EXTI_IRQHandler>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000114 	.word	0x20000114

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 f942 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001000:	f001 fb4e 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 8001004:	4603      	mov	r3, r0
 8001006:	4a09      	ldr	r2, [pc, #36]	@ (800102c <HAL_Init+0x3c>)
 8001008:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f810 	bl	8001030 <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101c:	f7ff fe9c 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001020:	79fb      	ldrb	r3, [r7, #7]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000000 	.word	0x20000000

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <HAL_InitTick+0x6c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d024      	beq.n	800108e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001044:	f001 fb2c 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 8001048:	4602      	mov	r2, r0
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_InitTick+0x6c>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001054:	fbb3 f3f1 	udiv	r3, r3, r1
 8001058:	fbb2 f3f3 	udiv	r3, r2, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f936 	bl	80012ce <HAL_SYSTICK_Config>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10f      	bne.n	8001088 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	d809      	bhi.n	8001082 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106e:	2200      	movs	r2, #0
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	f04f 30ff 	mov.w	r0, #4294967295
 8001076:	f000 f910 	bl	800129a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800107a:	4a09      	ldr	r2, [pc, #36]	@ (80010a0 <HAL_InitTick+0x70>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	e007      	b.n	8001092 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e004      	b.n	8001092 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e001      	b.n	8001092 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000004 	.word	0x20000004

080010a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <HAL_IncTick+0x1c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <HAL_IncTick+0x20>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a03      	ldr	r2, [pc, #12]	@ (80010c4 <HAL_IncTick+0x20>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	20000008 	.word	0x20000008
 80010c4:	2000012c 	.word	0x2000012c

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b02      	ldr	r3, [pc, #8]	@ (80010d8 <HAL_GetTick+0x10>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	2000012c 	.word	0x2000012c

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff fff0 	bl	80010c8 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffe0 	bl	80010c8 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff90 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff49 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff60 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff92 	bl	80011dc <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff61 	bl	8001188 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffb2 	bl	8001240 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	0c1b      	lsrs	r3, r3, #16
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	2201      	movs	r2, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	015b      	lsls	r3, r3, #5
 800130e:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8001312:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8001316:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4798      	blx	r3
    }
  }
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	e140      	b.n	80015d6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8132 	beq.w	80015d0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d005      	beq.n	8001384 <HAL_GPIO_Init+0x40>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d130      	bne.n	80013e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ba:	2201      	movs	r2, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 0201 	and.w	r2, r3, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d017      	beq.n	8001422 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d123      	bne.n	8001476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3208      	adds	r2, #8
 8001470:	6939      	ldr	r1, [r7, #16]
 8001472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0203 	and.w	r2, r3, #3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 808c 	beq.w	80015d0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80014b8:	4a4e      	ldr	r2, [pc, #312]	@ (80015f4 <HAL_GPIO_Init+0x2b0>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	2207      	movs	r2, #7
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1bc>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a44      	ldr	r2, [pc, #272]	@ (80015f8 <HAL_GPIO_Init+0x2b4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1b8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a43      	ldr	r2, [pc, #268]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1b4>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e004      	b.n	8001502 <HAL_GPIO_Init+0x1be>
 80014f8:	2307      	movs	r3, #7
 80014fa:	e002      	b.n	8001502 <HAL_GPIO_Init+0x1be>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_GPIO_Init+0x1be>
 8001500:	2300      	movs	r3, #0
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	f002 0203 	and.w	r2, r2, #3
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4093      	lsls	r3, r2
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001512:	4938      	ldr	r1, [pc, #224]	@ (80015f4 <HAL_GPIO_Init+0x2b0>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001520:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001544:	4a2e      	ldr	r2, [pc, #184]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800154a:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800156e:	4a24      	ldr	r2, [pc, #144]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001574:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 8001576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800157a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800159a:	4a19      	ldr	r2, [pc, #100]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 80015a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015a8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80015c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f47f aeb7 	bne.w	8001354 <HAL_GPIO_Init+0x10>
  }
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40010000 	.word	0x40010000
 80015f8:	48000400 	.word	0x48000400
 80015fc:	48000800 	.word	0x48000800
 8001600:	58000800 	.word	0x58000800

08001604 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <HAL_PWR_EnableBkUpAccess+0x18>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a03      	ldr	r2, [pc, #12]	@ (800161c <HAL_PWR_EnableBkUpAccess+0x18>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	58000400 	.word	0x58000400

08001620 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <LL_PWR_EnableBootC2+0x18>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4a03      	ldr	r2, [pc, #12]	@ (8001638 <LL_PWR_EnableBootC2+0x18>)
 800162a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	58000400 	.word	0x58000400

0800163c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001640:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <HAL_PWREx_GetVoltageRange+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	58000400 	.word	0x58000400

08001654 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 800165c:	f7ff ffe0 	bl	8001620 <LL_PWR_EnableBootC2>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001678:	d101      	bne.n	800167e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	58000400 	.word	0x58000400

0800168c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800169a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80016c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016d6:	d101      	bne.n	80016dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001730:	d101      	bne.n	8001736 <LL_RCC_HSE_IsReady+0x18>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <LL_RCC_HSE_IsReady+0x1a>
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800178a:	d101      	bne.n	8001790 <LL_RCC_HSI_IsReady+0x18>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <LL_RCC_HSI_IsReady+0x1a>
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	061b      	lsls	r3, r3, #24
 80017b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d101      	bne.n	80017da <LL_RCC_LSE_IsReady+0x18>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_RCC_LSE_IsReady+0x1a>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800180c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b02      	cmp	r3, #2
 8001836:	d101      	bne.n	800183c <LL_RCC_LSI_IsReady+0x18>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <LL_RCC_LSI_IsReady+0x1a>
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800184a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b02      	cmp	r3, #2
 800188e:	d101      	bne.n	8001894 <LL_RCC_MSI_IsReady+0x16>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <LL_RCC_MSI_IsReady+0x18>
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d101      	bne.n	80018b4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001962:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001982:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001986:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800198a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019b0:	f023 020f 	bic.w	r2, r3, #15
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019bc:	4313      	orrs	r3, r2
 80019be:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001abe:	d101      	bne.n	8001ac4 <LL_RCC_PLL_IsReady+0x18>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <LL_RCC_PLL_IsReady+0x1a>
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b3a:	d101      	bne.n	8001b40 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b52:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b5e:	d101      	bne.n	8001b64 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b76:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b82:	d101      	bne.n	8001b88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ba4:	d101      	bne.n	8001baa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bc6:	d101      	bne.n	8001bcc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e36f      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bea:	f7ff fea6 	bl	800193a <LL_RCC_GetSysClkSource>
 8001bee:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf0:	f7ff ff8f 	bl	8001b12 <LL_RCC_PLL_GetMainSource>
 8001bf4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80c4 	beq.w	8001d8c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_RCC_OscConfig+0x3e>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	2b0c      	cmp	r3, #12
 8001c0e:	d176      	bne.n	8001cfe <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d173      	bne.n	8001cfe <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e353      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_OscConfig+0x68>
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c3e:	e006      	b.n	8001c4e <HAL_RCC_OscConfig+0x76>
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d222      	bcs.n	8001c98 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fd5a 	bl	8002710 <RCC_SetFlashLatencyFromMSIRange>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e331      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fe2b 	bl	80018ec <LL_RCC_MSI_SetCalibTrimming>
 8001c96:	e021      	b.n	8001cdc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fe12 	bl	80018ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 fd1f 	bl	8002710 <RCC_SetFlashLatencyFromMSIRange>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e2f6      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cdc:	f000 fce0 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4aa7      	ldr	r2, [pc, #668]	@ (8001f80 <HAL_RCC_OscConfig+0x3a8>)
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001ce6:	4ba7      	ldr	r3, [pc, #668]	@ (8001f84 <HAL_RCC_OscConfig+0x3ac>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f9a0 	bl	8001030 <HAL_InitTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001cf4:	7cfb      	ldrb	r3, [r7, #19]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d047      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001cfa:	7cfb      	ldrb	r3, [r7, #19]
 8001cfc:	e2e5      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d02c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d06:	f7ff fd9e 	bl	8001846 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d0a:	f7ff f9dd 	bl	80010c8 <HAL_GetTick>
 8001d0e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d12:	f7ff f9d9 	bl	80010c8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e2d2      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d24:	f7ff fdab 	bl	800187e <LL_RCC_MSI_IsReady>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f1      	beq.n	8001d12 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fdc7 	bl	80018ec <LL_RCC_MSI_SetCalibTrimming>
 8001d5e:	e015      	b.n	8001d8c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d60:	f7ff fd7f 	bl	8001862 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f9b0 	bl	80010c8 <HAL_GetTick>
 8001d68:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f9ac 	bl	80010c8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e2a5      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d7e:	f7ff fd7e 	bl	800187e <LL_RCC_MSI_IsReady>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f1      	bne.n	8001d6c <HAL_RCC_OscConfig+0x194>
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d8a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d058      	beq.n	8001e4a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x1d2>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	d108      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d14b      	bne.n	8001e4a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e289      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd4:	d102      	bne.n	8001ddc <HAL_RCC_OscConfig+0x204>
 8001dd6:	f7ff fc86 	bl	80016e6 <LL_RCC_HSE_Enable>
 8001dda:	e00d      	b.n	8001df8 <HAL_RCC_OscConfig+0x220>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001de4:	d104      	bne.n	8001df0 <HAL_RCC_OscConfig+0x218>
 8001de6:	f7ff fc51 	bl	800168c <LL_RCC_HSE_EnableTcxo>
 8001dea:	f7ff fc7c 	bl	80016e6 <LL_RCC_HSE_Enable>
 8001dee:	e003      	b.n	8001df8 <HAL_RCC_OscConfig+0x220>
 8001df0:	f7ff fc87 	bl	8001702 <LL_RCC_HSE_Disable>
 8001df4:	f7ff fc58 	bl	80016a8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff f962 	bl	80010c8 <HAL_GetTick>
 8001e04:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff f95e 	bl	80010c8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	@ 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e257      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e1a:	f7ff fc80 	bl	800171e <LL_RCC_HSE_IsReady>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f1      	beq.n	8001e08 <HAL_RCC_OscConfig+0x230>
 8001e24:	e011      	b.n	8001e4a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff f94f 	bl	80010c8 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2e:	f7ff f94b 	bl	80010c8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b64      	cmp	r3, #100	@ 0x64
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e244      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e40:	f7ff fc6d 	bl	800171e <LL_RCC_HSE_IsReady>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f1      	bne.n	8001e2e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d046      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_OscConfig+0x290>
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d10e      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e22a      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fc8e 	bl	800179a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e7e:	e031      	b.n	8001ee4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d019      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	f7ff fc5a 	bl	8001740 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f91c 	bl	80010c8 <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7ff f918 	bl	80010c8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e211      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ea6:	f7ff fc67 	bl	8001778 <LL_RCC_HSI_IsReady>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f1      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fc70 	bl	800179a <LL_RCC_HSI_SetCalibTrimming>
 8001eba:	e013      	b.n	8001ee4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebc:	f7ff fc4e 	bl	800175c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f902 	bl	80010c8 <HAL_GetTick>
 8001ec4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f8fe 	bl	80010c8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1f7      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001eda:	f7ff fc4d 	bl	8001778 <LL_RCC_HSI_IsReady>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f1      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d06e      	beq.n	8001fce <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d056      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f00:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d031      	beq.n	8001f74 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e1d0      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d013      	beq.n	8001f5a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f32:	f7ff fc67 	bl	8001804 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f36:	f7ff f8c7 	bl	80010c8 <HAL_GetTick>
 8001f3a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff f8c3 	bl	80010c8 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b11      	cmp	r3, #17
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1bc      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f50:	f7ff fc68 	bl	8001824 <LL_RCC_LSI_IsReady>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f1      	bne.n	8001f3e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f62:	f023 0210 	bic.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f74:	f7ff fc36 	bl	80017e4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f78:	f7ff f8a6 	bl	80010c8 <HAL_GetTick>
 8001f7c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f7e:	e00c      	b.n	8001f9a <HAL_RCC_OscConfig+0x3c2>
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff f89e 	bl	80010c8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b11      	cmp	r3, #17
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e197      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f9a:	f7ff fc43 	bl	8001824 <LL_RCC_LSI_IsReady>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f1      	beq.n	8001f88 <HAL_RCC_OscConfig+0x3b0>
 8001fa4:	e013      	b.n	8001fce <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa6:	f7ff fc2d 	bl	8001804 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff f88d 	bl	80010c8 <HAL_GetTick>
 8001fae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff f889 	bl	80010c8 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b11      	cmp	r3, #17
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e182      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001fc4:	f7ff fc2e 	bl	8001824 <LL_RCC_LSI_IsReady>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f1      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80d8 	beq.w	800218c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fdc:	f7ff fb44 	bl	8001668 <LL_PWR_IsEnabledBkUpAccess>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d113      	bne.n	800200e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001fe6:	f7ff fb0d 	bl	8001604 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fea:	f7ff f86d 	bl	80010c8 <HAL_GetTick>
 8001fee:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff2:	f7ff f869 	bl	80010c8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e162      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002004:	f7ff fb30 	bl	8001668 <LL_PWR_IsEnabledBkUpAccess>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f1      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d07b      	beq.n	800210e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b85      	cmp	r3, #133	@ 0x85
 800201c:	d003      	beq.n	8002026 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b05      	cmp	r3, #5
 8002024:	d109      	bne.n	800203a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff f845 	bl	80010c8 <HAL_GetTick>
 800203e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002054:	e00a      	b.n	800206c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7ff f837 	bl	80010c8 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e12e      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800206c:	f7ff fba9 	bl	80017c2 <LL_RCC_LSE_IsReady>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ef      	beq.n	8002056 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b81      	cmp	r3, #129	@ 0x81
 800207c:	d003      	beq.n	8002086 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b85      	cmp	r3, #133	@ 0x85
 8002084:	d121      	bne.n	80020ca <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7ff f81f 	bl	80010c8 <HAL_GetTick>
 800208a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002094:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff f811 	bl	80010c8 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e108      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ec      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80020c8:	e060      	b.n	800218c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe fffd 	bl	80010c8 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe ffef 	bl	80010c8 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0e6      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ec      	bne.n	80020e6 <HAL_RCC_OscConfig+0x50e>
 800210c:	e03e      	b.n	800218c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7fe ffdb 	bl	80010c8 <HAL_GetTick>
 8002112:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe ffcd 	bl	80010c8 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0c4      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1ec      	bne.n	800212a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7fe ffba 	bl	80010c8 <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe ffac 	bl	80010c8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0a3      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002182:	f7ff fb1e 	bl	80017c2 <LL_RCC_LSE_IsReady>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ef      	bne.n	800216c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8099 	beq.w	80022c8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b0c      	cmp	r3, #12
 800219a:	d06c      	beq.n	8002276 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d14b      	bne.n	800223c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a4:	f7ff fc74 	bl	8001a90 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe ff8e 	bl	80010c8 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe ff8a 	bl	80010c8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b0a      	cmp	r3, #10
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e083      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80021c2:	f7ff fc73 	bl	8001aac <LL_RCC_PLL_IsReady>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f1      	bne.n	80021b0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	4b40      	ldr	r3, [pc, #256]	@ (80022d4 <HAL_RCC_OscConfig+0x6fc>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021de:	4311      	orrs	r1, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021e4:	0212      	lsls	r2, r2, #8
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021ec:	4311      	orrs	r1, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021f8:	430a      	orrs	r2, r1
 80021fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021fe:	4313      	orrs	r3, r2
 8002200:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002202:	f7ff fc37 	bl	8001a74 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002214:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe ff57 	bl	80010c8 <HAL_GetTick>
 800221a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7fe ff53 	bl	80010c8 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b0a      	cmp	r3, #10
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e04c      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002230:	f7ff fc3c 	bl	8001aac <LL_RCC_PLL_IsReady>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f1      	beq.n	800221e <HAL_RCC_OscConfig+0x646>
 800223a:	e045      	b.n	80022c8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	f7ff fc28 	bl	8001a90 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe ff42 	bl	80010c8 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7fe ff3e 	bl	80010c8 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b0a      	cmp	r3, #10
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e037      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800225a:	f7ff fc27 	bl	8001aac <LL_RCC_PLL_IsReady>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f1      	bne.n	8002248 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800226e:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_RCC_OscConfig+0x700>)
 8002270:	4013      	ands	r3, r2
 8002272:	60cb      	str	r3, [r1, #12]
 8002274:	e028      	b.n	80022c8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e023      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	429a      	cmp	r2, r3
 8002296:	d115      	bne.n	80022c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d10e      	bne.n	80022c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	11c1808c 	.word	0x11c1808c
 80022d8:	eefefffc 	.word	0xeefefffc

080022dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e12c      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	4b98      	ldr	r3, [pc, #608]	@ (8002554 <HAL_RCC_ClockConfig+0x278>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d91b      	bls.n	8002336 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b95      	ldr	r3, [pc, #596]	@ (8002554 <HAL_RCC_ClockConfig+0x278>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	4993      	ldr	r1, [pc, #588]	@ (8002554 <HAL_RCC_ClockConfig+0x278>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230e:	f7fe fedb 	bl	80010c8 <HAL_GetTick>
 8002312:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002314:	e008      	b.n	8002328 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002316:	f7fe fed7 	bl	80010c8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e110      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002328:	4b8a      	ldr	r3, [pc, #552]	@ (8002554 <HAL_RCC_ClockConfig+0x278>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d1ef      	bne.n	8002316 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fb02 	bl	8001950 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800234c:	f7fe febc 	bl	80010c8 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002354:	f7fe feb8 	bl	80010c8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0f1      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002366:	f7ff fbdf 	bl	8001b28 <LL_RCC_IsActiveFlag_HPRE>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f1      	beq.n	8002354 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b00      	cmp	r3, #0
 800237a:	d016      	beq.n	80023aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff faf8 	bl	8001976 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002386:	f7fe fe9f 	bl	80010c8 <HAL_GetTick>
 800238a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800238e:	f7fe fe9b 	bl	80010c8 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0d4      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023a0:	f7ff fbd3 	bl	8001b4a <LL_RCC_IsActiveFlag_C2HPRE>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f1      	beq.n	800238e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d016      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff faf0 	bl	80019a0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023c0:	f7fe fe82 	bl	80010c8 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023c8:	f7fe fe7e 	bl	80010c8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0b7      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023da:	f7ff fbc8 	bl	8001b6e <LL_RCC_IsActiveFlag_SHDHPRE>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f1      	beq.n	80023c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fae9 	bl	80019cc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023fa:	f7fe fe65 	bl	80010c8 <HAL_GetTick>
 80023fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002402:	f7fe fe61 	bl	80010c8 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e09a      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002414:	f7ff fbbd 	bl	8001b92 <LL_RCC_IsActiveFlag_PPRE1>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f1      	beq.n	8002402 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d017      	beq.n	800245a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fade 	bl	80019f2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002436:	f7fe fe47 	bl	80010c8 <HAL_GetTick>
 800243a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800243e:	f7fe fe43 	bl	80010c8 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e07c      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002450:	f7ff fbb0 	bl	8001bb4 <LL_RCC_IsActiveFlag_PPRE2>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f1      	beq.n	800243e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d043      	beq.n	80024ee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d106      	bne.n	800247c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800246e:	f7ff f956 	bl	800171e <LL_RCC_HSE_IsReady>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11e      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e066      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d106      	bne.n	8002492 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002484:	f7ff fb12 	bl	8001aac <LL_RCC_PLL_IsReady>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d113      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e05b      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800249a:	f7ff f9f0 	bl	800187e <LL_RCC_MSI_IsReady>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d108      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e050      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80024a8:	f7ff f966 	bl	8001778 <LL_RCC_HSI_IsReady>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e049      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fa2a 	bl	8001914 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fe02 	bl	80010c8 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe fdfe 	bl	80010c8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e035      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	f7ff fa2c 	bl	800193a <LL_RCC_GetSysClkSource>
 80024e2:	4602      	mov	r2, r0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d1ec      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ee:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <HAL_RCC_ClockConfig+0x278>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d21b      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fc:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <HAL_RCC_ClockConfig+0x278>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 0207 	bic.w	r2, r3, #7
 8002504:	4913      	ldr	r1, [pc, #76]	@ (8002554 <HAL_RCC_ClockConfig+0x278>)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250c:	f7fe fddc 	bl	80010c8 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	e008      	b.n	8002526 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002514:	f7fe fdd8 	bl	80010c8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e011      	b.n	800254a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_RCC_ClockConfig+0x278>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d1ef      	bne.n	8002514 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002534:	f000 f8b4 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 8002538:	4603      	mov	r3, r0
 800253a:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <HAL_RCC_ClockConfig+0x27c>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800253e:	4b07      	ldr	r3, [pc, #28]	@ (800255c <HAL_RCC_ClockConfig+0x280>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fd74 	bl	8001030 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	58004000 	.word	0x58004000
 8002558:	20000000 	.word	0x20000000
 800255c:	20000004 	.word	0x20000004

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256e:	f7ff f9e4 	bl	800193a <LL_RCC_GetSysClkSource>
 8002572:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002574:	f7ff facd 	bl	8001b12 <LL_RCC_PLL_GetMainSource>
 8002578:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x2c>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d139      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d136      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800258c:	f7ff f987 	bl	800189e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d115      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x62>
 8002596:	f7ff f982 	bl	800189e <LL_RCC_MSI_IsEnabledRangeSelect>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d106      	bne.n	80025ae <HAL_RCC_GetSysClockFreq+0x4e>
 80025a0:	f7ff f98d 	bl	80018be <LL_RCC_MSI_GetRange>
 80025a4:	4603      	mov	r3, r0
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	e005      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x5a>
 80025ae:	f7ff f991 	bl	80018d4 <LL_RCC_MSI_GetRangeAfterStandby>
 80025b2:	4603      	mov	r3, r0
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a36      	ldr	r2, [pc, #216]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x134>)
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	e014      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x8c>
 80025c2:	f7ff f96c 	bl	800189e <LL_RCC_MSI_IsEnabledRangeSelect>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d106      	bne.n	80025da <HAL_RCC_GetSysClockFreq+0x7a>
 80025cc:	f7ff f977 	bl	80018be <LL_RCC_MSI_GetRange>
 80025d0:	4603      	mov	r3, r0
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	e005      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x86>
 80025da:	f7ff f97b 	bl	80018d4 <LL_RCC_MSI_GetRangeAfterStandby>
 80025de:	4603      	mov	r3, r0
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x134>)
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d115      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025f8:	e012      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d102      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002600:	4b25      	ldr	r3, [pc, #148]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x138>)
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e00c      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d109      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800260c:	f7ff f85a 	bl	80016c4 <LL_RCC_HSE_IsEnabledDiv2>
 8002610:	4603      	mov	r3, r0
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x138>)
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e001      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800261c:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <HAL_RCC_GetSysClockFreq+0x13c>)
 800261e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002620:	f7ff f98b 	bl	800193a <LL_RCC_GetSysClkSource>
 8002624:	4603      	mov	r3, r0
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d12f      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800262a:	f7ff fa72 	bl	8001b12 <LL_RCC_PLL_GetMainSource>
 800262e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0xde>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d003      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0xe4>
 800263c:	e00d      	b.n	800265a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800263e:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x138>)
 8002640:	60fb      	str	r3, [r7, #12]
        break;
 8002642:	e00d      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002644:	f7ff f83e 	bl	80016c4 <LL_RCC_HSE_IsEnabledDiv2>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800264e:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x138>)
 8002650:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002652:	e005      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002656:	60fb      	str	r3, [r7, #12]
        break;
 8002658:	e002      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	60fb      	str	r3, [r7, #12]
        break;
 800265e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002660:	f7ff fa35 	bl	8001ace <LL_RCC_PLL_GetN>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	fb03 f402 	mul.w	r4, r3, r2
 800266c:	f7ff fa46 	bl	8001afc <LL_RCC_PLL_GetDivider>
 8002670:	4603      	mov	r3, r0
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	3301      	adds	r3, #1
 8002676:	fbb4 f4f3 	udiv	r4, r4, r3
 800267a:	f7ff fa34 	bl	8001ae6 <LL_RCC_PLL_GetR>
 800267e:	4603      	mov	r3, r0
 8002680:	0f5b      	lsrs	r3, r3, #29
 8002682:	3301      	adds	r3, #1
 8002684:	fbb4 f3f3 	udiv	r3, r4, r3
 8002688:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800268a:	697b      	ldr	r3, [r7, #20]
}
 800268c:	4618      	mov	r0, r3
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd90      	pop	{r4, r7, pc}
 8002694:	080048ac 	.word	0x080048ac
 8002698:	00f42400 	.word	0x00f42400
 800269c:	01e84800 	.word	0x01e84800

080026a0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b598      	push	{r3, r4, r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80026a4:	f7ff ff5c 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80026a8:	4604      	mov	r4, r0
 80026aa:	f7ff f9b5 	bl	8001a18 <LL_RCC_GetAHBPrescaler>
 80026ae:	4603      	mov	r3, r0
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	4a03      	ldr	r2, [pc, #12]	@ (80026c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80026b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd98      	pop	{r3, r4, r7, pc}
 80026c4:	0800484c 	.word	0x0800484c

080026c8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b598      	push	{r3, r4, r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026cc:	f7ff ffe8 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4604      	mov	r4, r0
 80026d2:	f7ff f9b9 	bl	8001a48 <LL_RCC_GetAPB1Prescaler>
 80026d6:	4603      	mov	r3, r0
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	4a03      	ldr	r2, [pc, #12]	@ (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd98      	pop	{r3, r4, r7, pc}
 80026e8:	0800488c 	.word	0x0800488c

080026ec <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b598      	push	{r3, r4, r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80026f0:	f7ff ffd6 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026f4:	4604      	mov	r4, r0
 80026f6:	f7ff f9b2 	bl	8001a5e <LL_RCC_GetAPB2Prescaler>
 80026fa:	4603      	mov	r3, r0
 80026fc:	0adb      	lsrs	r3, r3, #11
 80026fe:	4a03      	ldr	r2, [pc, #12]	@ (800270c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002704:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd98      	pop	{r3, r4, r7, pc}
 800270c:	0800488c 	.word	0x0800488c

08002710 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	4a10      	ldr	r2, [pc, #64]	@ (8002764 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002728:	f7ff f981 	bl	8001a2e <LL_RCC_GetAHB3Prescaler>
 800272c:	4603      	mov	r3, r0
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	4a0c      	ldr	r2, [pc, #48]	@ (8002768 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4a09      	ldr	r2, [pc, #36]	@ (800276c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	0c9c      	lsrs	r4, r3, #18
 800274c:	f7fe ff76 	bl	800163c <HAL_PWREx_GetVoltageRange>
 8002750:	4603      	mov	r3, r0
 8002752:	4619      	mov	r1, r3
 8002754:	4620      	mov	r0, r4
 8002756:	f000 f80b 	bl	8002770 <RCC_SetFlashLatency>
 800275a:	4603      	mov	r3, r0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}
 8002764:	080048ac 	.word	0x080048ac
 8002768:	0800484c 	.word	0x0800484c
 800276c:	431bde83 	.word	0x431bde83

08002770 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	@ 0x38
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800277a:	4a3a      	ldr	r2, [pc, #232]	@ (8002864 <RCC_SetFlashLatency+0xf4>)
 800277c:	f107 0320 	add.w	r3, r7, #32
 8002780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002784:	6018      	str	r0, [r3, #0]
 8002786:	3304      	adds	r3, #4
 8002788:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800278a:	4a37      	ldr	r2, [pc, #220]	@ (8002868 <RCC_SetFlashLatency+0xf8>)
 800278c:	f107 0318 	add.w	r3, r7, #24
 8002790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002794:	6018      	str	r0, [r3, #0]
 8002796:	3304      	adds	r3, #4
 8002798:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800279a:	4a34      	ldr	r2, [pc, #208]	@ (800286c <RCC_SetFlashLatency+0xfc>)
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027a6:	2300      	movs	r3, #0
 80027a8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027b0:	d11b      	bne.n	80027ea <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80027b6:	e014      	b.n	80027e2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	3338      	adds	r3, #56	@ 0x38
 80027be:	443b      	add	r3, r7
 80027c0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d807      	bhi.n	80027dc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	3338      	adds	r3, #56	@ 0x38
 80027d2:	443b      	add	r3, r7
 80027d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80027da:	e021      	b.n	8002820 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027de:	3301      	adds	r3, #1
 80027e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d9e7      	bls.n	80027b8 <RCC_SetFlashLatency+0x48>
 80027e8:	e01a      	b.n	8002820 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ee:	e014      	b.n	800281a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	3338      	adds	r3, #56	@ 0x38
 80027f6:	443b      	add	r3, r7
 80027f8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80027fc:	461a      	mov	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4293      	cmp	r3, r2
 8002802:	d807      	bhi.n	8002814 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	3338      	adds	r3, #56	@ 0x38
 800280a:	443b      	add	r3, r7
 800280c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002810:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002812:	e005      	b.n	8002820 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002816:	3301      	adds	r3, #1
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	2b02      	cmp	r3, #2
 800281e:	d9e7      	bls.n	80027f0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <RCC_SetFlashLatency+0x100>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 0207 	bic.w	r2, r3, #7
 8002828:	4911      	ldr	r1, [pc, #68]	@ (8002870 <RCC_SetFlashLatency+0x100>)
 800282a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002830:	f7fe fc4a 	bl	80010c8 <HAL_GetTick>
 8002834:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002836:	e008      	b.n	800284a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002838:	f7fe fc46 	bl	80010c8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e007      	b.n	800285a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <RCC_SetFlashLatency+0x100>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002854:	429a      	cmp	r2, r3
 8002856:	d1ef      	bne.n	8002838 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3738      	adds	r7, #56	@ 0x38
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	08004830 	.word	0x08004830
 8002868:	08004838 	.word	0x08004838
 800286c:	08004840 	.word	0x08004840
 8002870:	58004000 	.word	0x58004000

08002874 <LL_RCC_LSE_IsReady>:
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d101      	bne.n	800288c <LL_RCC_LSE_IsReady+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <LL_RCC_LSE_IsReady+0x1a>
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <LL_RCC_SetUSARTClockSource>:
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	43db      	mvns	r3, r3
 80028ac:	401a      	ands	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_SetI2SClockSource>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <LL_RCC_SetLPUARTClockSource>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002900:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002904:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <LL_RCC_SetI2CClockSource>:
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002926:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002932:	43db      	mvns	r3, r3
 8002934:	401a      	ands	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800293e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <LL_RCC_SetLPTIMClockSource>:
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	041b      	lsls	r3, r3, #16
 8002968:	43db      	mvns	r3, r3
 800296a:	401a      	ands	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <LL_RCC_SetRNGClockSource>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002994:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002998:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <LL_RCC_SetADCClockSource>:
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <LL_RCC_SetRTCClockSource>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <LL_RCC_GetRTCClockSource>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <LL_RCC_ForceBackupDomainReset>:
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002a68:	2300      	movs	r3, #0
 8002a6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d058      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002a7c:	f7fe fdc2 	bl	8001604 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a80:	f7fe fb22 	bl	80010c8 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a86:	e009      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a88:	f7fe fb1e 	bl	80010c8 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d902      	bls.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	74fb      	strb	r3, [r7, #19]
        break;
 8002a9a:	e006      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a9c:	4b7b      	ldr	r3, [pc, #492]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa8:	d1ee      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d13c      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002ab0:	f7ff ffa7 	bl	8002a02 <LL_RCC_GetRTCClockSource>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d00f      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002acc:	f7ff ffa5 	bl	8002a1a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad0:	f7ff ffb3 	bl	8002a3a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ad4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d014      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe faee 	bl	80010c8 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002aee:	e00b      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe faea 	bl	80010c8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d902      	bls.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	74fb      	strb	r3, [r7, #19]
            break;
 8002b06:	e004      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002b08:	f7ff feb4 	bl	8002874 <LL_RCC_LSE_IsReady>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d1ee      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5b 	bl	80029d8 <LL_RCC_SetRTCClockSource>
 8002b22:	e004      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
 8002b28:	e001      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fea9 	bl	8002896 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fe9e 	bl	8002896 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fec0 	bl	80028f0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fee6 	bl	8002952 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fedb 	bl	8002952 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fed0 	bl	8002952 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fea9 	bl	800291a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fe9e 	bl	800291a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d004      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fe93 	bl	800291a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d011      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fe5e 	bl	80028c6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c12:	d107      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fea5 	bl	8002984 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d011      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fea3 	bl	80029ae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c70:	d107      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c80:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002c82:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	58000400 	.word	0x58000400

08002c90 <LL_RCC_GetUSARTClockSource>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	4313      	orrs	r3, r2
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e04a      	b.n	8002d5c <HAL_USART_Init+0xa8>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d114      	bne.n	8002cfc <HAL_USART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    USART_InitCallbacksToDefault(husart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f92c 	bl	8002f38 <USART_InitCallbacksToDefault>

    if (husart->MspInitCallback == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d103      	bne.n	8002cf2 <HAL_USART_Init+0x3e>
    {
      husart->MspInitCallback = HAL_USART_MspInit;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <HAL_USART_Init+0xb0>)
 8002cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f97d 	bl	8003014 <USART_SetConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_USART_Init+0x70>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e01b      	b.n	8002d5c <HAL_USART_Init+0xa8>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d32:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d42:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fc1f 	bl	8003598 <USART_CheckIdleState>
 8002d5a:	4603      	mov	r3, r0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	08000d65 	.word	0x08000d65

08002d68 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	@ 0x28
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	f040 8095 	bne.w	8002eb0 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_USART_Transmit+0x2a>
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e08d      	b.n	8002eb2 <HAL_USART_Transmit+0x14a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Process Locked */
    __HAL_LOCK(husart);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_USART_Transmit+0x3c>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e086      	b.n	8002eb2 <HAL_USART_Transmit+0x14a>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	65da      	str	r2, [r3, #92]	@ 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2212      	movs	r2, #18
 8002db6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dba:	f7fe f985 	bl	80010c8 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    husart->TxXferCount = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd4:	d108      	bne.n	8002de8 <HAL_USART_Transmit+0x80>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e003      	b.n	8002df0 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002df0:	e02a      	b.n	8002e48 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2180      	movs	r1, #128	@ 0x80
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f8d3 	bl	8002fa8 <USART_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e052      	b.n	8002eb2 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e20:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	3302      	adds	r3, #2
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	e007      	b.n	8002e3a <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	3301      	adds	r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (husart->TxXferCount > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1cf      	bne.n	8002df2 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2140      	movs	r1, #64	@ 0x40
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f8a3 	bl	8002fa8 <USART_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e022      	b.n	8002eb2 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2240      	movs	r2, #64	@ 0x40
 8002e72:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0210 	orr.w	r2, r2, #16
 8002e9a:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_USART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback can be implemented in the user file.
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_USART_RxHalfCpltCallback>:
  * @brief Rx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_RxHalfCpltCallback can be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <HAL_USART_AbortCpltCallback>:
  * @brief  USART Abort Complete callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <USART_InitCallbacksToDefault>:
  * @param  husart USART handle.
  * @retval none
  */
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
void USART_InitCallbacksToDefault(USART_HandleTypeDef *husart)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Init the USART Callback settings */
  husart->TxHalfCpltCallback        = HAL_USART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a10      	ldr	r2, [pc, #64]	@ (8002f84 <USART_InitCallbacksToDefault+0x4c>)
 8002f44:	661a      	str	r2, [r3, #96]	@ 0x60
  husart->TxCpltCallback            = HAL_USART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a0f      	ldr	r2, [pc, #60]	@ (8002f88 <USART_InitCallbacksToDefault+0x50>)
 8002f4a:	665a      	str	r2, [r3, #100]	@ 0x64
  husart->RxHalfCpltCallback        = HAL_USART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f8c <USART_InitCallbacksToDefault+0x54>)
 8002f50:	669a      	str	r2, [r3, #104]	@ 0x68
  husart->RxCpltCallback            = HAL_USART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a0e      	ldr	r2, [pc, #56]	@ (8002f90 <USART_InitCallbacksToDefault+0x58>)
 8002f56:	66da      	str	r2, [r3, #108]	@ 0x6c
  husart->TxRxCpltCallback          = HAL_USART_TxRxCpltCallback;          /* Legacy weak TxRxCpltCallback          */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f94 <USART_InitCallbacksToDefault+0x5c>)
 8002f5c:	671a      	str	r2, [r3, #112]	@ 0x70
  husart->ErrorCallback             = HAL_USART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a0d      	ldr	r2, [pc, #52]	@ (8002f98 <USART_InitCallbacksToDefault+0x60>)
 8002f62:	675a      	str	r2, [r3, #116]	@ 0x74
  husart->AbortCpltCallback         = HAL_USART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a0d      	ldr	r2, [pc, #52]	@ (8002f9c <USART_InitCallbacksToDefault+0x64>)
 8002f68:	679a      	str	r2, [r3, #120]	@ 0x78
  husart->RxFifoFullCallback        = HAL_USARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa0 <USART_InitCallbacksToDefault+0x68>)
 8002f6e:	67da      	str	r2, [r3, #124]	@ 0x7c
  husart->TxFifoEmptyCallback       = HAL_USARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa4 <USART_InitCallbacksToDefault+0x6c>)
 8002f74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	08002ecd 	.word	0x08002ecd
 8002f88:	08002ebb 	.word	0x08002ebb
 8002f8c:	08002ef1 	.word	0x08002ef1
 8002f90:	08002edf 	.word	0x08002edf
 8002f94:	08002f03 	.word	0x08002f03
 8002f98:	08002f15 	.word	0x08002f15
 8002f9c:	08002f27 	.word	0x08002f27
 8002fa0:	0800361f 	.word	0x0800361f
 8002fa4:	08003631 	.word	0x08003631

08002fa8 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002fb8:	e018      	b.n	8002fec <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d014      	beq.n	8002fec <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7fe f881 	bl	80010c8 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <USART_WaitOnFlagUntilTimeout+0x30>
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e00f      	b.n	800300c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	429a      	cmp	r2, r3
 8003008:	d0d7      	beq.n	8002fba <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003020:	2300      	movs	r3, #0
 8003022:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003038:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4ba1      	ldr	r3, [pc, #644]	@ (80032c8 <USART_SetConfig+0x2b4>)
 8003042:	4013      	ands	r3, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	6979      	ldr	r1, [r7, #20]
 800304a:	430b      	orrs	r3, r1
 800304c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800304e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003052:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4313      	orrs	r3, r2
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003082:	f023 0309 	bic.w	r3, r3, #9
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	6979      	ldr	r1, [r7, #20]
 800308c:	430b      	orrs	r3, r1
 800308e:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003096:	f023 010f 	bic.w	r1, r3, #15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a88      	ldr	r2, [pc, #544]	@ (80032cc <USART_SetConfig+0x2b8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d122      	bne.n	80030f6 <USART_SetConfig+0xe2>
 80030b0:	2003      	movs	r0, #3
 80030b2:	f7ff fded 	bl	8002c90 <LL_RCC_GetUSARTClockSource>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d817      	bhi.n	80030f0 <USART_SetConfig+0xdc>
 80030c0:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <USART_SetConfig+0xb4>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030e5 	.word	0x080030e5
 80030d0:	080030df 	.word	0x080030df
 80030d4:	080030eb 	.word	0x080030eb
 80030d8:	2301      	movs	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e047      	b.n	800316e <USART_SetConfig+0x15a>
 80030de:	2302      	movs	r3, #2
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e044      	b.n	800316e <USART_SetConfig+0x15a>
 80030e4:	2304      	movs	r3, #4
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e041      	b.n	800316e <USART_SetConfig+0x15a>
 80030ea:	2308      	movs	r3, #8
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e03e      	b.n	800316e <USART_SetConfig+0x15a>
 80030f0:	2310      	movs	r3, #16
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e03b      	b.n	800316e <USART_SetConfig+0x15a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a75      	ldr	r2, [pc, #468]	@ (80032d0 <USART_SetConfig+0x2bc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d134      	bne.n	800316a <USART_SetConfig+0x156>
 8003100:	200c      	movs	r0, #12
 8003102:	f7ff fdc5 	bl	8002c90 <LL_RCC_GetUSARTClockSource>
 8003106:	4603      	mov	r3, r0
 8003108:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d829      	bhi.n	8003164 <USART_SetConfig+0x150>
 8003110:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <USART_SetConfig+0x104>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800314d 	.word	0x0800314d
 800311c:	08003165 	.word	0x08003165
 8003120:	08003165 	.word	0x08003165
 8003124:	08003165 	.word	0x08003165
 8003128:	08003159 	.word	0x08003159
 800312c:	08003165 	.word	0x08003165
 8003130:	08003165 	.word	0x08003165
 8003134:	08003165 	.word	0x08003165
 8003138:	08003153 	.word	0x08003153
 800313c:	08003165 	.word	0x08003165
 8003140:	08003165 	.word	0x08003165
 8003144:	08003165 	.word	0x08003165
 8003148:	0800315f 	.word	0x0800315f
 800314c:	2300      	movs	r3, #0
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e00d      	b.n	800316e <USART_SetConfig+0x15a>
 8003152:	2302      	movs	r3, #2
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e00a      	b.n	800316e <USART_SetConfig+0x15a>
 8003158:	2304      	movs	r3, #4
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e007      	b.n	800316e <USART_SetConfig+0x15a>
 800315e:	2308      	movs	r3, #8
 8003160:	77fb      	strb	r3, [r7, #31]
 8003162:	e004      	b.n	800316e <USART_SetConfig+0x15a>
 8003164:	2310      	movs	r3, #16
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	e001      	b.n	800316e <USART_SetConfig+0x15a>
 800316a:	2310      	movs	r3, #16
 800316c:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800316e:	7ffb      	ldrb	r3, [r7, #31]
 8003170:	2b08      	cmp	r3, #8
 8003172:	f200 81de 	bhi.w	8003532 <USART_SetConfig+0x51e>
 8003176:	a201      	add	r2, pc, #4	@ (adr r2, 800317c <USART_SetConfig+0x168>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	080031a1 	.word	0x080031a1
 8003180:	08003257 	.word	0x08003257
 8003184:	0800331b 	.word	0x0800331b
 8003188:	08003533 	.word	0x08003533
 800318c:	080033cb 	.word	0x080033cb
 8003190:	08003533 	.word	0x08003533
 8003194:	08003533 	.word	0x08003533
 8003198:	08003533 	.word	0x08003533
 800319c:	08003481 	.word	0x08003481
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7ff fa92 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80031a4:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d044      	beq.n	8003238 <USART_SetConfig+0x224>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d03e      	beq.n	8003234 <USART_SetConfig+0x220>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d038      	beq.n	8003230 <USART_SetConfig+0x21c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d032      	beq.n	800322c <USART_SetConfig+0x218>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d02c      	beq.n	8003228 <USART_SetConfig+0x214>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d026      	beq.n	8003224 <USART_SetConfig+0x210>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d020      	beq.n	8003220 <USART_SetConfig+0x20c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	2b07      	cmp	r3, #7
 80031e4:	d01a      	beq.n	800321c <USART_SetConfig+0x208>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d014      	beq.n	8003218 <USART_SetConfig+0x204>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	d00e      	beq.n	8003214 <USART_SetConfig+0x200>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	2b0a      	cmp	r3, #10
 80031fc:	d008      	beq.n	8003210 <USART_SetConfig+0x1fc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	2b0b      	cmp	r3, #11
 8003204:	d102      	bne.n	800320c <USART_SetConfig+0x1f8>
 8003206:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800320a:	e016      	b.n	800323a <USART_SetConfig+0x226>
 800320c:	2301      	movs	r3, #1
 800320e:	e014      	b.n	800323a <USART_SetConfig+0x226>
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	e012      	b.n	800323a <USART_SetConfig+0x226>
 8003214:	2340      	movs	r3, #64	@ 0x40
 8003216:	e010      	b.n	800323a <USART_SetConfig+0x226>
 8003218:	2320      	movs	r3, #32
 800321a:	e00e      	b.n	800323a <USART_SetConfig+0x226>
 800321c:	2310      	movs	r3, #16
 800321e:	e00c      	b.n	800323a <USART_SetConfig+0x226>
 8003220:	230c      	movs	r3, #12
 8003222:	e00a      	b.n	800323a <USART_SetConfig+0x226>
 8003224:	230a      	movs	r3, #10
 8003226:	e008      	b.n	800323a <USART_SetConfig+0x226>
 8003228:	2308      	movs	r3, #8
 800322a:	e006      	b.n	800323a <USART_SetConfig+0x226>
 800322c:	2306      	movs	r3, #6
 800322e:	e004      	b.n	800323a <USART_SetConfig+0x226>
 8003230:	2304      	movs	r3, #4
 8003232:	e002      	b.n	800323a <USART_SetConfig+0x226>
 8003234:	2302      	movs	r3, #2
 8003236:	e000      	b.n	800323a <USART_SetConfig+0x226>
 8003238:	2301      	movs	r3, #1
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	005a      	lsls	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	441a      	add	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	61bb      	str	r3, [r7, #24]
      break;
 8003254:	e170      	b.n	8003538 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8003256:	f7ff fa49 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 800325a:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	2b00      	cmp	r3, #0
 8003262:	d04b      	beq.n	80032fc <USART_SetConfig+0x2e8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	2b01      	cmp	r3, #1
 800326a:	d045      	beq.n	80032f8 <USART_SetConfig+0x2e4>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	2b02      	cmp	r3, #2
 8003272:	d03f      	beq.n	80032f4 <USART_SetConfig+0x2e0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	2b03      	cmp	r3, #3
 800327a:	d039      	beq.n	80032f0 <USART_SetConfig+0x2dc>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	2b04      	cmp	r3, #4
 8003282:	d033      	beq.n	80032ec <USART_SetConfig+0x2d8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	2b05      	cmp	r3, #5
 800328a:	d02d      	beq.n	80032e8 <USART_SetConfig+0x2d4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	2b06      	cmp	r3, #6
 8003292:	d027      	beq.n	80032e4 <USART_SetConfig+0x2d0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	2b07      	cmp	r3, #7
 800329a:	d021      	beq.n	80032e0 <USART_SetConfig+0x2cc>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d01b      	beq.n	80032dc <USART_SetConfig+0x2c8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	2b09      	cmp	r3, #9
 80032aa:	d015      	beq.n	80032d8 <USART_SetConfig+0x2c4>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	2b0a      	cmp	r3, #10
 80032b2:	d00f      	beq.n	80032d4 <USART_SetConfig+0x2c0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	2b0b      	cmp	r3, #11
 80032ba:	d102      	bne.n	80032c2 <USART_SetConfig+0x2ae>
 80032bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032c0:	e01d      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e01b      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032c6:	bf00      	nop
 80032c8:	cfff69f3 	.word	0xcfff69f3
 80032cc:	40013800 	.word	0x40013800
 80032d0:	40004400 	.word	0x40004400
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	e012      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032d8:	2340      	movs	r3, #64	@ 0x40
 80032da:	e010      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032dc:	2320      	movs	r3, #32
 80032de:	e00e      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032e0:	2310      	movs	r3, #16
 80032e2:	e00c      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032e4:	230c      	movs	r3, #12
 80032e6:	e00a      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032e8:	230a      	movs	r3, #10
 80032ea:	e008      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032ec:	2308      	movs	r3, #8
 80032ee:	e006      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032f0:	2306      	movs	r3, #6
 80032f2:	e004      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032f4:	2304      	movs	r3, #4
 80032f6:	e002      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e000      	b.n	80032fe <USART_SetConfig+0x2ea>
 80032fc:	2301      	movs	r3, #1
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	005a      	lsls	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	441a      	add	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	61bb      	str	r3, [r7, #24]
      break;
 8003318:	e10e      	b.n	8003538 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d044      	beq.n	80033ac <USART_SetConfig+0x398>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	2b01      	cmp	r3, #1
 8003328:	d03e      	beq.n	80033a8 <USART_SetConfig+0x394>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	2b02      	cmp	r3, #2
 8003330:	d038      	beq.n	80033a4 <USART_SetConfig+0x390>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	2b03      	cmp	r3, #3
 8003338:	d032      	beq.n	80033a0 <USART_SetConfig+0x38c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	2b04      	cmp	r3, #4
 8003340:	d02c      	beq.n	800339c <USART_SetConfig+0x388>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	2b05      	cmp	r3, #5
 8003348:	d026      	beq.n	8003398 <USART_SetConfig+0x384>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	2b06      	cmp	r3, #6
 8003350:	d020      	beq.n	8003394 <USART_SetConfig+0x380>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	2b07      	cmp	r3, #7
 8003358:	d01a      	beq.n	8003390 <USART_SetConfig+0x37c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	2b08      	cmp	r3, #8
 8003360:	d014      	beq.n	800338c <USART_SetConfig+0x378>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	2b09      	cmp	r3, #9
 8003368:	d00e      	beq.n	8003388 <USART_SetConfig+0x374>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	2b0a      	cmp	r3, #10
 8003370:	d008      	beq.n	8003384 <USART_SetConfig+0x370>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	2b0b      	cmp	r3, #11
 8003378:	d102      	bne.n	8003380 <USART_SetConfig+0x36c>
 800337a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800337e:	e016      	b.n	80033ae <USART_SetConfig+0x39a>
 8003380:	2301      	movs	r3, #1
 8003382:	e014      	b.n	80033ae <USART_SetConfig+0x39a>
 8003384:	2380      	movs	r3, #128	@ 0x80
 8003386:	e012      	b.n	80033ae <USART_SetConfig+0x39a>
 8003388:	2340      	movs	r3, #64	@ 0x40
 800338a:	e010      	b.n	80033ae <USART_SetConfig+0x39a>
 800338c:	2320      	movs	r3, #32
 800338e:	e00e      	b.n	80033ae <USART_SetConfig+0x39a>
 8003390:	2310      	movs	r3, #16
 8003392:	e00c      	b.n	80033ae <USART_SetConfig+0x39a>
 8003394:	230c      	movs	r3, #12
 8003396:	e00a      	b.n	80033ae <USART_SetConfig+0x39a>
 8003398:	230a      	movs	r3, #10
 800339a:	e008      	b.n	80033ae <USART_SetConfig+0x39a>
 800339c:	2308      	movs	r3, #8
 800339e:	e006      	b.n	80033ae <USART_SetConfig+0x39a>
 80033a0:	2306      	movs	r3, #6
 80033a2:	e004      	b.n	80033ae <USART_SetConfig+0x39a>
 80033a4:	2304      	movs	r3, #4
 80033a6:	e002      	b.n	80033ae <USART_SetConfig+0x39a>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e000      	b.n	80033ae <USART_SetConfig+0x39a>
 80033ac:	2301      	movs	r3, #1
 80033ae:	4a79      	ldr	r2, [pc, #484]	@ (8003594 <USART_SetConfig+0x580>)
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	005a      	lsls	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	441a      	add	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	61bb      	str	r3, [r7, #24]
      break;
 80033c8:	e0b6      	b.n	8003538 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80033ca:	f7ff f8c9 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80033ce:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d044      	beq.n	8003462 <USART_SetConfig+0x44e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d03e      	beq.n	800345e <USART_SetConfig+0x44a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d038      	beq.n	800345a <USART_SetConfig+0x446>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d032      	beq.n	8003456 <USART_SetConfig+0x442>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d02c      	beq.n	8003452 <USART_SetConfig+0x43e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d026      	beq.n	800344e <USART_SetConfig+0x43a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	2b06      	cmp	r3, #6
 8003406:	d020      	beq.n	800344a <USART_SetConfig+0x436>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	2b07      	cmp	r3, #7
 800340e:	d01a      	beq.n	8003446 <USART_SetConfig+0x432>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	2b08      	cmp	r3, #8
 8003416:	d014      	beq.n	8003442 <USART_SetConfig+0x42e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	2b09      	cmp	r3, #9
 800341e:	d00e      	beq.n	800343e <USART_SetConfig+0x42a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	2b0a      	cmp	r3, #10
 8003426:	d008      	beq.n	800343a <USART_SetConfig+0x426>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	2b0b      	cmp	r3, #11
 800342e:	d102      	bne.n	8003436 <USART_SetConfig+0x422>
 8003430:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003434:	e016      	b.n	8003464 <USART_SetConfig+0x450>
 8003436:	2301      	movs	r3, #1
 8003438:	e014      	b.n	8003464 <USART_SetConfig+0x450>
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	e012      	b.n	8003464 <USART_SetConfig+0x450>
 800343e:	2340      	movs	r3, #64	@ 0x40
 8003440:	e010      	b.n	8003464 <USART_SetConfig+0x450>
 8003442:	2320      	movs	r3, #32
 8003444:	e00e      	b.n	8003464 <USART_SetConfig+0x450>
 8003446:	2310      	movs	r3, #16
 8003448:	e00c      	b.n	8003464 <USART_SetConfig+0x450>
 800344a:	230c      	movs	r3, #12
 800344c:	e00a      	b.n	8003464 <USART_SetConfig+0x450>
 800344e:	230a      	movs	r3, #10
 8003450:	e008      	b.n	8003464 <USART_SetConfig+0x450>
 8003452:	2308      	movs	r3, #8
 8003454:	e006      	b.n	8003464 <USART_SetConfig+0x450>
 8003456:	2306      	movs	r3, #6
 8003458:	e004      	b.n	8003464 <USART_SetConfig+0x450>
 800345a:	2304      	movs	r3, #4
 800345c:	e002      	b.n	8003464 <USART_SetConfig+0x450>
 800345e:	2302      	movs	r3, #2
 8003460:	e000      	b.n	8003464 <USART_SetConfig+0x450>
 8003462:	2301      	movs	r3, #1
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	005a      	lsls	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	441a      	add	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	61bb      	str	r3, [r7, #24]
      break;
 800347e:	e05b      	b.n	8003538 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	d044      	beq.n	8003512 <USART_SetConfig+0x4fe>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	2b01      	cmp	r3, #1
 800348e:	d03e      	beq.n	800350e <USART_SetConfig+0x4fa>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	2b02      	cmp	r3, #2
 8003496:	d038      	beq.n	800350a <USART_SetConfig+0x4f6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	2b03      	cmp	r3, #3
 800349e:	d032      	beq.n	8003506 <USART_SetConfig+0x4f2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d02c      	beq.n	8003502 <USART_SetConfig+0x4ee>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	d026      	beq.n	80034fe <USART_SetConfig+0x4ea>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d020      	beq.n	80034fa <USART_SetConfig+0x4e6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	2b07      	cmp	r3, #7
 80034be:	d01a      	beq.n	80034f6 <USART_SetConfig+0x4e2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d014      	beq.n	80034f2 <USART_SetConfig+0x4de>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d00e      	beq.n	80034ee <USART_SetConfig+0x4da>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	2b0a      	cmp	r3, #10
 80034d6:	d008      	beq.n	80034ea <USART_SetConfig+0x4d6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	2b0b      	cmp	r3, #11
 80034de:	d102      	bne.n	80034e6 <USART_SetConfig+0x4d2>
 80034e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034e4:	e016      	b.n	8003514 <USART_SetConfig+0x500>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e014      	b.n	8003514 <USART_SetConfig+0x500>
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	e012      	b.n	8003514 <USART_SetConfig+0x500>
 80034ee:	2340      	movs	r3, #64	@ 0x40
 80034f0:	e010      	b.n	8003514 <USART_SetConfig+0x500>
 80034f2:	2320      	movs	r3, #32
 80034f4:	e00e      	b.n	8003514 <USART_SetConfig+0x500>
 80034f6:	2310      	movs	r3, #16
 80034f8:	e00c      	b.n	8003514 <USART_SetConfig+0x500>
 80034fa:	230c      	movs	r3, #12
 80034fc:	e00a      	b.n	8003514 <USART_SetConfig+0x500>
 80034fe:	230a      	movs	r3, #10
 8003500:	e008      	b.n	8003514 <USART_SetConfig+0x500>
 8003502:	2308      	movs	r3, #8
 8003504:	e006      	b.n	8003514 <USART_SetConfig+0x500>
 8003506:	2306      	movs	r3, #6
 8003508:	e004      	b.n	8003514 <USART_SetConfig+0x500>
 800350a:	2304      	movs	r3, #4
 800350c:	e002      	b.n	8003514 <USART_SetConfig+0x500>
 800350e:	2302      	movs	r3, #2
 8003510:	e000      	b.n	8003514 <USART_SetConfig+0x500>
 8003512:	2301      	movs	r3, #1
 8003514:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	005a      	lsls	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	61bb      	str	r3, [r7, #24]
      break;
 8003530:	e002      	b.n	8003538 <USART_SetConfig+0x524>
    default:
      ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	77bb      	strb	r3, [r7, #30]
      break;
 8003536:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	d916      	bls.n	800356c <USART_SetConfig+0x558>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003544:	d212      	bcs.n	800356c <USART_SetConfig+0x558>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f023 030f 	bic.w	r3, r3, #15
 800354e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	b29a      	uxth	r2, r3
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	4313      	orrs	r3, r2
 8003560:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	89fa      	ldrh	r2, [r7, #14]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	e001      	b.n	8003570 <USART_SetConfig+0x55c>
  }
  else
  {
    ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8003588:	7fbb      	ldrb	r3, [r7, #30]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	00f42400 	.word	0x00f42400

08003598 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af02      	add	r7, sp, #8
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035a6:	f7fd fd8f 	bl	80010c8 <HAL_GetTick>
 80035aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d10e      	bne.n	80035d8 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80035ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fced 	bl	8002fa8 <USART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e01e      	b.n	8003616 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d10e      	bne.n	8003604 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80035e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff fcd7 	bl	8002fa8 <USART_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e008      	b.n	8003616 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_USARTEx_DisableFifoMode+0x16>
 8003654:	2302      	movs	r3, #2
 8003656:	e027      	b.n	80036a8 <HAL_USARTEx_DisableFifoMode+0x66>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003686:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e02d      	b.n	8003726 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f850 	bl	80037ac <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8003742:	2302      	movs	r3, #2
 8003744:	e02d      	b.n	80037a2 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f812 	bl	80037ac <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	875a      	strh	r2, [r3, #58]	@ 0x3a
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037c8:	e02f      	b.n	800382a <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037ca:	2308      	movs	r3, #8
 80037cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037ce:	2308      	movs	r3, #8
 80037d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	0e5b      	lsrs	r3, r3, #25
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	0f5b      	lsrs	r3, r3, #29
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80037f2:	7bbb      	ldrb	r3, [r7, #14]
 80037f4:	7b3a      	ldrb	r2, [r7, #12]
 80037f6:	490f      	ldr	r1, [pc, #60]	@ (8003834 <USARTEx_SetNbDataToProcess+0x88>)
 80037f8:	5c8a      	ldrb	r2, [r1, r2]
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	7b3a      	ldrb	r2, [r7, #12]
 8003800:	490d      	ldr	r1, [pc, #52]	@ (8003838 <USARTEx_SetNbDataToProcess+0x8c>)
 8003802:	5c8a      	ldrb	r2, [r1, r2]
 8003804:	fb93 f3f2 	sdiv	r3, r3, r2
 8003808:	b29a      	uxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	7b7a      	ldrb	r2, [r7, #13]
 8003812:	4908      	ldr	r1, [pc, #32]	@ (8003834 <USARTEx_SetNbDataToProcess+0x88>)
 8003814:	5c8a      	ldrb	r2, [r1, r2]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	7b7a      	ldrb	r2, [r7, #13]
 800381c:	4906      	ldr	r1, [pc, #24]	@ (8003838 <USARTEx_SetNbDataToProcess+0x8c>)
 800381e:	5c8a      	ldrb	r2, [r1, r2]
 8003820:	fb93 f3f2 	sdiv	r3, r3, r2
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	08004af8 	.word	0x08004af8
 8003838:	08004b00 	.word	0x08004b00

0800383c <std>:
 800383c:	2300      	movs	r3, #0
 800383e:	b510      	push	{r4, lr}
 8003840:	4604      	mov	r4, r0
 8003842:	e9c0 3300 	strd	r3, r3, [r0]
 8003846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800384a:	6083      	str	r3, [r0, #8]
 800384c:	8181      	strh	r1, [r0, #12]
 800384e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003850:	81c2      	strh	r2, [r0, #14]
 8003852:	6183      	str	r3, [r0, #24]
 8003854:	4619      	mov	r1, r3
 8003856:	2208      	movs	r2, #8
 8003858:	305c      	adds	r0, #92	@ 0x5c
 800385a:	f000 fa01 	bl	8003c60 <memset>
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <std+0x58>)
 8003860:	6263      	str	r3, [r4, #36]	@ 0x24
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <std+0x5c>)
 8003864:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003866:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <std+0x60>)
 8003868:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <std+0x64>)
 800386c:	6323      	str	r3, [r4, #48]	@ 0x30
 800386e:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <std+0x68>)
 8003870:	6224      	str	r4, [r4, #32]
 8003872:	429c      	cmp	r4, r3
 8003874:	d006      	beq.n	8003884 <std+0x48>
 8003876:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800387a:	4294      	cmp	r4, r2
 800387c:	d002      	beq.n	8003884 <std+0x48>
 800387e:	33d0      	adds	r3, #208	@ 0xd0
 8003880:	429c      	cmp	r4, r3
 8003882:	d105      	bne.n	8003890 <std+0x54>
 8003884:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800388c:	f000 ba60 	b.w	8003d50 <__retarget_lock_init_recursive>
 8003890:	bd10      	pop	{r4, pc}
 8003892:	bf00      	nop
 8003894:	08003ab1 	.word	0x08003ab1
 8003898:	08003ad3 	.word	0x08003ad3
 800389c:	08003b0b 	.word	0x08003b0b
 80038a0:	08003b2f 	.word	0x08003b2f
 80038a4:	20000130 	.word	0x20000130

080038a8 <stdio_exit_handler>:
 80038a8:	4a02      	ldr	r2, [pc, #8]	@ (80038b4 <stdio_exit_handler+0xc>)
 80038aa:	4903      	ldr	r1, [pc, #12]	@ (80038b8 <stdio_exit_handler+0x10>)
 80038ac:	4803      	ldr	r0, [pc, #12]	@ (80038bc <stdio_exit_handler+0x14>)
 80038ae:	f000 b869 	b.w	8003984 <_fwalk_sglue>
 80038b2:	bf00      	nop
 80038b4:	2000000c 	.word	0x2000000c
 80038b8:	080045e5 	.word	0x080045e5
 80038bc:	2000001c 	.word	0x2000001c

080038c0 <cleanup_stdio>:
 80038c0:	6841      	ldr	r1, [r0, #4]
 80038c2:	4b0c      	ldr	r3, [pc, #48]	@ (80038f4 <cleanup_stdio+0x34>)
 80038c4:	4299      	cmp	r1, r3
 80038c6:	b510      	push	{r4, lr}
 80038c8:	4604      	mov	r4, r0
 80038ca:	d001      	beq.n	80038d0 <cleanup_stdio+0x10>
 80038cc:	f000 fe8a 	bl	80045e4 <_fflush_r>
 80038d0:	68a1      	ldr	r1, [r4, #8]
 80038d2:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <cleanup_stdio+0x38>)
 80038d4:	4299      	cmp	r1, r3
 80038d6:	d002      	beq.n	80038de <cleanup_stdio+0x1e>
 80038d8:	4620      	mov	r0, r4
 80038da:	f000 fe83 	bl	80045e4 <_fflush_r>
 80038de:	68e1      	ldr	r1, [r4, #12]
 80038e0:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <cleanup_stdio+0x3c>)
 80038e2:	4299      	cmp	r1, r3
 80038e4:	d004      	beq.n	80038f0 <cleanup_stdio+0x30>
 80038e6:	4620      	mov	r0, r4
 80038e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ec:	f000 be7a 	b.w	80045e4 <_fflush_r>
 80038f0:	bd10      	pop	{r4, pc}
 80038f2:	bf00      	nop
 80038f4:	20000130 	.word	0x20000130
 80038f8:	20000198 	.word	0x20000198
 80038fc:	20000200 	.word	0x20000200

08003900 <global_stdio_init.part.0>:
 8003900:	b510      	push	{r4, lr}
 8003902:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <global_stdio_init.part.0+0x30>)
 8003904:	4c0b      	ldr	r4, [pc, #44]	@ (8003934 <global_stdio_init.part.0+0x34>)
 8003906:	4a0c      	ldr	r2, [pc, #48]	@ (8003938 <global_stdio_init.part.0+0x38>)
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	4620      	mov	r0, r4
 800390c:	2200      	movs	r2, #0
 800390e:	2104      	movs	r1, #4
 8003910:	f7ff ff94 	bl	800383c <std>
 8003914:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003918:	2201      	movs	r2, #1
 800391a:	2109      	movs	r1, #9
 800391c:	f7ff ff8e 	bl	800383c <std>
 8003920:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003924:	2202      	movs	r2, #2
 8003926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800392a:	2112      	movs	r1, #18
 800392c:	f7ff bf86 	b.w	800383c <std>
 8003930:	20000268 	.word	0x20000268
 8003934:	20000130 	.word	0x20000130
 8003938:	080038a9 	.word	0x080038a9

0800393c <__sfp_lock_acquire>:
 800393c:	4801      	ldr	r0, [pc, #4]	@ (8003944 <__sfp_lock_acquire+0x8>)
 800393e:	f000 ba08 	b.w	8003d52 <__retarget_lock_acquire_recursive>
 8003942:	bf00      	nop
 8003944:	20000271 	.word	0x20000271

08003948 <__sfp_lock_release>:
 8003948:	4801      	ldr	r0, [pc, #4]	@ (8003950 <__sfp_lock_release+0x8>)
 800394a:	f000 ba03 	b.w	8003d54 <__retarget_lock_release_recursive>
 800394e:	bf00      	nop
 8003950:	20000271 	.word	0x20000271

08003954 <__sinit>:
 8003954:	b510      	push	{r4, lr}
 8003956:	4604      	mov	r4, r0
 8003958:	f7ff fff0 	bl	800393c <__sfp_lock_acquire>
 800395c:	6a23      	ldr	r3, [r4, #32]
 800395e:	b11b      	cbz	r3, 8003968 <__sinit+0x14>
 8003960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003964:	f7ff bff0 	b.w	8003948 <__sfp_lock_release>
 8003968:	4b04      	ldr	r3, [pc, #16]	@ (800397c <__sinit+0x28>)
 800396a:	6223      	str	r3, [r4, #32]
 800396c:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <__sinit+0x2c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f5      	bne.n	8003960 <__sinit+0xc>
 8003974:	f7ff ffc4 	bl	8003900 <global_stdio_init.part.0>
 8003978:	e7f2      	b.n	8003960 <__sinit+0xc>
 800397a:	bf00      	nop
 800397c:	080038c1 	.word	0x080038c1
 8003980:	20000268 	.word	0x20000268

08003984 <_fwalk_sglue>:
 8003984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003988:	4607      	mov	r7, r0
 800398a:	4688      	mov	r8, r1
 800398c:	4614      	mov	r4, r2
 800398e:	2600      	movs	r6, #0
 8003990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003994:	f1b9 0901 	subs.w	r9, r9, #1
 8003998:	d505      	bpl.n	80039a6 <_fwalk_sglue+0x22>
 800399a:	6824      	ldr	r4, [r4, #0]
 800399c:	2c00      	cmp	r4, #0
 800399e:	d1f7      	bne.n	8003990 <_fwalk_sglue+0xc>
 80039a0:	4630      	mov	r0, r6
 80039a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039a6:	89ab      	ldrh	r3, [r5, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d907      	bls.n	80039bc <_fwalk_sglue+0x38>
 80039ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039b0:	3301      	adds	r3, #1
 80039b2:	d003      	beq.n	80039bc <_fwalk_sglue+0x38>
 80039b4:	4629      	mov	r1, r5
 80039b6:	4638      	mov	r0, r7
 80039b8:	47c0      	blx	r8
 80039ba:	4306      	orrs	r6, r0
 80039bc:	3568      	adds	r5, #104	@ 0x68
 80039be:	e7e9      	b.n	8003994 <_fwalk_sglue+0x10>

080039c0 <iprintf>:
 80039c0:	b40f      	push	{r0, r1, r2, r3}
 80039c2:	b507      	push	{r0, r1, r2, lr}
 80039c4:	4906      	ldr	r1, [pc, #24]	@ (80039e0 <iprintf+0x20>)
 80039c6:	ab04      	add	r3, sp, #16
 80039c8:	6808      	ldr	r0, [r1, #0]
 80039ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ce:	6881      	ldr	r1, [r0, #8]
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	f000 fae1 	bl	8003f98 <_vfiprintf_r>
 80039d6:	b003      	add	sp, #12
 80039d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039dc:	b004      	add	sp, #16
 80039de:	4770      	bx	lr
 80039e0:	20000018 	.word	0x20000018

080039e4 <putchar>:
 80039e4:	4b02      	ldr	r3, [pc, #8]	@ (80039f0 <putchar+0xc>)
 80039e6:	4601      	mov	r1, r0
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	6882      	ldr	r2, [r0, #8]
 80039ec:	f000 be84 	b.w	80046f8 <_putc_r>
 80039f0:	20000018 	.word	0x20000018

080039f4 <_puts_r>:
 80039f4:	6a03      	ldr	r3, [r0, #32]
 80039f6:	b570      	push	{r4, r5, r6, lr}
 80039f8:	6884      	ldr	r4, [r0, #8]
 80039fa:	4605      	mov	r5, r0
 80039fc:	460e      	mov	r6, r1
 80039fe:	b90b      	cbnz	r3, 8003a04 <_puts_r+0x10>
 8003a00:	f7ff ffa8 	bl	8003954 <__sinit>
 8003a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a06:	07db      	lsls	r3, r3, #31
 8003a08:	d405      	bmi.n	8003a16 <_puts_r+0x22>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	0598      	lsls	r0, r3, #22
 8003a0e:	d402      	bmi.n	8003a16 <_puts_r+0x22>
 8003a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a12:	f000 f99e 	bl	8003d52 <__retarget_lock_acquire_recursive>
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	0719      	lsls	r1, r3, #28
 8003a1a:	d502      	bpl.n	8003a22 <_puts_r+0x2e>
 8003a1c:	6923      	ldr	r3, [r4, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d135      	bne.n	8003a8e <_puts_r+0x9a>
 8003a22:	4621      	mov	r1, r4
 8003a24:	4628      	mov	r0, r5
 8003a26:	f000 f8c5 	bl	8003bb4 <__swsetup_r>
 8003a2a:	b380      	cbz	r0, 8003a8e <_puts_r+0x9a>
 8003a2c:	f04f 35ff 	mov.w	r5, #4294967295
 8003a30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a32:	07da      	lsls	r2, r3, #31
 8003a34:	d405      	bmi.n	8003a42 <_puts_r+0x4e>
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	059b      	lsls	r3, r3, #22
 8003a3a:	d402      	bmi.n	8003a42 <_puts_r+0x4e>
 8003a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a3e:	f000 f989 	bl	8003d54 <__retarget_lock_release_recursive>
 8003a42:	4628      	mov	r0, r5
 8003a44:	bd70      	pop	{r4, r5, r6, pc}
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	da04      	bge.n	8003a54 <_puts_r+0x60>
 8003a4a:	69a2      	ldr	r2, [r4, #24]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	dc17      	bgt.n	8003a80 <_puts_r+0x8c>
 8003a50:	290a      	cmp	r1, #10
 8003a52:	d015      	beq.n	8003a80 <_puts_r+0x8c>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	6022      	str	r2, [r4, #0]
 8003a5a:	7019      	strb	r1, [r3, #0]
 8003a5c:	68a3      	ldr	r3, [r4, #8]
 8003a5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a62:	3b01      	subs	r3, #1
 8003a64:	60a3      	str	r3, [r4, #8]
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d1ed      	bne.n	8003a46 <_puts_r+0x52>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da11      	bge.n	8003a92 <_puts_r+0x9e>
 8003a6e:	4622      	mov	r2, r4
 8003a70:	210a      	movs	r1, #10
 8003a72:	4628      	mov	r0, r5
 8003a74:	f000 f85f 	bl	8003b36 <__swbuf_r>
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d0d7      	beq.n	8003a2c <_puts_r+0x38>
 8003a7c:	250a      	movs	r5, #10
 8003a7e:	e7d7      	b.n	8003a30 <_puts_r+0x3c>
 8003a80:	4622      	mov	r2, r4
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 f857 	bl	8003b36 <__swbuf_r>
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d1e7      	bne.n	8003a5c <_puts_r+0x68>
 8003a8c:	e7ce      	b.n	8003a2c <_puts_r+0x38>
 8003a8e:	3e01      	subs	r6, #1
 8003a90:	e7e4      	b.n	8003a5c <_puts_r+0x68>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	6022      	str	r2, [r4, #0]
 8003a98:	220a      	movs	r2, #10
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e7ee      	b.n	8003a7c <_puts_r+0x88>
	...

08003aa0 <puts>:
 8003aa0:	4b02      	ldr	r3, [pc, #8]	@ (8003aac <puts+0xc>)
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f7ff bfa5 	b.w	80039f4 <_puts_r>
 8003aaa:	bf00      	nop
 8003aac:	20000018 	.word	0x20000018

08003ab0 <__sread>:
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab8:	f000 f8fc 	bl	8003cb4 <_read_r>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	bfab      	itete	ge
 8003ac0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ac4:	181b      	addge	r3, r3, r0
 8003ac6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003aca:	bfac      	ite	ge
 8003acc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ace:	81a3      	strhlt	r3, [r4, #12]
 8003ad0:	bd10      	pop	{r4, pc}

08003ad2 <__swrite>:
 8003ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad6:	461f      	mov	r7, r3
 8003ad8:	898b      	ldrh	r3, [r1, #12]
 8003ada:	05db      	lsls	r3, r3, #23
 8003adc:	4605      	mov	r5, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	4616      	mov	r6, r2
 8003ae2:	d505      	bpl.n	8003af0 <__swrite+0x1e>
 8003ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae8:	2302      	movs	r3, #2
 8003aea:	2200      	movs	r2, #0
 8003aec:	f000 f8d0 	bl	8003c90 <_lseek_r>
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003af6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003afa:	81a3      	strh	r3, [r4, #12]
 8003afc:	4632      	mov	r2, r6
 8003afe:	463b      	mov	r3, r7
 8003b00:	4628      	mov	r0, r5
 8003b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b06:	f000 b8e7 	b.w	8003cd8 <_write_r>

08003b0a <__sseek>:
 8003b0a:	b510      	push	{r4, lr}
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b12:	f000 f8bd 	bl	8003c90 <_lseek_r>
 8003b16:	1c43      	adds	r3, r0, #1
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	bf15      	itete	ne
 8003b1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b26:	81a3      	strheq	r3, [r4, #12]
 8003b28:	bf18      	it	ne
 8003b2a:	81a3      	strhne	r3, [r4, #12]
 8003b2c:	bd10      	pop	{r4, pc}

08003b2e <__sclose>:
 8003b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b32:	f000 b89d 	b.w	8003c70 <_close_r>

08003b36 <__swbuf_r>:
 8003b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b38:	460e      	mov	r6, r1
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	b118      	cbz	r0, 8003b48 <__swbuf_r+0x12>
 8003b40:	6a03      	ldr	r3, [r0, #32]
 8003b42:	b90b      	cbnz	r3, 8003b48 <__swbuf_r+0x12>
 8003b44:	f7ff ff06 	bl	8003954 <__sinit>
 8003b48:	69a3      	ldr	r3, [r4, #24]
 8003b4a:	60a3      	str	r3, [r4, #8]
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	071a      	lsls	r2, r3, #28
 8003b50:	d501      	bpl.n	8003b56 <__swbuf_r+0x20>
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	b943      	cbnz	r3, 8003b68 <__swbuf_r+0x32>
 8003b56:	4621      	mov	r1, r4
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f000 f82b 	bl	8003bb4 <__swsetup_r>
 8003b5e:	b118      	cbz	r0, 8003b68 <__swbuf_r+0x32>
 8003b60:	f04f 37ff 	mov.w	r7, #4294967295
 8003b64:	4638      	mov	r0, r7
 8003b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	6922      	ldr	r2, [r4, #16]
 8003b6c:	1a98      	subs	r0, r3, r2
 8003b6e:	6963      	ldr	r3, [r4, #20]
 8003b70:	b2f6      	uxtb	r6, r6
 8003b72:	4283      	cmp	r3, r0
 8003b74:	4637      	mov	r7, r6
 8003b76:	dc05      	bgt.n	8003b84 <__swbuf_r+0x4e>
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 fd32 	bl	80045e4 <_fflush_r>
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d1ed      	bne.n	8003b60 <__swbuf_r+0x2a>
 8003b84:	68a3      	ldr	r3, [r4, #8]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	60a3      	str	r3, [r4, #8]
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	6022      	str	r2, [r4, #0]
 8003b90:	701e      	strb	r6, [r3, #0]
 8003b92:	6962      	ldr	r2, [r4, #20]
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d004      	beq.n	8003ba4 <__swbuf_r+0x6e>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	07db      	lsls	r3, r3, #31
 8003b9e:	d5e1      	bpl.n	8003b64 <__swbuf_r+0x2e>
 8003ba0:	2e0a      	cmp	r6, #10
 8003ba2:	d1df      	bne.n	8003b64 <__swbuf_r+0x2e>
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 fd1c 	bl	80045e4 <_fflush_r>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d0d9      	beq.n	8003b64 <__swbuf_r+0x2e>
 8003bb0:	e7d6      	b.n	8003b60 <__swbuf_r+0x2a>
	...

08003bb4 <__swsetup_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4b29      	ldr	r3, [pc, #164]	@ (8003c5c <__swsetup_r+0xa8>)
 8003bb8:	4605      	mov	r5, r0
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	b118      	cbz	r0, 8003bc8 <__swsetup_r+0x14>
 8003bc0:	6a03      	ldr	r3, [r0, #32]
 8003bc2:	b90b      	cbnz	r3, 8003bc8 <__swsetup_r+0x14>
 8003bc4:	f7ff fec6 	bl	8003954 <__sinit>
 8003bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bcc:	0719      	lsls	r1, r3, #28
 8003bce:	d422      	bmi.n	8003c16 <__swsetup_r+0x62>
 8003bd0:	06da      	lsls	r2, r3, #27
 8003bd2:	d407      	bmi.n	8003be4 <__swsetup_r+0x30>
 8003bd4:	2209      	movs	r2, #9
 8003bd6:	602a      	str	r2, [r5, #0]
 8003bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bdc:	81a3      	strh	r3, [r4, #12]
 8003bde:	f04f 30ff 	mov.w	r0, #4294967295
 8003be2:	e033      	b.n	8003c4c <__swsetup_r+0x98>
 8003be4:	0758      	lsls	r0, r3, #29
 8003be6:	d512      	bpl.n	8003c0e <__swsetup_r+0x5a>
 8003be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bea:	b141      	cbz	r1, 8003bfe <__swsetup_r+0x4a>
 8003bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bf0:	4299      	cmp	r1, r3
 8003bf2:	d002      	beq.n	8003bfa <__swsetup_r+0x46>
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f000 f8af 	bl	8003d58 <_free_r>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	2300      	movs	r3, #0
 8003c08:	6063      	str	r3, [r4, #4]
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	f043 0308 	orr.w	r3, r3, #8
 8003c14:	81a3      	strh	r3, [r4, #12]
 8003c16:	6923      	ldr	r3, [r4, #16]
 8003c18:	b94b      	cbnz	r3, 8003c2e <__swsetup_r+0x7a>
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c24:	d003      	beq.n	8003c2e <__swsetup_r+0x7a>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 fd29 	bl	8004680 <__smakebuf_r>
 8003c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c32:	f013 0201 	ands.w	r2, r3, #1
 8003c36:	d00a      	beq.n	8003c4e <__swsetup_r+0x9a>
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60a2      	str	r2, [r4, #8]
 8003c3c:	6962      	ldr	r2, [r4, #20]
 8003c3e:	4252      	negs	r2, r2
 8003c40:	61a2      	str	r2, [r4, #24]
 8003c42:	6922      	ldr	r2, [r4, #16]
 8003c44:	b942      	cbnz	r2, 8003c58 <__swsetup_r+0xa4>
 8003c46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c4a:	d1c5      	bne.n	8003bd8 <__swsetup_r+0x24>
 8003c4c:	bd38      	pop	{r3, r4, r5, pc}
 8003c4e:	0799      	lsls	r1, r3, #30
 8003c50:	bf58      	it	pl
 8003c52:	6962      	ldrpl	r2, [r4, #20]
 8003c54:	60a2      	str	r2, [r4, #8]
 8003c56:	e7f4      	b.n	8003c42 <__swsetup_r+0x8e>
 8003c58:	2000      	movs	r0, #0
 8003c5a:	e7f7      	b.n	8003c4c <__swsetup_r+0x98>
 8003c5c:	20000018 	.word	0x20000018

08003c60 <memset>:
 8003c60:	4402      	add	r2, r0
 8003c62:	4603      	mov	r3, r0
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d100      	bne.n	8003c6a <memset+0xa>
 8003c68:	4770      	bx	lr
 8003c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c6e:	e7f9      	b.n	8003c64 <memset+0x4>

08003c70 <_close_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4d06      	ldr	r5, [pc, #24]	@ (8003c8c <_close_r+0x1c>)
 8003c74:	2300      	movs	r3, #0
 8003c76:	4604      	mov	r4, r0
 8003c78:	4608      	mov	r0, r1
 8003c7a:	602b      	str	r3, [r5, #0]
 8003c7c:	f7fd f916 	bl	8000eac <_close>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d102      	bne.n	8003c8a <_close_r+0x1a>
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	b103      	cbz	r3, 8003c8a <_close_r+0x1a>
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	2000026c 	.word	0x2000026c

08003c90 <_lseek_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	4d07      	ldr	r5, [pc, #28]	@ (8003cb0 <_lseek_r+0x20>)
 8003c94:	4604      	mov	r4, r0
 8003c96:	4608      	mov	r0, r1
 8003c98:	4611      	mov	r1, r2
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	602a      	str	r2, [r5, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f7fd f928 	bl	8000ef4 <_lseek>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_lseek_r+0x1e>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_lseek_r+0x1e>
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	2000026c 	.word	0x2000026c

08003cb4 <_read_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4d07      	ldr	r5, [pc, #28]	@ (8003cd4 <_read_r+0x20>)
 8003cb8:	4604      	mov	r4, r0
 8003cba:	4608      	mov	r0, r1
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	602a      	str	r2, [r5, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f7fd f8d5 	bl	8000e72 <_read>
 8003cc8:	1c43      	adds	r3, r0, #1
 8003cca:	d102      	bne.n	8003cd2 <_read_r+0x1e>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	b103      	cbz	r3, 8003cd2 <_read_r+0x1e>
 8003cd0:	6023      	str	r3, [r4, #0]
 8003cd2:	bd38      	pop	{r3, r4, r5, pc}
 8003cd4:	2000026c 	.word	0x2000026c

08003cd8 <_write_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4d07      	ldr	r5, [pc, #28]	@ (8003cf8 <_write_r+0x20>)
 8003cdc:	4604      	mov	r4, r0
 8003cde:	4608      	mov	r0, r1
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	602a      	str	r2, [r5, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f7fc fff0 	bl	8000ccc <_write>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_write_r+0x1e>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_write_r+0x1e>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	2000026c 	.word	0x2000026c

08003cfc <__errno>:
 8003cfc:	4b01      	ldr	r3, [pc, #4]	@ (8003d04 <__errno+0x8>)
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000018 	.word	0x20000018

08003d08 <__libc_init_array>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d40 <__libc_init_array+0x38>)
 8003d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003d44 <__libc_init_array+0x3c>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	2600      	movs	r6, #0
 8003d14:	42a6      	cmp	r6, r4
 8003d16:	d109      	bne.n	8003d2c <__libc_init_array+0x24>
 8003d18:	4d0b      	ldr	r5, [pc, #44]	@ (8003d48 <__libc_init_array+0x40>)
 8003d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d4c <__libc_init_array+0x44>)
 8003d1c:	f000 fd52 	bl	80047c4 <_init>
 8003d20:	1b64      	subs	r4, r4, r5
 8003d22:	10a4      	asrs	r4, r4, #2
 8003d24:	2600      	movs	r6, #0
 8003d26:	42a6      	cmp	r6, r4
 8003d28:	d105      	bne.n	8003d36 <__libc_init_array+0x2e>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d30:	4798      	blx	r3
 8003d32:	3601      	adds	r6, #1
 8003d34:	e7ee      	b.n	8003d14 <__libc_init_array+0xc>
 8003d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3a:	4798      	blx	r3
 8003d3c:	3601      	adds	r6, #1
 8003d3e:	e7f2      	b.n	8003d26 <__libc_init_array+0x1e>
 8003d40:	08004b44 	.word	0x08004b44
 8003d44:	08004b44 	.word	0x08004b44
 8003d48:	08004b44 	.word	0x08004b44
 8003d4c:	08004b48 	.word	0x08004b48

08003d50 <__retarget_lock_init_recursive>:
 8003d50:	4770      	bx	lr

08003d52 <__retarget_lock_acquire_recursive>:
 8003d52:	4770      	bx	lr

08003d54 <__retarget_lock_release_recursive>:
 8003d54:	4770      	bx	lr
	...

08003d58 <_free_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4605      	mov	r5, r0
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d041      	beq.n	8003de4 <_free_r+0x8c>
 8003d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d64:	1f0c      	subs	r4, r1, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bfb8      	it	lt
 8003d6a:	18e4      	addlt	r4, r4, r3
 8003d6c:	f000 f8e0 	bl	8003f30 <__malloc_lock>
 8003d70:	4a1d      	ldr	r2, [pc, #116]	@ (8003de8 <_free_r+0x90>)
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	b933      	cbnz	r3, 8003d84 <_free_r+0x2c>
 8003d76:	6063      	str	r3, [r4, #4]
 8003d78:	6014      	str	r4, [r2, #0]
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d80:	f000 b8dc 	b.w	8003f3c <__malloc_unlock>
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d908      	bls.n	8003d9a <_free_r+0x42>
 8003d88:	6820      	ldr	r0, [r4, #0]
 8003d8a:	1821      	adds	r1, r4, r0
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	bf01      	itttt	eq
 8003d90:	6819      	ldreq	r1, [r3, #0]
 8003d92:	685b      	ldreq	r3, [r3, #4]
 8003d94:	1809      	addeq	r1, r1, r0
 8003d96:	6021      	streq	r1, [r4, #0]
 8003d98:	e7ed      	b.n	8003d76 <_free_r+0x1e>
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	b10b      	cbz	r3, 8003da4 <_free_r+0x4c>
 8003da0:	42a3      	cmp	r3, r4
 8003da2:	d9fa      	bls.n	8003d9a <_free_r+0x42>
 8003da4:	6811      	ldr	r1, [r2, #0]
 8003da6:	1850      	adds	r0, r2, r1
 8003da8:	42a0      	cmp	r0, r4
 8003daa:	d10b      	bne.n	8003dc4 <_free_r+0x6c>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	4401      	add	r1, r0
 8003db0:	1850      	adds	r0, r2, r1
 8003db2:	4283      	cmp	r3, r0
 8003db4:	6011      	str	r1, [r2, #0]
 8003db6:	d1e0      	bne.n	8003d7a <_free_r+0x22>
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	6053      	str	r3, [r2, #4]
 8003dbe:	4408      	add	r0, r1
 8003dc0:	6010      	str	r0, [r2, #0]
 8003dc2:	e7da      	b.n	8003d7a <_free_r+0x22>
 8003dc4:	d902      	bls.n	8003dcc <_free_r+0x74>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	602b      	str	r3, [r5, #0]
 8003dca:	e7d6      	b.n	8003d7a <_free_r+0x22>
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	1821      	adds	r1, r4, r0
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	bf04      	itt	eq
 8003dd4:	6819      	ldreq	r1, [r3, #0]
 8003dd6:	685b      	ldreq	r3, [r3, #4]
 8003dd8:	6063      	str	r3, [r4, #4]
 8003dda:	bf04      	itt	eq
 8003ddc:	1809      	addeq	r1, r1, r0
 8003dde:	6021      	streq	r1, [r4, #0]
 8003de0:	6054      	str	r4, [r2, #4]
 8003de2:	e7ca      	b.n	8003d7a <_free_r+0x22>
 8003de4:	bd38      	pop	{r3, r4, r5, pc}
 8003de6:	bf00      	nop
 8003de8:	20000278 	.word	0x20000278

08003dec <sbrk_aligned>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	4e0f      	ldr	r6, [pc, #60]	@ (8003e2c <sbrk_aligned+0x40>)
 8003df0:	460c      	mov	r4, r1
 8003df2:	6831      	ldr	r1, [r6, #0]
 8003df4:	4605      	mov	r5, r0
 8003df6:	b911      	cbnz	r1, 8003dfe <sbrk_aligned+0x12>
 8003df8:	f000 fcd4 	bl	80047a4 <_sbrk_r>
 8003dfc:	6030      	str	r0, [r6, #0]
 8003dfe:	4621      	mov	r1, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	f000 fccf 	bl	80047a4 <_sbrk_r>
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	d103      	bne.n	8003e12 <sbrk_aligned+0x26>
 8003e0a:	f04f 34ff 	mov.w	r4, #4294967295
 8003e0e:	4620      	mov	r0, r4
 8003e10:	bd70      	pop	{r4, r5, r6, pc}
 8003e12:	1cc4      	adds	r4, r0, #3
 8003e14:	f024 0403 	bic.w	r4, r4, #3
 8003e18:	42a0      	cmp	r0, r4
 8003e1a:	d0f8      	beq.n	8003e0e <sbrk_aligned+0x22>
 8003e1c:	1a21      	subs	r1, r4, r0
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f000 fcc0 	bl	80047a4 <_sbrk_r>
 8003e24:	3001      	adds	r0, #1
 8003e26:	d1f2      	bne.n	8003e0e <sbrk_aligned+0x22>
 8003e28:	e7ef      	b.n	8003e0a <sbrk_aligned+0x1e>
 8003e2a:	bf00      	nop
 8003e2c:	20000274 	.word	0x20000274

08003e30 <_malloc_r>:
 8003e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e34:	1ccd      	adds	r5, r1, #3
 8003e36:	f025 0503 	bic.w	r5, r5, #3
 8003e3a:	3508      	adds	r5, #8
 8003e3c:	2d0c      	cmp	r5, #12
 8003e3e:	bf38      	it	cc
 8003e40:	250c      	movcc	r5, #12
 8003e42:	2d00      	cmp	r5, #0
 8003e44:	4606      	mov	r6, r0
 8003e46:	db01      	blt.n	8003e4c <_malloc_r+0x1c>
 8003e48:	42a9      	cmp	r1, r5
 8003e4a:	d904      	bls.n	8003e56 <_malloc_r+0x26>
 8003e4c:	230c      	movs	r3, #12
 8003e4e:	6033      	str	r3, [r6, #0]
 8003e50:	2000      	movs	r0, #0
 8003e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f2c <_malloc_r+0xfc>
 8003e5a:	f000 f869 	bl	8003f30 <__malloc_lock>
 8003e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e62:	461c      	mov	r4, r3
 8003e64:	bb44      	cbnz	r4, 8003eb8 <_malloc_r+0x88>
 8003e66:	4629      	mov	r1, r5
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f7ff ffbf 	bl	8003dec <sbrk_aligned>
 8003e6e:	1c43      	adds	r3, r0, #1
 8003e70:	4604      	mov	r4, r0
 8003e72:	d158      	bne.n	8003f26 <_malloc_r+0xf6>
 8003e74:	f8d8 4000 	ldr.w	r4, [r8]
 8003e78:	4627      	mov	r7, r4
 8003e7a:	2f00      	cmp	r7, #0
 8003e7c:	d143      	bne.n	8003f06 <_malloc_r+0xd6>
 8003e7e:	2c00      	cmp	r4, #0
 8003e80:	d04b      	beq.n	8003f1a <_malloc_r+0xea>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	4639      	mov	r1, r7
 8003e86:	4630      	mov	r0, r6
 8003e88:	eb04 0903 	add.w	r9, r4, r3
 8003e8c:	f000 fc8a 	bl	80047a4 <_sbrk_r>
 8003e90:	4581      	cmp	r9, r0
 8003e92:	d142      	bne.n	8003f1a <_malloc_r+0xea>
 8003e94:	6821      	ldr	r1, [r4, #0]
 8003e96:	1a6d      	subs	r5, r5, r1
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f7ff ffa6 	bl	8003dec <sbrk_aligned>
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d03a      	beq.n	8003f1a <_malloc_r+0xea>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	442b      	add	r3, r5
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	bb62      	cbnz	r2, 8003f0c <_malloc_r+0xdc>
 8003eb2:	f8c8 7000 	str.w	r7, [r8]
 8003eb6:	e00f      	b.n	8003ed8 <_malloc_r+0xa8>
 8003eb8:	6822      	ldr	r2, [r4, #0]
 8003eba:	1b52      	subs	r2, r2, r5
 8003ebc:	d420      	bmi.n	8003f00 <_malloc_r+0xd0>
 8003ebe:	2a0b      	cmp	r2, #11
 8003ec0:	d917      	bls.n	8003ef2 <_malloc_r+0xc2>
 8003ec2:	1961      	adds	r1, r4, r5
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	6025      	str	r5, [r4, #0]
 8003ec8:	bf18      	it	ne
 8003eca:	6059      	strne	r1, [r3, #4]
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	bf08      	it	eq
 8003ed0:	f8c8 1000 	streq.w	r1, [r8]
 8003ed4:	5162      	str	r2, [r4, r5]
 8003ed6:	604b      	str	r3, [r1, #4]
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f000 f82f 	bl	8003f3c <__malloc_unlock>
 8003ede:	f104 000b 	add.w	r0, r4, #11
 8003ee2:	1d23      	adds	r3, r4, #4
 8003ee4:	f020 0007 	bic.w	r0, r0, #7
 8003ee8:	1ac2      	subs	r2, r0, r3
 8003eea:	bf1c      	itt	ne
 8003eec:	1a1b      	subne	r3, r3, r0
 8003eee:	50a3      	strne	r3, [r4, r2]
 8003ef0:	e7af      	b.n	8003e52 <_malloc_r+0x22>
 8003ef2:	6862      	ldr	r2, [r4, #4]
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	bf0c      	ite	eq
 8003ef8:	f8c8 2000 	streq.w	r2, [r8]
 8003efc:	605a      	strne	r2, [r3, #4]
 8003efe:	e7eb      	b.n	8003ed8 <_malloc_r+0xa8>
 8003f00:	4623      	mov	r3, r4
 8003f02:	6864      	ldr	r4, [r4, #4]
 8003f04:	e7ae      	b.n	8003e64 <_malloc_r+0x34>
 8003f06:	463c      	mov	r4, r7
 8003f08:	687f      	ldr	r7, [r7, #4]
 8003f0a:	e7b6      	b.n	8003e7a <_malloc_r+0x4a>
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	42a3      	cmp	r3, r4
 8003f12:	d1fb      	bne.n	8003f0c <_malloc_r+0xdc>
 8003f14:	2300      	movs	r3, #0
 8003f16:	6053      	str	r3, [r2, #4]
 8003f18:	e7de      	b.n	8003ed8 <_malloc_r+0xa8>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	6033      	str	r3, [r6, #0]
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f000 f80c 	bl	8003f3c <__malloc_unlock>
 8003f24:	e794      	b.n	8003e50 <_malloc_r+0x20>
 8003f26:	6005      	str	r5, [r0, #0]
 8003f28:	e7d6      	b.n	8003ed8 <_malloc_r+0xa8>
 8003f2a:	bf00      	nop
 8003f2c:	20000278 	.word	0x20000278

08003f30 <__malloc_lock>:
 8003f30:	4801      	ldr	r0, [pc, #4]	@ (8003f38 <__malloc_lock+0x8>)
 8003f32:	f7ff bf0e 	b.w	8003d52 <__retarget_lock_acquire_recursive>
 8003f36:	bf00      	nop
 8003f38:	20000270 	.word	0x20000270

08003f3c <__malloc_unlock>:
 8003f3c:	4801      	ldr	r0, [pc, #4]	@ (8003f44 <__malloc_unlock+0x8>)
 8003f3e:	f7ff bf09 	b.w	8003d54 <__retarget_lock_release_recursive>
 8003f42:	bf00      	nop
 8003f44:	20000270 	.word	0x20000270

08003f48 <__sfputc_r>:
 8003f48:	6893      	ldr	r3, [r2, #8]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	b410      	push	{r4}
 8003f50:	6093      	str	r3, [r2, #8]
 8003f52:	da07      	bge.n	8003f64 <__sfputc_r+0x1c>
 8003f54:	6994      	ldr	r4, [r2, #24]
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	db01      	blt.n	8003f5e <__sfputc_r+0x16>
 8003f5a:	290a      	cmp	r1, #10
 8003f5c:	d102      	bne.n	8003f64 <__sfputc_r+0x1c>
 8003f5e:	bc10      	pop	{r4}
 8003f60:	f7ff bde9 	b.w	8003b36 <__swbuf_r>
 8003f64:	6813      	ldr	r3, [r2, #0]
 8003f66:	1c58      	adds	r0, r3, #1
 8003f68:	6010      	str	r0, [r2, #0]
 8003f6a:	7019      	strb	r1, [r3, #0]
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	bc10      	pop	{r4}
 8003f70:	4770      	bx	lr

08003f72 <__sfputs_r>:
 8003f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f74:	4606      	mov	r6, r0
 8003f76:	460f      	mov	r7, r1
 8003f78:	4614      	mov	r4, r2
 8003f7a:	18d5      	adds	r5, r2, r3
 8003f7c:	42ac      	cmp	r4, r5
 8003f7e:	d101      	bne.n	8003f84 <__sfputs_r+0x12>
 8003f80:	2000      	movs	r0, #0
 8003f82:	e007      	b.n	8003f94 <__sfputs_r+0x22>
 8003f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f88:	463a      	mov	r2, r7
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f7ff ffdc 	bl	8003f48 <__sfputc_r>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d1f3      	bne.n	8003f7c <__sfputs_r+0xa>
 8003f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f98 <_vfiprintf_r>:
 8003f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9c:	460d      	mov	r5, r1
 8003f9e:	b09d      	sub	sp, #116	@ 0x74
 8003fa0:	4614      	mov	r4, r2
 8003fa2:	4698      	mov	r8, r3
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	b118      	cbz	r0, 8003fb0 <_vfiprintf_r+0x18>
 8003fa8:	6a03      	ldr	r3, [r0, #32]
 8003faa:	b90b      	cbnz	r3, 8003fb0 <_vfiprintf_r+0x18>
 8003fac:	f7ff fcd2 	bl	8003954 <__sinit>
 8003fb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fb2:	07d9      	lsls	r1, r3, #31
 8003fb4:	d405      	bmi.n	8003fc2 <_vfiprintf_r+0x2a>
 8003fb6:	89ab      	ldrh	r3, [r5, #12]
 8003fb8:	059a      	lsls	r2, r3, #22
 8003fba:	d402      	bmi.n	8003fc2 <_vfiprintf_r+0x2a>
 8003fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fbe:	f7ff fec8 	bl	8003d52 <__retarget_lock_acquire_recursive>
 8003fc2:	89ab      	ldrh	r3, [r5, #12]
 8003fc4:	071b      	lsls	r3, r3, #28
 8003fc6:	d501      	bpl.n	8003fcc <_vfiprintf_r+0x34>
 8003fc8:	692b      	ldr	r3, [r5, #16]
 8003fca:	b99b      	cbnz	r3, 8003ff4 <_vfiprintf_r+0x5c>
 8003fcc:	4629      	mov	r1, r5
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f7ff fdf0 	bl	8003bb4 <__swsetup_r>
 8003fd4:	b170      	cbz	r0, 8003ff4 <_vfiprintf_r+0x5c>
 8003fd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fd8:	07dc      	lsls	r4, r3, #31
 8003fda:	d504      	bpl.n	8003fe6 <_vfiprintf_r+0x4e>
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	b01d      	add	sp, #116	@ 0x74
 8003fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe6:	89ab      	ldrh	r3, [r5, #12]
 8003fe8:	0598      	lsls	r0, r3, #22
 8003fea:	d4f7      	bmi.n	8003fdc <_vfiprintf_r+0x44>
 8003fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fee:	f7ff feb1 	bl	8003d54 <__retarget_lock_release_recursive>
 8003ff2:	e7f3      	b.n	8003fdc <_vfiprintf_r+0x44>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004002:	2330      	movs	r3, #48	@ 0x30
 8004004:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80041b4 <_vfiprintf_r+0x21c>
 8004008:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800400c:	f04f 0901 	mov.w	r9, #1
 8004010:	4623      	mov	r3, r4
 8004012:	469a      	mov	sl, r3
 8004014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004018:	b10a      	cbz	r2, 800401e <_vfiprintf_r+0x86>
 800401a:	2a25      	cmp	r2, #37	@ 0x25
 800401c:	d1f9      	bne.n	8004012 <_vfiprintf_r+0x7a>
 800401e:	ebba 0b04 	subs.w	fp, sl, r4
 8004022:	d00b      	beq.n	800403c <_vfiprintf_r+0xa4>
 8004024:	465b      	mov	r3, fp
 8004026:	4622      	mov	r2, r4
 8004028:	4629      	mov	r1, r5
 800402a:	4630      	mov	r0, r6
 800402c:	f7ff ffa1 	bl	8003f72 <__sfputs_r>
 8004030:	3001      	adds	r0, #1
 8004032:	f000 80a7 	beq.w	8004184 <_vfiprintf_r+0x1ec>
 8004036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004038:	445a      	add	r2, fp
 800403a:	9209      	str	r2, [sp, #36]	@ 0x24
 800403c:	f89a 3000 	ldrb.w	r3, [sl]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 809f 	beq.w	8004184 <_vfiprintf_r+0x1ec>
 8004046:	2300      	movs	r3, #0
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004050:	f10a 0a01 	add.w	sl, sl, #1
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	9307      	str	r3, [sp, #28]
 8004058:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800405c:	931a      	str	r3, [sp, #104]	@ 0x68
 800405e:	4654      	mov	r4, sl
 8004060:	2205      	movs	r2, #5
 8004062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004066:	4853      	ldr	r0, [pc, #332]	@ (80041b4 <_vfiprintf_r+0x21c>)
 8004068:	f7fc f88a 	bl	8000180 <memchr>
 800406c:	9a04      	ldr	r2, [sp, #16]
 800406e:	b9d8      	cbnz	r0, 80040a8 <_vfiprintf_r+0x110>
 8004070:	06d1      	lsls	r1, r2, #27
 8004072:	bf44      	itt	mi
 8004074:	2320      	movmi	r3, #32
 8004076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800407a:	0713      	lsls	r3, r2, #28
 800407c:	bf44      	itt	mi
 800407e:	232b      	movmi	r3, #43	@ 0x2b
 8004080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004084:	f89a 3000 	ldrb.w	r3, [sl]
 8004088:	2b2a      	cmp	r3, #42	@ 0x2a
 800408a:	d015      	beq.n	80040b8 <_vfiprintf_r+0x120>
 800408c:	9a07      	ldr	r2, [sp, #28]
 800408e:	4654      	mov	r4, sl
 8004090:	2000      	movs	r0, #0
 8004092:	f04f 0c0a 	mov.w	ip, #10
 8004096:	4621      	mov	r1, r4
 8004098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800409c:	3b30      	subs	r3, #48	@ 0x30
 800409e:	2b09      	cmp	r3, #9
 80040a0:	d94b      	bls.n	800413a <_vfiprintf_r+0x1a2>
 80040a2:	b1b0      	cbz	r0, 80040d2 <_vfiprintf_r+0x13a>
 80040a4:	9207      	str	r2, [sp, #28]
 80040a6:	e014      	b.n	80040d2 <_vfiprintf_r+0x13a>
 80040a8:	eba0 0308 	sub.w	r3, r0, r8
 80040ac:	fa09 f303 	lsl.w	r3, r9, r3
 80040b0:	4313      	orrs	r3, r2
 80040b2:	9304      	str	r3, [sp, #16]
 80040b4:	46a2      	mov	sl, r4
 80040b6:	e7d2      	b.n	800405e <_vfiprintf_r+0xc6>
 80040b8:	9b03      	ldr	r3, [sp, #12]
 80040ba:	1d19      	adds	r1, r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	9103      	str	r1, [sp, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bfbb      	ittet	lt
 80040c4:	425b      	neglt	r3, r3
 80040c6:	f042 0202 	orrlt.w	r2, r2, #2
 80040ca:	9307      	strge	r3, [sp, #28]
 80040cc:	9307      	strlt	r3, [sp, #28]
 80040ce:	bfb8      	it	lt
 80040d0:	9204      	strlt	r2, [sp, #16]
 80040d2:	7823      	ldrb	r3, [r4, #0]
 80040d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80040d6:	d10a      	bne.n	80040ee <_vfiprintf_r+0x156>
 80040d8:	7863      	ldrb	r3, [r4, #1]
 80040da:	2b2a      	cmp	r3, #42	@ 0x2a
 80040dc:	d132      	bne.n	8004144 <_vfiprintf_r+0x1ac>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	9203      	str	r2, [sp, #12]
 80040e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040ea:	3402      	adds	r4, #2
 80040ec:	9305      	str	r3, [sp, #20]
 80040ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80041b8 <_vfiprintf_r+0x220>
 80040f2:	7821      	ldrb	r1, [r4, #0]
 80040f4:	2203      	movs	r2, #3
 80040f6:	4650      	mov	r0, sl
 80040f8:	f7fc f842 	bl	8000180 <memchr>
 80040fc:	b138      	cbz	r0, 800410e <_vfiprintf_r+0x176>
 80040fe:	9b04      	ldr	r3, [sp, #16]
 8004100:	eba0 000a 	sub.w	r0, r0, sl
 8004104:	2240      	movs	r2, #64	@ 0x40
 8004106:	4082      	lsls	r2, r0
 8004108:	4313      	orrs	r3, r2
 800410a:	3401      	adds	r4, #1
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004112:	482a      	ldr	r0, [pc, #168]	@ (80041bc <_vfiprintf_r+0x224>)
 8004114:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004118:	2206      	movs	r2, #6
 800411a:	f7fc f831 	bl	8000180 <memchr>
 800411e:	2800      	cmp	r0, #0
 8004120:	d03f      	beq.n	80041a2 <_vfiprintf_r+0x20a>
 8004122:	4b27      	ldr	r3, [pc, #156]	@ (80041c0 <_vfiprintf_r+0x228>)
 8004124:	bb1b      	cbnz	r3, 800416e <_vfiprintf_r+0x1d6>
 8004126:	9b03      	ldr	r3, [sp, #12]
 8004128:	3307      	adds	r3, #7
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	3308      	adds	r3, #8
 8004130:	9303      	str	r3, [sp, #12]
 8004132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004134:	443b      	add	r3, r7
 8004136:	9309      	str	r3, [sp, #36]	@ 0x24
 8004138:	e76a      	b.n	8004010 <_vfiprintf_r+0x78>
 800413a:	fb0c 3202 	mla	r2, ip, r2, r3
 800413e:	460c      	mov	r4, r1
 8004140:	2001      	movs	r0, #1
 8004142:	e7a8      	b.n	8004096 <_vfiprintf_r+0xfe>
 8004144:	2300      	movs	r3, #0
 8004146:	3401      	adds	r4, #1
 8004148:	9305      	str	r3, [sp, #20]
 800414a:	4619      	mov	r1, r3
 800414c:	f04f 0c0a 	mov.w	ip, #10
 8004150:	4620      	mov	r0, r4
 8004152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004156:	3a30      	subs	r2, #48	@ 0x30
 8004158:	2a09      	cmp	r2, #9
 800415a:	d903      	bls.n	8004164 <_vfiprintf_r+0x1cc>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0c6      	beq.n	80040ee <_vfiprintf_r+0x156>
 8004160:	9105      	str	r1, [sp, #20]
 8004162:	e7c4      	b.n	80040ee <_vfiprintf_r+0x156>
 8004164:	fb0c 2101 	mla	r1, ip, r1, r2
 8004168:	4604      	mov	r4, r0
 800416a:	2301      	movs	r3, #1
 800416c:	e7f0      	b.n	8004150 <_vfiprintf_r+0x1b8>
 800416e:	ab03      	add	r3, sp, #12
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	462a      	mov	r2, r5
 8004174:	4b13      	ldr	r3, [pc, #76]	@ (80041c4 <_vfiprintf_r+0x22c>)
 8004176:	a904      	add	r1, sp, #16
 8004178:	4630      	mov	r0, r6
 800417a:	f3af 8000 	nop.w
 800417e:	4607      	mov	r7, r0
 8004180:	1c78      	adds	r0, r7, #1
 8004182:	d1d6      	bne.n	8004132 <_vfiprintf_r+0x19a>
 8004184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004186:	07d9      	lsls	r1, r3, #31
 8004188:	d405      	bmi.n	8004196 <_vfiprintf_r+0x1fe>
 800418a:	89ab      	ldrh	r3, [r5, #12]
 800418c:	059a      	lsls	r2, r3, #22
 800418e:	d402      	bmi.n	8004196 <_vfiprintf_r+0x1fe>
 8004190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004192:	f7ff fddf 	bl	8003d54 <__retarget_lock_release_recursive>
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	065b      	lsls	r3, r3, #25
 800419a:	f53f af1f 	bmi.w	8003fdc <_vfiprintf_r+0x44>
 800419e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041a0:	e71e      	b.n	8003fe0 <_vfiprintf_r+0x48>
 80041a2:	ab03      	add	r3, sp, #12
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	462a      	mov	r2, r5
 80041a8:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <_vfiprintf_r+0x22c>)
 80041aa:	a904      	add	r1, sp, #16
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 f879 	bl	80042a4 <_printf_i>
 80041b2:	e7e4      	b.n	800417e <_vfiprintf_r+0x1e6>
 80041b4:	08004b08 	.word	0x08004b08
 80041b8:	08004b0e 	.word	0x08004b0e
 80041bc:	08004b12 	.word	0x08004b12
 80041c0:	00000000 	.word	0x00000000
 80041c4:	08003f73 	.word	0x08003f73

080041c8 <_printf_common>:
 80041c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	4616      	mov	r6, r2
 80041ce:	4698      	mov	r8, r3
 80041d0:	688a      	ldr	r2, [r1, #8]
 80041d2:	690b      	ldr	r3, [r1, #16]
 80041d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041d8:	4293      	cmp	r3, r2
 80041da:	bfb8      	it	lt
 80041dc:	4613      	movlt	r3, r2
 80041de:	6033      	str	r3, [r6, #0]
 80041e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041e4:	4607      	mov	r7, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	b10a      	cbz	r2, 80041ee <_printf_common+0x26>
 80041ea:	3301      	adds	r3, #1
 80041ec:	6033      	str	r3, [r6, #0]
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	0699      	lsls	r1, r3, #26
 80041f2:	bf42      	ittt	mi
 80041f4:	6833      	ldrmi	r3, [r6, #0]
 80041f6:	3302      	addmi	r3, #2
 80041f8:	6033      	strmi	r3, [r6, #0]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	f015 0506 	ands.w	r5, r5, #6
 8004200:	d106      	bne.n	8004210 <_printf_common+0x48>
 8004202:	f104 0a19 	add.w	sl, r4, #25
 8004206:	68e3      	ldr	r3, [r4, #12]
 8004208:	6832      	ldr	r2, [r6, #0]
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	42ab      	cmp	r3, r5
 800420e:	dc26      	bgt.n	800425e <_printf_common+0x96>
 8004210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	3b00      	subs	r3, #0
 8004218:	bf18      	it	ne
 800421a:	2301      	movne	r3, #1
 800421c:	0692      	lsls	r2, r2, #26
 800421e:	d42b      	bmi.n	8004278 <_printf_common+0xb0>
 8004220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004224:	4641      	mov	r1, r8
 8004226:	4638      	mov	r0, r7
 8004228:	47c8      	blx	r9
 800422a:	3001      	adds	r0, #1
 800422c:	d01e      	beq.n	800426c <_printf_common+0xa4>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	6922      	ldr	r2, [r4, #16]
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf02      	ittt	eq
 800423a:	68e5      	ldreq	r5, [r4, #12]
 800423c:	6833      	ldreq	r3, [r6, #0]
 800423e:	1aed      	subeq	r5, r5, r3
 8004240:	68a3      	ldr	r3, [r4, #8]
 8004242:	bf0c      	ite	eq
 8004244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004248:	2500      	movne	r5, #0
 800424a:	4293      	cmp	r3, r2
 800424c:	bfc4      	itt	gt
 800424e:	1a9b      	subgt	r3, r3, r2
 8004250:	18ed      	addgt	r5, r5, r3
 8004252:	2600      	movs	r6, #0
 8004254:	341a      	adds	r4, #26
 8004256:	42b5      	cmp	r5, r6
 8004258:	d11a      	bne.n	8004290 <_printf_common+0xc8>
 800425a:	2000      	movs	r0, #0
 800425c:	e008      	b.n	8004270 <_printf_common+0xa8>
 800425e:	2301      	movs	r3, #1
 8004260:	4652      	mov	r2, sl
 8004262:	4641      	mov	r1, r8
 8004264:	4638      	mov	r0, r7
 8004266:	47c8      	blx	r9
 8004268:	3001      	adds	r0, #1
 800426a:	d103      	bne.n	8004274 <_printf_common+0xac>
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004274:	3501      	adds	r5, #1
 8004276:	e7c6      	b.n	8004206 <_printf_common+0x3e>
 8004278:	18e1      	adds	r1, r4, r3
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	2030      	movs	r0, #48	@ 0x30
 800427e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004282:	4422      	add	r2, r4
 8004284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800428c:	3302      	adds	r3, #2
 800428e:	e7c7      	b.n	8004220 <_printf_common+0x58>
 8004290:	2301      	movs	r3, #1
 8004292:	4622      	mov	r2, r4
 8004294:	4641      	mov	r1, r8
 8004296:	4638      	mov	r0, r7
 8004298:	47c8      	blx	r9
 800429a:	3001      	adds	r0, #1
 800429c:	d0e6      	beq.n	800426c <_printf_common+0xa4>
 800429e:	3601      	adds	r6, #1
 80042a0:	e7d9      	b.n	8004256 <_printf_common+0x8e>
	...

080042a4 <_printf_i>:
 80042a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	7e0f      	ldrb	r7, [r1, #24]
 80042aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042ac:	2f78      	cmp	r7, #120	@ 0x78
 80042ae:	4691      	mov	r9, r2
 80042b0:	4680      	mov	r8, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	469a      	mov	sl, r3
 80042b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042ba:	d807      	bhi.n	80042cc <_printf_i+0x28>
 80042bc:	2f62      	cmp	r7, #98	@ 0x62
 80042be:	d80a      	bhi.n	80042d6 <_printf_i+0x32>
 80042c0:	2f00      	cmp	r7, #0
 80042c2:	f000 80d2 	beq.w	800446a <_printf_i+0x1c6>
 80042c6:	2f58      	cmp	r7, #88	@ 0x58
 80042c8:	f000 80b9 	beq.w	800443e <_printf_i+0x19a>
 80042cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042d4:	e03a      	b.n	800434c <_printf_i+0xa8>
 80042d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042da:	2b15      	cmp	r3, #21
 80042dc:	d8f6      	bhi.n	80042cc <_printf_i+0x28>
 80042de:	a101      	add	r1, pc, #4	@ (adr r1, 80042e4 <_printf_i+0x40>)
 80042e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042e4:	0800433d 	.word	0x0800433d
 80042e8:	08004351 	.word	0x08004351
 80042ec:	080042cd 	.word	0x080042cd
 80042f0:	080042cd 	.word	0x080042cd
 80042f4:	080042cd 	.word	0x080042cd
 80042f8:	080042cd 	.word	0x080042cd
 80042fc:	08004351 	.word	0x08004351
 8004300:	080042cd 	.word	0x080042cd
 8004304:	080042cd 	.word	0x080042cd
 8004308:	080042cd 	.word	0x080042cd
 800430c:	080042cd 	.word	0x080042cd
 8004310:	08004451 	.word	0x08004451
 8004314:	0800437b 	.word	0x0800437b
 8004318:	0800440b 	.word	0x0800440b
 800431c:	080042cd 	.word	0x080042cd
 8004320:	080042cd 	.word	0x080042cd
 8004324:	08004473 	.word	0x08004473
 8004328:	080042cd 	.word	0x080042cd
 800432c:	0800437b 	.word	0x0800437b
 8004330:	080042cd 	.word	0x080042cd
 8004334:	080042cd 	.word	0x080042cd
 8004338:	08004413 	.word	0x08004413
 800433c:	6833      	ldr	r3, [r6, #0]
 800433e:	1d1a      	adds	r2, r3, #4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6032      	str	r2, [r6, #0]
 8004344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800434c:	2301      	movs	r3, #1
 800434e:	e09d      	b.n	800448c <_printf_i+0x1e8>
 8004350:	6833      	ldr	r3, [r6, #0]
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	6031      	str	r1, [r6, #0]
 8004358:	0606      	lsls	r6, r0, #24
 800435a:	d501      	bpl.n	8004360 <_printf_i+0xbc>
 800435c:	681d      	ldr	r5, [r3, #0]
 800435e:	e003      	b.n	8004368 <_printf_i+0xc4>
 8004360:	0645      	lsls	r5, r0, #25
 8004362:	d5fb      	bpl.n	800435c <_printf_i+0xb8>
 8004364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004368:	2d00      	cmp	r5, #0
 800436a:	da03      	bge.n	8004374 <_printf_i+0xd0>
 800436c:	232d      	movs	r3, #45	@ 0x2d
 800436e:	426d      	negs	r5, r5
 8004370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004374:	4859      	ldr	r0, [pc, #356]	@ (80044dc <_printf_i+0x238>)
 8004376:	230a      	movs	r3, #10
 8004378:	e011      	b.n	800439e <_printf_i+0xfa>
 800437a:	6821      	ldr	r1, [r4, #0]
 800437c:	6833      	ldr	r3, [r6, #0]
 800437e:	0608      	lsls	r0, r1, #24
 8004380:	f853 5b04 	ldr.w	r5, [r3], #4
 8004384:	d402      	bmi.n	800438c <_printf_i+0xe8>
 8004386:	0649      	lsls	r1, r1, #25
 8004388:	bf48      	it	mi
 800438a:	b2ad      	uxthmi	r5, r5
 800438c:	2f6f      	cmp	r7, #111	@ 0x6f
 800438e:	4853      	ldr	r0, [pc, #332]	@ (80044dc <_printf_i+0x238>)
 8004390:	6033      	str	r3, [r6, #0]
 8004392:	bf14      	ite	ne
 8004394:	230a      	movne	r3, #10
 8004396:	2308      	moveq	r3, #8
 8004398:	2100      	movs	r1, #0
 800439a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800439e:	6866      	ldr	r6, [r4, #4]
 80043a0:	60a6      	str	r6, [r4, #8]
 80043a2:	2e00      	cmp	r6, #0
 80043a4:	bfa2      	ittt	ge
 80043a6:	6821      	ldrge	r1, [r4, #0]
 80043a8:	f021 0104 	bicge.w	r1, r1, #4
 80043ac:	6021      	strge	r1, [r4, #0]
 80043ae:	b90d      	cbnz	r5, 80043b4 <_printf_i+0x110>
 80043b0:	2e00      	cmp	r6, #0
 80043b2:	d04b      	beq.n	800444c <_printf_i+0x1a8>
 80043b4:	4616      	mov	r6, r2
 80043b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80043ba:	fb03 5711 	mls	r7, r3, r1, r5
 80043be:	5dc7      	ldrb	r7, [r0, r7]
 80043c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043c4:	462f      	mov	r7, r5
 80043c6:	42bb      	cmp	r3, r7
 80043c8:	460d      	mov	r5, r1
 80043ca:	d9f4      	bls.n	80043b6 <_printf_i+0x112>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d10b      	bne.n	80043e8 <_printf_i+0x144>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	07df      	lsls	r7, r3, #31
 80043d4:	d508      	bpl.n	80043e8 <_printf_i+0x144>
 80043d6:	6923      	ldr	r3, [r4, #16]
 80043d8:	6861      	ldr	r1, [r4, #4]
 80043da:	4299      	cmp	r1, r3
 80043dc:	bfde      	ittt	le
 80043de:	2330      	movle	r3, #48	@ 0x30
 80043e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043e8:	1b92      	subs	r2, r2, r6
 80043ea:	6122      	str	r2, [r4, #16]
 80043ec:	f8cd a000 	str.w	sl, [sp]
 80043f0:	464b      	mov	r3, r9
 80043f2:	aa03      	add	r2, sp, #12
 80043f4:	4621      	mov	r1, r4
 80043f6:	4640      	mov	r0, r8
 80043f8:	f7ff fee6 	bl	80041c8 <_printf_common>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d14a      	bne.n	8004496 <_printf_i+0x1f2>
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	b004      	add	sp, #16
 8004406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	f043 0320 	orr.w	r3, r3, #32
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	4833      	ldr	r0, [pc, #204]	@ (80044e0 <_printf_i+0x23c>)
 8004414:	2778      	movs	r7, #120	@ 0x78
 8004416:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	6831      	ldr	r1, [r6, #0]
 800441e:	061f      	lsls	r7, r3, #24
 8004420:	f851 5b04 	ldr.w	r5, [r1], #4
 8004424:	d402      	bmi.n	800442c <_printf_i+0x188>
 8004426:	065f      	lsls	r7, r3, #25
 8004428:	bf48      	it	mi
 800442a:	b2ad      	uxthmi	r5, r5
 800442c:	6031      	str	r1, [r6, #0]
 800442e:	07d9      	lsls	r1, r3, #31
 8004430:	bf44      	itt	mi
 8004432:	f043 0320 	orrmi.w	r3, r3, #32
 8004436:	6023      	strmi	r3, [r4, #0]
 8004438:	b11d      	cbz	r5, 8004442 <_printf_i+0x19e>
 800443a:	2310      	movs	r3, #16
 800443c:	e7ac      	b.n	8004398 <_printf_i+0xf4>
 800443e:	4827      	ldr	r0, [pc, #156]	@ (80044dc <_printf_i+0x238>)
 8004440:	e7e9      	b.n	8004416 <_printf_i+0x172>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	f023 0320 	bic.w	r3, r3, #32
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	e7f6      	b.n	800443a <_printf_i+0x196>
 800444c:	4616      	mov	r6, r2
 800444e:	e7bd      	b.n	80043cc <_printf_i+0x128>
 8004450:	6833      	ldr	r3, [r6, #0]
 8004452:	6825      	ldr	r5, [r4, #0]
 8004454:	6961      	ldr	r1, [r4, #20]
 8004456:	1d18      	adds	r0, r3, #4
 8004458:	6030      	str	r0, [r6, #0]
 800445a:	062e      	lsls	r6, r5, #24
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	d501      	bpl.n	8004464 <_printf_i+0x1c0>
 8004460:	6019      	str	r1, [r3, #0]
 8004462:	e002      	b.n	800446a <_printf_i+0x1c6>
 8004464:	0668      	lsls	r0, r5, #25
 8004466:	d5fb      	bpl.n	8004460 <_printf_i+0x1bc>
 8004468:	8019      	strh	r1, [r3, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	6123      	str	r3, [r4, #16]
 800446e:	4616      	mov	r6, r2
 8004470:	e7bc      	b.n	80043ec <_printf_i+0x148>
 8004472:	6833      	ldr	r3, [r6, #0]
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	6032      	str	r2, [r6, #0]
 8004478:	681e      	ldr	r6, [r3, #0]
 800447a:	6862      	ldr	r2, [r4, #4]
 800447c:	2100      	movs	r1, #0
 800447e:	4630      	mov	r0, r6
 8004480:	f7fb fe7e 	bl	8000180 <memchr>
 8004484:	b108      	cbz	r0, 800448a <_printf_i+0x1e6>
 8004486:	1b80      	subs	r0, r0, r6
 8004488:	6060      	str	r0, [r4, #4]
 800448a:	6863      	ldr	r3, [r4, #4]
 800448c:	6123      	str	r3, [r4, #16]
 800448e:	2300      	movs	r3, #0
 8004490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004494:	e7aa      	b.n	80043ec <_printf_i+0x148>
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	4632      	mov	r2, r6
 800449a:	4649      	mov	r1, r9
 800449c:	4640      	mov	r0, r8
 800449e:	47d0      	blx	sl
 80044a0:	3001      	adds	r0, #1
 80044a2:	d0ad      	beq.n	8004400 <_printf_i+0x15c>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	079b      	lsls	r3, r3, #30
 80044a8:	d413      	bmi.n	80044d2 <_printf_i+0x22e>
 80044aa:	68e0      	ldr	r0, [r4, #12]
 80044ac:	9b03      	ldr	r3, [sp, #12]
 80044ae:	4298      	cmp	r0, r3
 80044b0:	bfb8      	it	lt
 80044b2:	4618      	movlt	r0, r3
 80044b4:	e7a6      	b.n	8004404 <_printf_i+0x160>
 80044b6:	2301      	movs	r3, #1
 80044b8:	4632      	mov	r2, r6
 80044ba:	4649      	mov	r1, r9
 80044bc:	4640      	mov	r0, r8
 80044be:	47d0      	blx	sl
 80044c0:	3001      	adds	r0, #1
 80044c2:	d09d      	beq.n	8004400 <_printf_i+0x15c>
 80044c4:	3501      	adds	r5, #1
 80044c6:	68e3      	ldr	r3, [r4, #12]
 80044c8:	9903      	ldr	r1, [sp, #12]
 80044ca:	1a5b      	subs	r3, r3, r1
 80044cc:	42ab      	cmp	r3, r5
 80044ce:	dcf2      	bgt.n	80044b6 <_printf_i+0x212>
 80044d0:	e7eb      	b.n	80044aa <_printf_i+0x206>
 80044d2:	2500      	movs	r5, #0
 80044d4:	f104 0619 	add.w	r6, r4, #25
 80044d8:	e7f5      	b.n	80044c6 <_printf_i+0x222>
 80044da:	bf00      	nop
 80044dc:	08004b19 	.word	0x08004b19
 80044e0:	08004b2a 	.word	0x08004b2a

080044e4 <__sflush_r>:
 80044e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	0716      	lsls	r6, r2, #28
 80044ec:	4605      	mov	r5, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	d454      	bmi.n	800459c <__sflush_r+0xb8>
 80044f2:	684b      	ldr	r3, [r1, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	dc02      	bgt.n	80044fe <__sflush_r+0x1a>
 80044f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	dd48      	ble.n	8004590 <__sflush_r+0xac>
 80044fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004500:	2e00      	cmp	r6, #0
 8004502:	d045      	beq.n	8004590 <__sflush_r+0xac>
 8004504:	2300      	movs	r3, #0
 8004506:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800450a:	682f      	ldr	r7, [r5, #0]
 800450c:	6a21      	ldr	r1, [r4, #32]
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	d030      	beq.n	8004574 <__sflush_r+0x90>
 8004512:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	0759      	lsls	r1, r3, #29
 8004518:	d505      	bpl.n	8004526 <__sflush_r+0x42>
 800451a:	6863      	ldr	r3, [r4, #4]
 800451c:	1ad2      	subs	r2, r2, r3
 800451e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004520:	b10b      	cbz	r3, 8004526 <__sflush_r+0x42>
 8004522:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004524:	1ad2      	subs	r2, r2, r3
 8004526:	2300      	movs	r3, #0
 8004528:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800452a:	6a21      	ldr	r1, [r4, #32]
 800452c:	4628      	mov	r0, r5
 800452e:	47b0      	blx	r6
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	d106      	bne.n	8004544 <__sflush_r+0x60>
 8004536:	6829      	ldr	r1, [r5, #0]
 8004538:	291d      	cmp	r1, #29
 800453a:	d82b      	bhi.n	8004594 <__sflush_r+0xb0>
 800453c:	4a28      	ldr	r2, [pc, #160]	@ (80045e0 <__sflush_r+0xfc>)
 800453e:	410a      	asrs	r2, r1
 8004540:	07d6      	lsls	r6, r2, #31
 8004542:	d427      	bmi.n	8004594 <__sflush_r+0xb0>
 8004544:	2200      	movs	r2, #0
 8004546:	6062      	str	r2, [r4, #4]
 8004548:	04d9      	lsls	r1, r3, #19
 800454a:	6922      	ldr	r2, [r4, #16]
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	d504      	bpl.n	800455a <__sflush_r+0x76>
 8004550:	1c42      	adds	r2, r0, #1
 8004552:	d101      	bne.n	8004558 <__sflush_r+0x74>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	b903      	cbnz	r3, 800455a <__sflush_r+0x76>
 8004558:	6560      	str	r0, [r4, #84]	@ 0x54
 800455a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800455c:	602f      	str	r7, [r5, #0]
 800455e:	b1b9      	cbz	r1, 8004590 <__sflush_r+0xac>
 8004560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004564:	4299      	cmp	r1, r3
 8004566:	d002      	beq.n	800456e <__sflush_r+0x8a>
 8004568:	4628      	mov	r0, r5
 800456a:	f7ff fbf5 	bl	8003d58 <_free_r>
 800456e:	2300      	movs	r3, #0
 8004570:	6363      	str	r3, [r4, #52]	@ 0x34
 8004572:	e00d      	b.n	8004590 <__sflush_r+0xac>
 8004574:	2301      	movs	r3, #1
 8004576:	4628      	mov	r0, r5
 8004578:	47b0      	blx	r6
 800457a:	4602      	mov	r2, r0
 800457c:	1c50      	adds	r0, r2, #1
 800457e:	d1c9      	bne.n	8004514 <__sflush_r+0x30>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0c6      	beq.n	8004514 <__sflush_r+0x30>
 8004586:	2b1d      	cmp	r3, #29
 8004588:	d001      	beq.n	800458e <__sflush_r+0xaa>
 800458a:	2b16      	cmp	r3, #22
 800458c:	d11d      	bne.n	80045ca <__sflush_r+0xe6>
 800458e:	602f      	str	r7, [r5, #0]
 8004590:	2000      	movs	r0, #0
 8004592:	e021      	b.n	80045d8 <__sflush_r+0xf4>
 8004594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004598:	b21b      	sxth	r3, r3
 800459a:	e01a      	b.n	80045d2 <__sflush_r+0xee>
 800459c:	690f      	ldr	r7, [r1, #16]
 800459e:	2f00      	cmp	r7, #0
 80045a0:	d0f6      	beq.n	8004590 <__sflush_r+0xac>
 80045a2:	0793      	lsls	r3, r2, #30
 80045a4:	680e      	ldr	r6, [r1, #0]
 80045a6:	bf08      	it	eq
 80045a8:	694b      	ldreq	r3, [r1, #20]
 80045aa:	600f      	str	r7, [r1, #0]
 80045ac:	bf18      	it	ne
 80045ae:	2300      	movne	r3, #0
 80045b0:	1bf6      	subs	r6, r6, r7
 80045b2:	608b      	str	r3, [r1, #8]
 80045b4:	2e00      	cmp	r6, #0
 80045b6:	ddeb      	ble.n	8004590 <__sflush_r+0xac>
 80045b8:	6a21      	ldr	r1, [r4, #32]
 80045ba:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80045be:	4633      	mov	r3, r6
 80045c0:	463a      	mov	r2, r7
 80045c2:	4628      	mov	r0, r5
 80045c4:	47e0      	blx	ip
 80045c6:	2800      	cmp	r0, #0
 80045c8:	dc07      	bgt.n	80045da <__sflush_r+0xf6>
 80045ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045da:	4407      	add	r7, r0
 80045dc:	1a36      	subs	r6, r6, r0
 80045de:	e7e9      	b.n	80045b4 <__sflush_r+0xd0>
 80045e0:	dfbffffe 	.word	0xdfbffffe

080045e4 <_fflush_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	690b      	ldr	r3, [r1, #16]
 80045e8:	4605      	mov	r5, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	b913      	cbnz	r3, 80045f4 <_fflush_r+0x10>
 80045ee:	2500      	movs	r5, #0
 80045f0:	4628      	mov	r0, r5
 80045f2:	bd38      	pop	{r3, r4, r5, pc}
 80045f4:	b118      	cbz	r0, 80045fe <_fflush_r+0x1a>
 80045f6:	6a03      	ldr	r3, [r0, #32]
 80045f8:	b90b      	cbnz	r3, 80045fe <_fflush_r+0x1a>
 80045fa:	f7ff f9ab 	bl	8003954 <__sinit>
 80045fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f3      	beq.n	80045ee <_fflush_r+0xa>
 8004606:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004608:	07d0      	lsls	r0, r2, #31
 800460a:	d404      	bmi.n	8004616 <_fflush_r+0x32>
 800460c:	0599      	lsls	r1, r3, #22
 800460e:	d402      	bmi.n	8004616 <_fflush_r+0x32>
 8004610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004612:	f7ff fb9e 	bl	8003d52 <__retarget_lock_acquire_recursive>
 8004616:	4628      	mov	r0, r5
 8004618:	4621      	mov	r1, r4
 800461a:	f7ff ff63 	bl	80044e4 <__sflush_r>
 800461e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004620:	07da      	lsls	r2, r3, #31
 8004622:	4605      	mov	r5, r0
 8004624:	d4e4      	bmi.n	80045f0 <_fflush_r+0xc>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	059b      	lsls	r3, r3, #22
 800462a:	d4e1      	bmi.n	80045f0 <_fflush_r+0xc>
 800462c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800462e:	f7ff fb91 	bl	8003d54 <__retarget_lock_release_recursive>
 8004632:	e7dd      	b.n	80045f0 <_fflush_r+0xc>

08004634 <__swhatbuf_r>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	460c      	mov	r4, r1
 8004638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463c:	2900      	cmp	r1, #0
 800463e:	b096      	sub	sp, #88	@ 0x58
 8004640:	4615      	mov	r5, r2
 8004642:	461e      	mov	r6, r3
 8004644:	da0d      	bge.n	8004662 <__swhatbuf_r+0x2e>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800464c:	f04f 0100 	mov.w	r1, #0
 8004650:	bf14      	ite	ne
 8004652:	2340      	movne	r3, #64	@ 0x40
 8004654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004658:	2000      	movs	r0, #0
 800465a:	6031      	str	r1, [r6, #0]
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	b016      	add	sp, #88	@ 0x58
 8004660:	bd70      	pop	{r4, r5, r6, pc}
 8004662:	466a      	mov	r2, sp
 8004664:	f000 f87c 	bl	8004760 <_fstat_r>
 8004668:	2800      	cmp	r0, #0
 800466a:	dbec      	blt.n	8004646 <__swhatbuf_r+0x12>
 800466c:	9901      	ldr	r1, [sp, #4]
 800466e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004676:	4259      	negs	r1, r3
 8004678:	4159      	adcs	r1, r3
 800467a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800467e:	e7eb      	b.n	8004658 <__swhatbuf_r+0x24>

08004680 <__smakebuf_r>:
 8004680:	898b      	ldrh	r3, [r1, #12]
 8004682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004684:	079d      	lsls	r5, r3, #30
 8004686:	4606      	mov	r6, r0
 8004688:	460c      	mov	r4, r1
 800468a:	d507      	bpl.n	800469c <__smakebuf_r+0x1c>
 800468c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	6123      	str	r3, [r4, #16]
 8004694:	2301      	movs	r3, #1
 8004696:	6163      	str	r3, [r4, #20]
 8004698:	b003      	add	sp, #12
 800469a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469c:	ab01      	add	r3, sp, #4
 800469e:	466a      	mov	r2, sp
 80046a0:	f7ff ffc8 	bl	8004634 <__swhatbuf_r>
 80046a4:	9f00      	ldr	r7, [sp, #0]
 80046a6:	4605      	mov	r5, r0
 80046a8:	4639      	mov	r1, r7
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7ff fbc0 	bl	8003e30 <_malloc_r>
 80046b0:	b948      	cbnz	r0, 80046c6 <__smakebuf_r+0x46>
 80046b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b6:	059a      	lsls	r2, r3, #22
 80046b8:	d4ee      	bmi.n	8004698 <__smakebuf_r+0x18>
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	f043 0302 	orr.w	r3, r3, #2
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	e7e2      	b.n	800468c <__smakebuf_r+0xc>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	6020      	str	r0, [r4, #0]
 80046ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	9b01      	ldr	r3, [sp, #4]
 80046d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046d6:	b15b      	cbz	r3, 80046f0 <__smakebuf_r+0x70>
 80046d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 f851 	bl	8004784 <_isatty_r>
 80046e2:	b128      	cbz	r0, 80046f0 <__smakebuf_r+0x70>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	431d      	orrs	r5, r3
 80046f4:	81a5      	strh	r5, [r4, #12]
 80046f6:	e7cf      	b.n	8004698 <__smakebuf_r+0x18>

080046f8 <_putc_r>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	460d      	mov	r5, r1
 80046fc:	4614      	mov	r4, r2
 80046fe:	4606      	mov	r6, r0
 8004700:	b118      	cbz	r0, 800470a <_putc_r+0x12>
 8004702:	6a03      	ldr	r3, [r0, #32]
 8004704:	b90b      	cbnz	r3, 800470a <_putc_r+0x12>
 8004706:	f7ff f925 	bl	8003954 <__sinit>
 800470a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800470c:	07d8      	lsls	r0, r3, #31
 800470e:	d405      	bmi.n	800471c <_putc_r+0x24>
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	0599      	lsls	r1, r3, #22
 8004714:	d402      	bmi.n	800471c <_putc_r+0x24>
 8004716:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004718:	f7ff fb1b 	bl	8003d52 <__retarget_lock_acquire_recursive>
 800471c:	68a3      	ldr	r3, [r4, #8]
 800471e:	3b01      	subs	r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	da05      	bge.n	8004732 <_putc_r+0x3a>
 8004726:	69a2      	ldr	r2, [r4, #24]
 8004728:	4293      	cmp	r3, r2
 800472a:	db12      	blt.n	8004752 <_putc_r+0x5a>
 800472c:	b2eb      	uxtb	r3, r5
 800472e:	2b0a      	cmp	r3, #10
 8004730:	d00f      	beq.n	8004752 <_putc_r+0x5a>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	6022      	str	r2, [r4, #0]
 8004738:	701d      	strb	r5, [r3, #0]
 800473a:	b2ed      	uxtb	r5, r5
 800473c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800473e:	07da      	lsls	r2, r3, #31
 8004740:	d405      	bmi.n	800474e <_putc_r+0x56>
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	059b      	lsls	r3, r3, #22
 8004746:	d402      	bmi.n	800474e <_putc_r+0x56>
 8004748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800474a:	f7ff fb03 	bl	8003d54 <__retarget_lock_release_recursive>
 800474e:	4628      	mov	r0, r5
 8004750:	bd70      	pop	{r4, r5, r6, pc}
 8004752:	4629      	mov	r1, r5
 8004754:	4622      	mov	r2, r4
 8004756:	4630      	mov	r0, r6
 8004758:	f7ff f9ed 	bl	8003b36 <__swbuf_r>
 800475c:	4605      	mov	r5, r0
 800475e:	e7ed      	b.n	800473c <_putc_r+0x44>

08004760 <_fstat_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4d07      	ldr	r5, [pc, #28]	@ (8004780 <_fstat_r+0x20>)
 8004764:	2300      	movs	r3, #0
 8004766:	4604      	mov	r4, r0
 8004768:	4608      	mov	r0, r1
 800476a:	4611      	mov	r1, r2
 800476c:	602b      	str	r3, [r5, #0]
 800476e:	f7fc fba8 	bl	8000ec2 <_fstat>
 8004772:	1c43      	adds	r3, r0, #1
 8004774:	d102      	bne.n	800477c <_fstat_r+0x1c>
 8004776:	682b      	ldr	r3, [r5, #0]
 8004778:	b103      	cbz	r3, 800477c <_fstat_r+0x1c>
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	bd38      	pop	{r3, r4, r5, pc}
 800477e:	bf00      	nop
 8004780:	2000026c 	.word	0x2000026c

08004784 <_isatty_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4d06      	ldr	r5, [pc, #24]	@ (80047a0 <_isatty_r+0x1c>)
 8004788:	2300      	movs	r3, #0
 800478a:	4604      	mov	r4, r0
 800478c:	4608      	mov	r0, r1
 800478e:	602b      	str	r3, [r5, #0]
 8004790:	f7fc fba6 	bl	8000ee0 <_isatty>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_isatty_r+0x1a>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_isatty_r+0x1a>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	2000026c 	.word	0x2000026c

080047a4 <_sbrk_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d06      	ldr	r5, [pc, #24]	@ (80047c0 <_sbrk_r+0x1c>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fc fbac 	bl	8000f0c <_sbrk>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_sbrk_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_sbrk_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	2000026c 	.word	0x2000026c

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
