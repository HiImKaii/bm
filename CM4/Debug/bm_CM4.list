
bm_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046bc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  080047fc  080047fc  000057fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b70  08004b70  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004b70  08004b70  00005b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b78  08004b78  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b78  08004b78  00005b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b7c  08004b7c  00005b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004b80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  08004be8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004be8  0000627c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9f2  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281a  00000000  00000000  00013a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000162a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5c  00000000  00000000  00017340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd3f  00000000  00000000  00017f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ce7  00000000  00000000  00035cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b66b6  00000000  00000000  000469c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  000fd0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00101c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	080047e4 	.word	0x080047e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	080047e4 	.word	0x080047e4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <KeyExpansion>:
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
    0x6C, 0xD8, 0xAB, 0x4D, 0x9A
};


static void KeyExpansion(const uint8_t *key, uint8_t *RoundKey) {
 800022c:	b480      	push	{r7}
 800022e:	b087      	sub	sp, #28
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint8_t temp[4];

    for (i = 0; i < 8; ++i) {
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e030      	b.n	800029e <KeyExpansion+0x72>
        RoundKey[i * 4 + 0] = key[i * 4 + 0];
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	441a      	add	r2, r3
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	6839      	ldr	r1, [r7, #0]
 800024a:	440b      	add	r3, r1
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 1] = key[i * 4 + 1];
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	3301      	adds	r3, #1
 8000256:	687a      	ldr	r2, [r7, #4]
 8000258:	441a      	add	r2, r3
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	3301      	adds	r3, #1
 8000260:	6839      	ldr	r1, [r7, #0]
 8000262:	440b      	add	r3, r1
 8000264:	7812      	ldrb	r2, [r2, #0]
 8000266:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 2] = key[i * 4 + 2];
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	3302      	adds	r3, #2
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	441a      	add	r2, r3
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	3302      	adds	r3, #2
 8000278:	6839      	ldr	r1, [r7, #0]
 800027a:	440b      	add	r3, r1
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 3] = key[i * 4 + 3];
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	3303      	adds	r3, #3
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	441a      	add	r2, r3
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	3303      	adds	r3, #3
 8000290:	6839      	ldr	r1, [r7, #0]
 8000292:	440b      	add	r3, r1
 8000294:	7812      	ldrb	r2, [r2, #0]
 8000296:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; ++i) {
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	3301      	adds	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	d9cb      	bls.n	800023c <KeyExpansion+0x10>
    }

    for (i = 8; i < 60; ++i) {
 80002a4:	2308      	movs	r3, #8
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	e099      	b.n	80003de <KeyExpansion+0x1b2>
        temp[0] = RoundKey[(i - 1) * 4 + 0];
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	683a      	ldr	r2, [r7, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	733b      	strb	r3, [r7, #12]
        temp[1] = RoundKey[(i - 1) * 4 + 1];
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	3301      	adds	r3, #1
 80002c0:	683a      	ldr	r2, [r7, #0]
 80002c2:	4413      	add	r3, r2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	737b      	strb	r3, [r7, #13]
        temp[2] = RoundKey[(i - 1) * 4 + 2];
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	3302      	adds	r3, #2
 80002d0:	683a      	ldr	r2, [r7, #0]
 80002d2:	4413      	add	r3, r2
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	73bb      	strb	r3, [r7, #14]
        temp[3] = RoundKey[(i - 1) * 4 + 3];
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	3b01      	subs	r3, #1
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	3303      	adds	r3, #3
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	4413      	add	r3, r2
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	73fb      	strb	r3, [r7, #15]

        if (i % 8 == 0) {
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	f003 0307 	and.w	r3, r3, #7
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d11b      	bne.n	800032a <KeyExpansion+0xfe>
            uint8_t t = temp[0];
 80002f2:	7b3b      	ldrb	r3, [r7, #12]
 80002f4:	74fb      	strb	r3, [r7, #19]
            temp[0] = sbox[temp[1]] ^ Rcon[i / 8];
 80002f6:	7b7b      	ldrb	r3, [r7, #13]
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b3e      	ldr	r3, [pc, #248]	@ (80003f4 <KeyExpansion+0x1c8>)
 80002fc:	5c9a      	ldrb	r2, [r3, r2]
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	08db      	lsrs	r3, r3, #3
 8000302:	493d      	ldr	r1, [pc, #244]	@ (80003f8 <KeyExpansion+0x1cc>)
 8000304:	5ccb      	ldrb	r3, [r1, r3]
 8000306:	4053      	eors	r3, r2
 8000308:	b2db      	uxtb	r3, r3
 800030a:	733b      	strb	r3, [r7, #12]
            temp[1] = sbox[temp[2]];
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	461a      	mov	r2, r3
 8000310:	4b38      	ldr	r3, [pc, #224]	@ (80003f4 <KeyExpansion+0x1c8>)
 8000312:	5c9b      	ldrb	r3, [r3, r2]
 8000314:	737b      	strb	r3, [r7, #13]
            temp[2] = sbox[temp[3]];
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	461a      	mov	r2, r3
 800031a:	4b36      	ldr	r3, [pc, #216]	@ (80003f4 <KeyExpansion+0x1c8>)
 800031c:	5c9b      	ldrb	r3, [r3, r2]
 800031e:	73bb      	strb	r3, [r7, #14]
            temp[3] = sbox[t];
 8000320:	7cfb      	ldrb	r3, [r7, #19]
 8000322:	4a34      	ldr	r2, [pc, #208]	@ (80003f4 <KeyExpansion+0x1c8>)
 8000324:	5cd3      	ldrb	r3, [r2, r3]
 8000326:	73fb      	strb	r3, [r7, #15]
 8000328:	e018      	b.n	800035c <KeyExpansion+0x130>
        } else if (i % 8 == 4) {
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	f003 0307 	and.w	r3, r3, #7
 8000330:	2b04      	cmp	r3, #4
 8000332:	d113      	bne.n	800035c <KeyExpansion+0x130>
            temp[0] = sbox[temp[0]];
 8000334:	7b3b      	ldrb	r3, [r7, #12]
 8000336:	461a      	mov	r2, r3
 8000338:	4b2e      	ldr	r3, [pc, #184]	@ (80003f4 <KeyExpansion+0x1c8>)
 800033a:	5c9b      	ldrb	r3, [r3, r2]
 800033c:	733b      	strb	r3, [r7, #12]
            temp[1] = sbox[temp[1]];
 800033e:	7b7b      	ldrb	r3, [r7, #13]
 8000340:	461a      	mov	r2, r3
 8000342:	4b2c      	ldr	r3, [pc, #176]	@ (80003f4 <KeyExpansion+0x1c8>)
 8000344:	5c9b      	ldrb	r3, [r3, r2]
 8000346:	737b      	strb	r3, [r7, #13]
            temp[2] = sbox[temp[2]];
 8000348:	7bbb      	ldrb	r3, [r7, #14]
 800034a:	461a      	mov	r2, r3
 800034c:	4b29      	ldr	r3, [pc, #164]	@ (80003f4 <KeyExpansion+0x1c8>)
 800034e:	5c9b      	ldrb	r3, [r3, r2]
 8000350:	73bb      	strb	r3, [r7, #14]
            temp[3] = sbox[temp[3]];
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	461a      	mov	r2, r3
 8000356:	4b27      	ldr	r3, [pc, #156]	@ (80003f4 <KeyExpansion+0x1c8>)
 8000358:	5c9b      	ldrb	r3, [r3, r2]
 800035a:	73fb      	strb	r3, [r7, #15]
        }

        RoundKey[i * 4 + 0] = RoundKey[(i - 8) * 4 + 0] ^ temp[0];
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	3b08      	subs	r3, #8
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	683a      	ldr	r2, [r7, #0]
 8000364:	4413      	add	r3, r2
 8000366:	7819      	ldrb	r1, [r3, #0]
 8000368:	7b3a      	ldrb	r2, [r7, #12]
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	6838      	ldr	r0, [r7, #0]
 8000370:	4403      	add	r3, r0
 8000372:	404a      	eors	r2, r1
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 1] = RoundKey[(i - 8) * 4 + 1] ^ temp[1];
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	3b08      	subs	r3, #8
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	3301      	adds	r3, #1
 8000380:	683a      	ldr	r2, [r7, #0]
 8000382:	4413      	add	r3, r2
 8000384:	7819      	ldrb	r1, [r3, #0]
 8000386:	7b7a      	ldrb	r2, [r7, #13]
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	3301      	adds	r3, #1
 800038e:	6838      	ldr	r0, [r7, #0]
 8000390:	4403      	add	r3, r0
 8000392:	404a      	eors	r2, r1
 8000394:	b2d2      	uxtb	r2, r2
 8000396:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 2] = RoundKey[(i - 8) * 4 + 2] ^ temp[2];
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	3b08      	subs	r3, #8
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	3302      	adds	r3, #2
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	4413      	add	r3, r2
 80003a4:	7819      	ldrb	r1, [r3, #0]
 80003a6:	7bba      	ldrb	r2, [r7, #14]
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	3302      	adds	r3, #2
 80003ae:	6838      	ldr	r0, [r7, #0]
 80003b0:	4403      	add	r3, r0
 80003b2:	404a      	eors	r2, r1
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 3] = RoundKey[(i - 8) * 4 + 3] ^ temp[3];
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	3b08      	subs	r3, #8
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	3303      	adds	r3, #3
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	4413      	add	r3, r2
 80003c4:	7819      	ldrb	r1, [r3, #0]
 80003c6:	7bfa      	ldrb	r2, [r7, #15]
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	3303      	adds	r3, #3
 80003ce:	6838      	ldr	r0, [r7, #0]
 80003d0:	4403      	add	r3, r0
 80003d2:	404a      	eors	r2, r1
 80003d4:	b2d2      	uxtb	r2, r2
 80003d6:	701a      	strb	r2, [r3, #0]
    for (i = 8; i < 60; ++i) {
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	3301      	adds	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80003e2:	f67f af62 	bls.w	80002aa <KeyExpansion+0x7e>
    }
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	371c      	adds	r7, #28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	0800491c 	.word	0x0800491c
 80003f8:	08004b1c 	.word	0x08004b1c

080003fc <AddRoundKey>:

static void AddRoundKey(uint8_t *state, const uint8_t *RoundKey) {
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	e010      	b.n	800042e <AddRoundKey+0x32>
        state[i] ^= RoundKey[i];
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	7819      	ldrb	r1, [r3, #0]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	683a      	ldr	r2, [r7, #0]
 8000418:	4413      	add	r3, r2
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	4403      	add	r3, r0
 8000422:	404a      	eors	r2, r1
 8000424:	b2d2      	uxtb	r2, r2
 8000426:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3301      	adds	r3, #1
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b0f      	cmp	r3, #15
 8000432:	ddeb      	ble.n	800040c <AddRoundKey+0x10>
    }
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <SubBytes>:

static void SubBytes(uint8_t *state) {
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	e00d      	b.n	800046a <SubBytes+0x2a>
        state[i] = sbox[state[i]];
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	4413      	add	r3, r2
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	4619      	mov	r1, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	4a07      	ldr	r2, [pc, #28]	@ (800047c <SubBytes+0x3c>)
 8000460:	5c52      	ldrb	r2, [r2, r1]
 8000462:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3301      	adds	r3, #1
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2b0f      	cmp	r3, #15
 800046e:	ddee      	ble.n	800044e <SubBytes+0xe>
    }
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	0800491c 	.word	0x0800491c

08000480 <InvSubBytes>:

static void InvSubBytes(uint8_t *state) {
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e00d      	b.n	80004aa <InvSubBytes+0x2a>
        state[i] = rsbox[state[i]];
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	4413      	add	r3, r2
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	4a07      	ldr	r2, [pc, #28]	@ (80004bc <InvSubBytes+0x3c>)
 80004a0:	5c52      	ldrb	r2, [r2, r1]
 80004a2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3301      	adds	r3, #1
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	2b0f      	cmp	r3, #15
 80004ae:	ddee      	ble.n	800048e <InvSubBytes+0xe>
    }
}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	08004a1c 	.word	0x08004a1c

080004c0 <ShiftRows>:

static void ShiftRows(uint8_t *state) {
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    uint8_t temp;

    // Row 1
    temp = state[1];
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	785b      	ldrb	r3, [r3, #1]
 80004cc:	73fb      	strb	r3, [r7, #15]
    state[1] = state[5];
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3301      	adds	r3, #1
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	7952      	ldrb	r2, [r2, #5]
 80004d6:	701a      	strb	r2, [r3, #0]
    state[5] = state[9];
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3305      	adds	r3, #5
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	7a52      	ldrb	r2, [r2, #9]
 80004e0:	701a      	strb	r2, [r3, #0]
    state[9] = state[13];
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3309      	adds	r3, #9
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	7b52      	ldrb	r2, [r2, #13]
 80004ea:	701a      	strb	r2, [r3, #0]
    state[13] = temp;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	330d      	adds	r3, #13
 80004f0:	7bfa      	ldrb	r2, [r7, #15]
 80004f2:	701a      	strb	r2, [r3, #0]

    // Row 2
    temp = state[2];
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	789b      	ldrb	r3, [r3, #2]
 80004f8:	73fb      	strb	r3, [r7, #15]
    state[2] = state[10];
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3302      	adds	r3, #2
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	7a92      	ldrb	r2, [r2, #10]
 8000502:	701a      	strb	r2, [r3, #0]
    state[10] = temp;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	330a      	adds	r3, #10
 8000508:	7bfa      	ldrb	r2, [r7, #15]
 800050a:	701a      	strb	r2, [r3, #0]
    temp = state[6];
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	799b      	ldrb	r3, [r3, #6]
 8000510:	73fb      	strb	r3, [r7, #15]
    state[6] = state[14];
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3306      	adds	r3, #6
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	7b92      	ldrb	r2, [r2, #14]
 800051a:	701a      	strb	r2, [r3, #0]
    state[14] = temp;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	330e      	adds	r3, #14
 8000520:	7bfa      	ldrb	r2, [r7, #15]
 8000522:	701a      	strb	r2, [r3, #0]

    // Row 3
    temp = state[3];
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	78db      	ldrb	r3, [r3, #3]
 8000528:	73fb      	strb	r3, [r7, #15]
    state[3] = state[15];
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3303      	adds	r3, #3
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7bd2      	ldrb	r2, [r2, #15]
 8000532:	701a      	strb	r2, [r3, #0]
    state[15] = state[11];
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	330f      	adds	r3, #15
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7ad2      	ldrb	r2, [r2, #11]
 800053c:	701a      	strb	r2, [r3, #0]
    state[11] = state[7];
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	330b      	adds	r3, #11
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	79d2      	ldrb	r2, [r2, #7]
 8000546:	701a      	strb	r2, [r3, #0]
    state[7] = temp;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3307      	adds	r3, #7
 800054c:	7bfa      	ldrb	r2, [r7, #15]
 800054e:	701a      	strb	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <InvShiftRows>:

static void InvShiftRows(uint8_t *state) {
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
    uint8_t temp;

    // Row 1
    temp = state[13];
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7b5b      	ldrb	r3, [r3, #13]
 8000566:	73fb      	strb	r3, [r7, #15]
    state[13] = state[9];
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	330d      	adds	r3, #13
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	7a52      	ldrb	r2, [r2, #9]
 8000570:	701a      	strb	r2, [r3, #0]
    state[9] = state[5];
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3309      	adds	r3, #9
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7952      	ldrb	r2, [r2, #5]
 800057a:	701a      	strb	r2, [r3, #0]
    state[5] = state[1];
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3305      	adds	r3, #5
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7852      	ldrb	r2, [r2, #1]
 8000584:	701a      	strb	r2, [r3, #0]
    state[1] = temp;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3301      	adds	r3, #1
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	701a      	strb	r2, [r3, #0]

    // Row 2
    temp = state[2];
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	789b      	ldrb	r3, [r3, #2]
 8000592:	73fb      	strb	r3, [r7, #15]
    state[2] = state[10];
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3302      	adds	r3, #2
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7a92      	ldrb	r2, [r2, #10]
 800059c:	701a      	strb	r2, [r3, #0]
    state[10] = temp;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	330a      	adds	r3, #10
 80005a2:	7bfa      	ldrb	r2, [r7, #15]
 80005a4:	701a      	strb	r2, [r3, #0]
    temp = state[6];
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	799b      	ldrb	r3, [r3, #6]
 80005aa:	73fb      	strb	r3, [r7, #15]
    state[6] = state[14];
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3306      	adds	r3, #6
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7b92      	ldrb	r2, [r2, #14]
 80005b4:	701a      	strb	r2, [r3, #0]
    state[14] = temp;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	330e      	adds	r3, #14
 80005ba:	7bfa      	ldrb	r2, [r7, #15]
 80005bc:	701a      	strb	r2, [r3, #0]

    // Row 3
    temp = state[3];
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	78db      	ldrb	r3, [r3, #3]
 80005c2:	73fb      	strb	r3, [r7, #15]
    state[3] = state[7];
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3303      	adds	r3, #3
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	79d2      	ldrb	r2, [r2, #7]
 80005cc:	701a      	strb	r2, [r3, #0]
    state[7] = state[11];
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3307      	adds	r3, #7
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7ad2      	ldrb	r2, [r2, #11]
 80005d6:	701a      	strb	r2, [r3, #0]
    state[11] = state[15];
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	330b      	adds	r3, #11
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	7bd2      	ldrb	r2, [r2, #15]
 80005e0:	701a      	strb	r2, [r3, #0]
    state[15] = temp;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	330f      	adds	r3, #15
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	701a      	strb	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <MixColumns>:

static void MixColumns(uint8_t *state) {
 80005f4:	b480      	push	{r7}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    // Implementation of MixColumns step
    for (int i = 0; i < 4; ++i) {
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e072      	b.n	80006e8 <MixColumns+0xf4>
        uint8_t *col = &state[i * 4];
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	613b      	str	r3, [r7, #16]
        uint8_t a[4] = {col[0], col[1], col[2], col[3]};
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	733b      	strb	r3, [r7, #12]
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	737b      	strb	r3, [r7, #13]
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	78db      	ldrb	r3, [r3, #3]
 8000624:	73fb      	strb	r3, [r7, #15]
        col[0] = (uint8_t)(0x02 * a[0] ^ 0x03 * a[1] ^ a[2] ^ a[3]);
 8000626:	7b3b      	ldrb	r3, [r7, #12]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	b25a      	sxtb	r2, r3
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	4619      	mov	r1, r3
 8000632:	0049      	lsls	r1, r1, #1
 8000634:	440b      	add	r3, r1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	b25b      	sxtb	r3, r3
 800063a:	4053      	eors	r3, r2
 800063c:	b25a      	sxtb	r2, r3
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	b25b      	sxtb	r3, r3
 8000642:	4053      	eors	r3, r2
 8000644:	b25a      	sxtb	r2, r3
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	4053      	eors	r3, r2
 800064c:	b25b      	sxtb	r3, r3
 800064e:	b2da      	uxtb	r2, r3
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	701a      	strb	r2, [r3, #0]
        col[1] = (uint8_t)(a[0] ^ 0x02 * a[1] ^ 0x03 * a[2] ^ a[3]);
 8000654:	7b3b      	ldrb	r3, [r7, #12]
 8000656:	b25a      	sxtb	r2, r3
 8000658:	7b7b      	ldrb	r3, [r7, #13]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	b25b      	sxtb	r3, r3
 8000660:	4053      	eors	r3, r2
 8000662:	b25a      	sxtb	r2, r3
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	4619      	mov	r1, r3
 8000668:	0049      	lsls	r1, r1, #1
 800066a:	440b      	add	r3, r1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	b25b      	sxtb	r3, r3
 8000670:	4053      	eors	r3, r2
 8000672:	b25a      	sxtb	r2, r3
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	b25b      	sxtb	r3, r3
 8000678:	4053      	eors	r3, r2
 800067a:	b25a      	sxtb	r2, r3
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3301      	adds	r3, #1
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
        col[2] = (uint8_t)(a[0] ^ a[1] ^ 0x02 * a[2] ^ 0x03 * a[3]);
 8000684:	7b3a      	ldrb	r2, [r7, #12]
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	4053      	eors	r3, r2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	b25a      	sxtb	r2, r3
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	b25b      	sxtb	r3, r3
 8000696:	4053      	eors	r3, r2
 8000698:	b25a      	sxtb	r2, r3
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4619      	mov	r1, r3
 800069e:	0049      	lsls	r1, r1, #1
 80006a0:	440b      	add	r3, r1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	4053      	eors	r3, r2
 80006a8:	b25a      	sxtb	r2, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	3302      	adds	r3, #2
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	701a      	strb	r2, [r3, #0]
        col[3] = (uint8_t)(0x03 * a[0] ^ a[1] ^ a[2] ^ 0x02 * a[3]);
 80006b2:	7b3b      	ldrb	r3, [r7, #12]
 80006b4:	461a      	mov	r2, r3
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	b25a      	sxtb	r2, r3
 80006be:	7b7b      	ldrb	r3, [r7, #13]
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4053      	eors	r3, r2
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	4053      	eors	r3, r2
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	4053      	eors	r3, r2
 80006d8:	b25a      	sxtb	r2, r3
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	3303      	adds	r3, #3
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3301      	adds	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	dd89      	ble.n	8000602 <MixColumns+0xe>
    }
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	371c      	adds	r7, #28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <InvMixColumns>:

static void InvMixColumns(uint8_t *state) {
 80006fa:	b480      	push	{r7}
 80006fc:	b087      	sub	sp, #28
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    // Implementation of inverse MixColumns step
    for (int i = 0; i < 4; ++i) {
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	e0af      	b.n	8000868 <InvMixColumns+0x16e>
        uint8_t *col = &state[i * 4];
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	461a      	mov	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        uint8_t a[4] = {col[0], col[1], col[2], col[3]};
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	733b      	strb	r3, [r7, #12]
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	785b      	ldrb	r3, [r3, #1]
 800071e:	737b      	strb	r3, [r7, #13]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	73bb      	strb	r3, [r7, #14]
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	78db      	ldrb	r3, [r3, #3]
 800072a:	73fb      	strb	r3, [r7, #15]
        col[0] = (uint8_t)(0x0e * a[0] ^ 0x0b * a[1] ^ 0x0d * a[2] ^ 0x09 * a[3]);
 800072c:	7b3b      	ldrb	r3, [r7, #12]
 800072e:	461a      	mov	r2, r3
 8000730:	00d2      	lsls	r2, r2, #3
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	b25a      	sxtb	r2, r3
 800073a:	7b7b      	ldrb	r3, [r7, #13]
 800073c:	4619      	mov	r1, r3
 800073e:	0089      	lsls	r1, r1, #2
 8000740:	4419      	add	r1, r3
 8000742:	0049      	lsls	r1, r1, #1
 8000744:	440b      	add	r3, r1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	b25b      	sxtb	r3, r3
 800074a:	4053      	eors	r3, r2
 800074c:	b25a      	sxtb	r2, r3
 800074e:	7bbb      	ldrb	r3, [r7, #14]
 8000750:	4619      	mov	r1, r3
 8000752:	0049      	lsls	r1, r1, #1
 8000754:	4419      	add	r1, r3
 8000756:	0089      	lsls	r1, r1, #2
 8000758:	440b      	add	r3, r1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	b25b      	sxtb	r3, r3
 800075e:	4053      	eors	r3, r2
 8000760:	b25a      	sxtb	r2, r3
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	4619      	mov	r1, r3
 8000766:	00c9      	lsls	r1, r1, #3
 8000768:	440b      	add	r3, r1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4053      	eors	r3, r2
 8000770:	b25b      	sxtb	r3, r3
 8000772:	b2da      	uxtb	r2, r3
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	701a      	strb	r2, [r3, #0]
        col[1] = (uint8_t)(0x09 * a[0] ^ 0x0e * a[1] ^ 0x0b * a[2] ^ 0x0d * a[3]);
 8000778:	7b3b      	ldrb	r3, [r7, #12]
 800077a:	461a      	mov	r2, r3
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	4413      	add	r3, r2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	b25a      	sxtb	r2, r3
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	4619      	mov	r1, r3
 8000788:	00c9      	lsls	r1, r1, #3
 800078a:	1acb      	subs	r3, r1, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	b2db      	uxtb	r3, r3
 8000790:	b25b      	sxtb	r3, r3
 8000792:	4053      	eors	r3, r2
 8000794:	b25a      	sxtb	r2, r3
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	4619      	mov	r1, r3
 800079a:	0089      	lsls	r1, r1, #2
 800079c:	4419      	add	r1, r3
 800079e:	0049      	lsls	r1, r1, #1
 80007a0:	440b      	add	r3, r1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	4053      	eors	r3, r2
 80007a8:	b25a      	sxtb	r2, r3
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	4619      	mov	r1, r3
 80007ae:	0049      	lsls	r1, r1, #1
 80007b0:	4419      	add	r1, r3
 80007b2:	0089      	lsls	r1, r1, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	4053      	eors	r3, r2
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	701a      	strb	r2, [r3, #0]
        col[2] = (uint8_t)(0x0d * a[0] ^ 0x09 * a[1] ^ 0x0e * a[2] ^ 0x0b * a[3]);
 80007c6:	7b3b      	ldrb	r3, [r7, #12]
 80007c8:	461a      	mov	r2, r3
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	441a      	add	r2, r3
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	7b7b      	ldrb	r3, [r7, #13]
 80007d8:	4619      	mov	r1, r3
 80007da:	00c9      	lsls	r1, r1, #3
 80007dc:	440b      	add	r3, r1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	4053      	eors	r3, r2
 80007e4:	b25a      	sxtb	r2, r3
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	4619      	mov	r1, r3
 80007ea:	00c9      	lsls	r1, r1, #3
 80007ec:	1acb      	subs	r3, r1, r3
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	4053      	eors	r3, r2
 80007f6:	b25a      	sxtb	r2, r3
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	4619      	mov	r1, r3
 80007fc:	0089      	lsls	r1, r1, #2
 80007fe:	4419      	add	r1, r3
 8000800:	0049      	lsls	r1, r1, #1
 8000802:	440b      	add	r3, r1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	b25b      	sxtb	r3, r3
 8000808:	4053      	eors	r3, r2
 800080a:	b25a      	sxtb	r2, r3
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	3302      	adds	r3, #2
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	701a      	strb	r2, [r3, #0]
        col[3] = (uint8_t)(0x0b * a[0] ^ 0x0d * a[1] ^ 0x09 * a[2] ^ 0x0e * a[3]);
 8000814:	7b3b      	ldrb	r3, [r7, #12]
 8000816:	461a      	mov	r2, r3
 8000818:	0092      	lsls	r2, r2, #2
 800081a:	441a      	add	r2, r3
 800081c:	0052      	lsls	r2, r2, #1
 800081e:	4413      	add	r3, r2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	b25a      	sxtb	r2, r3
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	4619      	mov	r1, r3
 8000828:	0049      	lsls	r1, r1, #1
 800082a:	4419      	add	r1, r3
 800082c:	0089      	lsls	r1, r1, #2
 800082e:	440b      	add	r3, r1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	b25b      	sxtb	r3, r3
 8000834:	4053      	eors	r3, r2
 8000836:	b25a      	sxtb	r2, r3
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	4619      	mov	r1, r3
 800083c:	00c9      	lsls	r1, r1, #3
 800083e:	440b      	add	r3, r1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	b25b      	sxtb	r3, r3
 8000844:	4053      	eors	r3, r2
 8000846:	b25a      	sxtb	r2, r3
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	4619      	mov	r1, r3
 800084c:	00c9      	lsls	r1, r1, #3
 800084e:	1acb      	subs	r3, r1, r3
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	b25b      	sxtb	r3, r3
 8000856:	4053      	eors	r3, r2
 8000858:	b25a      	sxtb	r2, r3
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	3303      	adds	r3, #3
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b03      	cmp	r3, #3
 800086c:	f77f af4c 	ble.w	8000708 <InvMixColumns+0xe>
    }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	371c      	adds	r7, #28
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <AES_Init>:

void AES_Init(AES_Context *ctx, const uint8_t *key) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    KeyExpansion(key, ctx->RoundKey);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4619      	mov	r1, r3
 800088a:	6838      	ldr	r0, [r7, #0]
 800088c:	f7ff fcce 	bl	800022c <KeyExpansion>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <AES_Encrypt>:

void AES_Encrypt(AES_Context *ctx, uint8_t *input, uint8_t *output) {
 8000898:	b5b0      	push	{r4, r5, r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
    uint8_t state[AES_BLOCK_SIZE];
    memcpy(state, input, AES_BLOCK_SIZE);
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	f107 0414 	add.w	r4, r7, #20
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	6859      	ldr	r1, [r3, #4]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    AddRoundKey(state, ctx->RoundKey);
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fd9d 	bl	80003fc <AddRoundKey>

    for (int round = 1; round < 14; ++round) {
 80008c2:	2301      	movs	r3, #1
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80008c6:	e01b      	b.n	8000900 <AES_Encrypt+0x68>
        SubBytes(state);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fdb7 	bl	8000440 <SubBytes>
        ShiftRows(state);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fdf2 	bl	80004c0 <ShiftRows>
        MixColumns(state);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe87 	bl	80005f4 <MixColumns>
        AddRoundKey(state, ctx->RoundKey + round * AES_BLOCK_SIZE);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008ea:	0112      	lsls	r2, r2, #4
 80008ec:	441a      	add	r2, r3
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fd81 	bl	80003fc <AddRoundKey>
    for (int round = 1; round < 14; ++round) {
 80008fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fc:	3301      	adds	r3, #1
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000902:	2b0d      	cmp	r3, #13
 8000904:	dde0      	ble.n	80008c8 <AES_Encrypt+0x30>
    }

    SubBytes(state);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fd98 	bl	8000440 <SubBytes>
    ShiftRows(state);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fdd3 	bl	80004c0 <ShiftRows>
    AddRoundKey(state, ctx->RoundKey + 14 * AES_BLOCK_SIZE);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fd68 	bl	80003fc <AddRoundKey>

    memcpy(output, state, AES_BLOCK_SIZE);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	461d      	mov	r5, r3
 8000930:	f107 0414 	add.w	r4, r7, #20
 8000934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000936:	6028      	str	r0, [r5, #0]
 8000938:	6069      	str	r1, [r5, #4]
 800093a:	60aa      	str	r2, [r5, #8]
 800093c:	60eb      	str	r3, [r5, #12]
}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	@ 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bdb0      	pop	{r4, r5, r7, pc}

08000946 <AES_Decrypt>:

void AES_Decrypt(AES_Context *ctx, uint8_t *input, uint8_t *output) {
 8000946:	b5b0      	push	{r4, r5, r7, lr}
 8000948:	b08a      	sub	sp, #40	@ 0x28
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
    uint8_t state[AES_BLOCK_SIZE];
    memcpy(state, input, AES_BLOCK_SIZE);
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	f107 0414 	add.w	r4, r7, #20
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	6859      	ldr	r1, [r3, #4]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    AddRoundKey(state, ctx->RoundKey + 14 * AES_BLOCK_SIZE);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fd44 	bl	80003fc <AddRoundKey>

    for (int round = 13; round > 0; --round) {
 8000974:	230d      	movs	r3, #13
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
 8000978:	e01b      	b.n	80009b2 <AES_Decrypt+0x6c>
        InvShiftRows(state);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fdeb 	bl	800055a <InvShiftRows>
        InvSubBytes(state);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fd79 	bl	8000480 <InvSubBytes>
        AddRoundKey(state, ctx->RoundKey + round * AES_BLOCK_SIZE);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	441a      	add	r2, r3
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fd2d 	bl	80003fc <AddRoundKey>
        InvMixColumns(state);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fea7 	bl	80006fa <InvMixColumns>
    for (int round = 13; round > 0; --round) {
 80009ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ae:	3b01      	subs	r3, #1
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	dce0      	bgt.n	800097a <AES_Decrypt+0x34>
    }

    InvShiftRows(state);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fdcc 	bl	800055a <InvShiftRows>
    InvSubBytes(state);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd5a 	bl	8000480 <InvSubBytes>
    AddRoundKey(state, ctx->RoundKey);
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fd11 	bl	80003fc <AddRoundKey>

    memcpy(output, state, AES_BLOCK_SIZE);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	461d      	mov	r5, r3
 80009de:	f107 0414 	add.w	r4, r7, #20
 80009e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e4:	6028      	str	r0, [r5, #0]
 80009e6:	6069      	str	r1, [r5, #4]
 80009e8:	60aa      	str	r2, [r5, #8]
 80009ea:	60eb      	str	r3, [r5, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bdb0      	pop	{r4, r5, r7, pc}

080009f4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a18:	68fb      	ldr	r3, [r7, #12]
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b5b0      	push	{r4, r5, r7, lr}
 8000a26:	b0d4      	sub	sp, #336	@ 0x150
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

    AES_Context ctx;
    bool is_done = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f

    // Example 256-bit key
    uint8_t key[AES_KEY_SIZE] = {
 8000a30:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a34:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000a38:	4a4e      	ldr	r2, [pc, #312]	@ (8000b74 <main+0x150>)
 8000a3a:	461c      	mov	r4, r3
 8000a3c:	4615      	mov	r5, r2
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
        0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
    };

    // Example plaintext (16 bytes)
    uint8_t plaintext[AES_BLOCK_SIZE] = {
 8000a4a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a4e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000a52:	4a49      	ldr	r2, [pc, #292]	@ (8000b78 <main+0x154>)
 8000a54:	461c      	mov	r4, r3
 8000a56:	4613      	mov	r3, r2
 8000a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uint8_t encrypted[AES_BLOCK_SIZE];
    uint8_t decrypted[AES_BLOCK_SIZE];

    // Initialize AES context with the key
    AES_Init(&ctx, key);
 8000a5e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000a62:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff07 	bl	800087c <AES_Init>

    // Encrypt the plaintext
    AES_Encrypt(&ctx, plaintext, encrypted);
 8000a6e:	f107 0210 	add.w	r2, r7, #16
 8000a72:	f107 0120 	add.w	r1, r7, #32
 8000a76:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff0c 	bl	8000898 <AES_Encrypt>

    // Decrypt the ciphertext
    AES_Decrypt(&ctx, encrypted, decrypted);
 8000a80:	463a      	mov	r2, r7
 8000a82:	f107 0110 	add.w	r1, r7, #16
 8000a86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff5b 	bl	8000946 <AES_Decrypt>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f000 fabe 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f87a 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f000 f918 	bl	8000ccc <MX_GPIO_Init>
  MX_USART2_Init();
 8000a9c:	f000 f8ca 	bl	8000c34 <MX_USART2_Init>
//  {
//    Error_Handler();
//  }

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 fde7 	bl	8001674 <HAL_PWREx_ReleaseCore>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000aa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aaa:	f000 fb27 	bl	80010fc <HAL_Delay>

    /* USER CODE BEGIN 3 */
//	  printf("Hello \n");
	  if (!is_done)
 8000aae:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8000ab2:	f083 0301 	eor.w	r3, r3, #1
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f4      	beq.n	8000aa6 <main+0x82>
	  {
	    printf("Plaintext: \n");
 8000abc:	482f      	ldr	r0, [pc, #188]	@ (8000b7c <main+0x158>)
 8000abe:	f002 ffff 	bl	8003ac0 <puts>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000ac8:	e010      	b.n	8000aec <main+0xc8>
	        printf("%02x ", plaintext[i]);
 8000aca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000ace:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 8000ad2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4619      	mov	r1, r3
 8000adc:	4828      	ldr	r0, [pc, #160]	@ (8000b80 <main+0x15c>)
 8000ade:	f002 ff7f 	bl	80039e0 <iprintf>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000ae2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000aec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	ddea      	ble.n	8000aca <main+0xa6>
	    }
	    printf("\n\nEncrypted: \n");
 8000af4:	4823      	ldr	r0, [pc, #140]	@ (8000b84 <main+0x160>)
 8000af6:	f002 ffe3 	bl	8003ac0 <puts>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8000b00:	e010      	b.n	8000b24 <main+0x100>
	        printf("%02x ", encrypted[i]);
 8000b02:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000b06:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8000b0a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000b0e:	4413      	add	r3, r2
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4619      	mov	r1, r3
 8000b14:	481a      	ldr	r0, [pc, #104]	@ (8000b80 <main+0x15c>)
 8000b16:	f002 ff63 	bl	80039e0 <iprintf>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000b1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8000b24:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	ddea      	ble.n	8000b02 <main+0xde>
	    }
	    printf("\n\nDecrypted: \n");
 8000b2c:	4816      	ldr	r0, [pc, #88]	@ (8000b88 <main+0x164>)
 8000b2e:	f002 ffc7 	bl	8003ac0 <puts>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8000b38:	e010      	b.n	8000b5c <main+0x138>
	        printf("%02x ", decrypted[i]);
 8000b3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000b3e:	f5a3 72a8 	sub.w	r2, r3, #336	@ 0x150
 8000b42:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000b46:	4413      	add	r3, r2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <main+0x15c>)
 8000b4e:	f002 ff47 	bl	80039e0 <iprintf>
	    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000b52:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000b56:	3301      	adds	r3, #1
 8000b58:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8000b5c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	ddea      	ble.n	8000b3a <main+0x116>
	    }
	    printf("\n");
 8000b64:	200a      	movs	r0, #10
 8000b66:	f002 ff4d 	bl	8003a04 <putchar>
	    is_done = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
	  HAL_Delay(1000);
 8000b70:	e799      	b.n	8000aa6 <main+0x82>
 8000b72:	bf00      	nop
 8000b74:	08004830 	.word	0x08004830
 8000b78:	08004850 	.word	0x08004850
 8000b7c:	080047fc 	.word	0x080047fc
 8000b80:	08004808 	.word	0x08004808
 8000b84:	08004810 	.word	0x08004810
 8000b88:	08004820 	.word	0x08004820

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09a      	sub	sp, #104	@ 0x68
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0320 	add.w	r3, r7, #32
 8000b96:	2248      	movs	r2, #72	@ 0x48
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 f870 	bl	8003c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <SystemClock_Config+0xa4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bba:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <SystemClock_Config+0xa4>)
 8000bbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <SystemClock_Config+0xa4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bda:	2360      	movs	r3, #96	@ 0x60
 8000bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 f806 	bl	8001bf8 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bf2:	f000 f875 	bl	8000ce0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000bf6:	236f      	movs	r3, #111	@ 0x6f
 8000bf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 fb70 	bl	80022fc <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c22:	f000 f85d 	bl	8000ce0 <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3768      	adds	r7, #104	@ 0x68
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	58000400 	.word	0x58000400

08000c34 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000c38:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c3a:	4a23      	ldr	r2, [pc, #140]	@ (8000cc8 <MX_USART2_Init+0x94>)
 8000c3c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000c64:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c70:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c76:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000c7c:	4811      	ldr	r0, [pc, #68]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c7e:	f002 f829 	bl	8002cd4 <HAL_USART_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8000c88:	f000 f82a 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000c90:	f002 fd1f 	bl	80036d2 <HAL_USARTEx_SetTxFifoThreshold>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8000c9a:	f000 f821 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000ca2:	f002 fd54 	bl	800374e <HAL_USARTEx_SetRxFifoThreshold>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8000cac:	f000 f818 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <MX_USART2_Init+0x90>)
 8000cb2:	f002 fcd6 	bl	8003662 <HAL_USARTEx_DisableFifoMode>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART2_Init+0x8c>
  {
    Error_Handler();
 8000cbc:	f000 f810 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000084 	.word	0x20000084
 8000cc8:	40004400 	.word	0x40004400

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	2004      	movs	r0, #4
 8000cd2:	f7ff fe8f 	bl	80009f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f7ff fe8c 	bl	80009f4 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <Error_Handler+0x8>

08000cec <_write>:
}
#endif /* USE_FULL_ASSERT */


#if defined(__GNUC__)
int _write(int fd, char * ptr, int len) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  HAL_USART_Transmit( & husart2, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <_write+0x28>)
 8000d04:	f002 f840 	bl	8002d88 <HAL_USART_Transmit>
  return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000084 	.word	0x20000084

08000d18 <LL_AHB2_GRP1_EnableClock>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b096      	sub	sp, #88	@ 0x58
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2238      	movs	r2, #56	@ 0x38
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 ff6b 	bl	8003c80 <memset>
  if(husart->Instance==USART2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <HAL_USART_MspInit+0x88>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d126      	bne.n	8000e02 <HAL_USART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000db8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000dbc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fe5a 	bl	8002a7c <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8000dce:	f7ff ff87 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000dd6:	f7ff ffb7 	bl	8000d48 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff ff9c 	bl	8000d18 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_4;
 8000de0:	231c      	movs	r3, #28
 8000de2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df0:	2307      	movs	r3, #7
 8000df2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfe:	f000 fab1 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	3758      	adds	r7, #88	@ 0x58
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004400 	.word	0x40004400

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f930 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW1);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f000 f8bd 	bl	8000fec <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW2);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 f8b6 	bl	8000fec <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW3);
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f000 f8af 	bl	8000fec <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e00a      	b.n	8000eba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	60ba      	str	r2, [r7, #8]
 8000eb0:	b2ca      	uxtb	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	dbf0      	blt.n	8000ea4 <_read+0x12>
  }

  return len;
 8000ec2:	687b      	ldr	r3, [r7, #4]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ef2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <_isatty>:

int _isatty(int file)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	@ (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f002 fede 	bl	8003d1c <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20008000 	.word	0x20008000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	20000110 	.word	0x20000110
 8000f94:	20000280 	.word	0x20000280

08000f98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f98:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f9c:	f7ff f940 	bl	8000220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	@ (8000fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe4 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fc6:	f002 feaf 	bl	8003d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fca:	f7ff fd2b 	bl	8000a24 <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   r0, =_estack
 8000fd0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fdc:	08004b80 	.word	0x08004b80
  ldr r2, =_sbss
 8000fe0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fe4:	2000027c 	.word	0x2000027c

08000fe8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>
	...

08000fec <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <BSP_PB_IRQHandler+0x20>)
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f981 	bl	8001306 <HAL_EXTI_IRQHandler>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000114 	.word	0x20000114

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 f942 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001020:	f001 fb4e 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8001024:	4603      	mov	r3, r0
 8001026:	4a09      	ldr	r2, [pc, #36]	@ (800104c <HAL_Init+0x3c>)
 8001028:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f810 	bl	8001050 <HAL_InitTick>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	e001      	b.n	8001040 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103c:	f7ff fe9c 	bl	8000d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001040:	79fb      	ldrb	r3, [r7, #7]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d024      	beq.n	80010ae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001064:	f001 fb2c 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8001068:	4602      	mov	r2, r0
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <HAL_InitTick+0x6c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001074:	fbb3 f3f1 	udiv	r3, r3, r1
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f936 	bl	80012ee <HAL_SYSTICK_Config>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10f      	bne.n	80010a8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	d809      	bhi.n	80010a2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108e:	2200      	movs	r2, #0
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	f000 f910 	bl	80012ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109a:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <HAL_InitTick+0x70>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e004      	b.n	80010b2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <HAL_IncTick+0x1c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <HAL_IncTick+0x20>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a03      	ldr	r2, [pc, #12]	@ (80010e4 <HAL_IncTick+0x20>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000008 	.word	0x20000008
 80010e4:	2000012c 	.word	0x2000012c

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b02      	ldr	r3, [pc, #8]	@ (80010f8 <HAL_GetTick+0x10>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	2000012c 	.word	0x2000012c

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff fff0 	bl	80010e8 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffe0 	bl	80010e8 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	@ (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff90 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff49 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff60 	bl	800118c <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff92 	bl	80011fc <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff61 	bl	80011a8 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffb2 	bl	8001260 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0c1b      	lsrs	r3, r3, #16
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	2201      	movs	r2, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	015b      	lsls	r3, r3, #5
 800132e:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8001332:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8001336:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4798      	blx	r3
    }
  }
}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e140      	b.n	80015f6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8132 	beq.w	80015f0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d005      	beq.n	80013a4 <HAL_GPIO_Init+0x40>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d130      	bne.n	8001406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013da:	2201      	movs	r2, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	f003 0201 	and.w	r2, r3, #1
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b03      	cmp	r3, #3
 8001410:	d017      	beq.n	8001442 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d123      	bne.n	8001496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	6939      	ldr	r1, [r7, #16]
 8001492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0203 	and.w	r2, r3, #3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 808c 	beq.w	80015f0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80014d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001614 <HAL_GPIO_Init+0x2b0>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	2207      	movs	r2, #7
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001502:	d00d      	beq.n	8001520 <HAL_GPIO_Init+0x1bc>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a44      	ldr	r2, [pc, #272]	@ (8001618 <HAL_GPIO_Init+0x2b4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d007      	beq.n	800151c <HAL_GPIO_Init+0x1b8>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a43      	ldr	r2, [pc, #268]	@ (800161c <HAL_GPIO_Init+0x2b8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_GPIO_Init+0x1b4>
 8001514:	2302      	movs	r3, #2
 8001516:	e004      	b.n	8001522 <HAL_GPIO_Init+0x1be>
 8001518:	2307      	movs	r3, #7
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x1be>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_GPIO_Init+0x1be>
 8001520:	2300      	movs	r3, #0
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4093      	lsls	r3, r2
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001532:	4938      	ldr	r1, [pc, #224]	@ (8001614 <HAL_GPIO_Init+0x2b0>)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001540:	4b37      	ldr	r3, [pc, #220]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001564:	4a2e      	ldr	r2, [pc, #184]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800156a:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800158e:	4a24      	ldr	r2, [pc, #144]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001594:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 8001596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800159a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80015ba:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 80015c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015c8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	f47f aeb7 	bne.w	8001374 <HAL_GPIO_Init+0x10>
  }
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	371c      	adds	r7, #28
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40010000 	.word	0x40010000
 8001618:	48000400 	.word	0x48000400
 800161c:	48000800 	.word	0x48000800
 8001620:	58000800 	.word	0x58000800

08001624 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <HAL_PWR_EnableBkUpAccess+0x18>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a03      	ldr	r2, [pc, #12]	@ (800163c <HAL_PWR_EnableBkUpAccess+0x18>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	58000400 	.word	0x58000400

08001640 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <LL_PWR_EnableBootC2+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a03      	ldr	r2, [pc, #12]	@ (8001658 <LL_PWR_EnableBootC2+0x18>)
 800164a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	58000400 	.word	0x58000400

0800165c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001660:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <HAL_PWREx_GetVoltageRange+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	58000400 	.word	0x58000400

08001674 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 800167c:	f7ff ffe0 	bl	8001640 <LL_PWR_EnableBootC2>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001698:	d101      	bne.n	800169e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	58000400 	.word	0x58000400

080016ac <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016f6:	d101      	bne.n	80016fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800170a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001734:	6013      	str	r3, [r2, #0]
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001750:	d101      	bne.n	8001756 <LL_RCC_HSE_IsReady+0x18>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <LL_RCC_HSE_IsReady+0x1a>
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800178a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017aa:	d101      	bne.n	80017b0 <LL_RCC_HSI_IsReady+0x18>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <LL_RCC_HSI_IsReady+0x1a>
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	061b      	lsls	r3, r3, #24
 80017d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80017e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d101      	bne.n	80017fa <LL_RCC_LSE_IsReady+0x18>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <LL_RCC_LSE_IsReady+0x1a>
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800180c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001830:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b02      	cmp	r3, #2
 8001856:	d101      	bne.n	800185c <LL_RCC_LSI_IsReady+0x18>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <LL_RCC_LSI_IsReady+0x1a>
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800186a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6013      	str	r3, [r2, #0]
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6013      	str	r3, [r2, #0]
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d101      	bne.n	80018b4 <LL_RCC_MSI_IsReady+0x16>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <LL_RCC_MSI_IsReady+0x18>
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d101      	bne.n	80018d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001900:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f023 0203 	bic.w	r2, r3, #3
 8001946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001982:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019d0:	f023 020f 	bic.w	r2, r3, #15
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019dc:	4313      	orrs	r3, r2
 80019de:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ade:	d101      	bne.n	8001ae4 <LL_RCC_PLL_IsReady+0x18>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <LL_RCC_PLL_IsReady+0x1a>
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5a:	d101      	bne.n	8001b60 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b7e:	d101      	bne.n	8001b84 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b96:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba2:	d101      	bne.n	8001ba8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bc4:	d101      	bne.n	8001bca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001be2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001be6:	d101      	bne.n	8001bec <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e36f      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0a:	f7ff fea6 	bl	800195a <LL_RCC_GetSysClkSource>
 8001c0e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	f7ff ff8f 	bl	8001b32 <LL_RCC_PLL_GetMainSource>
 8001c14:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80c4 	beq.w	8001dac <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x3e>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	2b0c      	cmp	r3, #12
 8001c2e:	d176      	bne.n	8001d1e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d173      	bne.n	8001d1e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e353      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_OscConfig+0x68>
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c5e:	e006      	b.n	8001c6e <HAL_RCC_OscConfig+0x76>
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d222      	bcs.n	8001cb8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fd5a 	bl	8002730 <RCC_SetFlashLatencyFromMSIRange>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e331      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fe2b 	bl	800190c <LL_RCC_MSI_SetCalibTrimming>
 8001cb6:	e021      	b.n	8001cfc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fe12 	bl	800190c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fd1f 	bl	8002730 <RCC_SetFlashLatencyFromMSIRange>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e2f6      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cfc:	f000 fce0 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4aa7      	ldr	r2, [pc, #668]	@ (8001fa0 <HAL_RCC_OscConfig+0x3a8>)
 8001d04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001d06:	4ba7      	ldr	r3, [pc, #668]	@ (8001fa4 <HAL_RCC_OscConfig+0x3ac>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f9a0 	bl	8001050 <HAL_InitTick>
 8001d10:	4603      	mov	r3, r0
 8001d12:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d047      	beq.n	8001daa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001d1a:	7cfb      	ldrb	r3, [r7, #19]
 8001d1c:	e2e5      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d02c      	beq.n	8001d80 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d26:	f7ff fd9e 	bl	8001866 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff f9dd 	bl	80010e8 <HAL_GetTick>
 8001d2e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d32:	f7ff f9d9 	bl	80010e8 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e2d2      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d44:	f7ff fdab 	bl	800189e <LL_RCC_MSI_IsReady>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f1      	beq.n	8001d32 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d58:	f043 0308 	orr.w	r3, r3, #8
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fdc7 	bl	800190c <LL_RCC_MSI_SetCalibTrimming>
 8001d7e:	e015      	b.n	8001dac <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d80:	f7ff fd7f 	bl	8001882 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d84:	f7ff f9b0 	bl	80010e8 <HAL_GetTick>
 8001d88:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f9ac 	bl	80010e8 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e2a5      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d9e:	f7ff fd7e 	bl	800189e <LL_RCC_MSI_IsReady>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f1      	bne.n	8001d8c <HAL_RCC_OscConfig+0x194>
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001daa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d058      	beq.n	8001e6a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d005      	beq.n	8001dca <HAL_RCC_OscConfig+0x1d2>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b0c      	cmp	r3, #12
 8001dc2:	d108      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d105      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d14b      	bne.n	8001e6a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e289      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_OscConfig+0x204>
 8001df6:	f7ff fc86 	bl	8001706 <LL_RCC_HSE_Enable>
 8001dfa:	e00d      	b.n	8001e18 <HAL_RCC_OscConfig+0x220>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001e04:	d104      	bne.n	8001e10 <HAL_RCC_OscConfig+0x218>
 8001e06:	f7ff fc51 	bl	80016ac <LL_RCC_HSE_EnableTcxo>
 8001e0a:	f7ff fc7c 	bl	8001706 <LL_RCC_HSE_Enable>
 8001e0e:	e003      	b.n	8001e18 <HAL_RCC_OscConfig+0x220>
 8001e10:	f7ff fc87 	bl	8001722 <LL_RCC_HSE_Disable>
 8001e14:	f7ff fc58 	bl	80016c8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d012      	beq.n	8001e46 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff f962 	bl	80010e8 <HAL_GetTick>
 8001e24:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff f95e 	bl	80010e8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	@ 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e257      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e3a:	f7ff fc80 	bl	800173e <LL_RCC_HSE_IsReady>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f1      	beq.n	8001e28 <HAL_RCC_OscConfig+0x230>
 8001e44:	e011      	b.n	8001e6a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff f94f 	bl	80010e8 <HAL_GetTick>
 8001e4a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4e:	f7ff f94b 	bl	80010e8 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b64      	cmp	r3, #100	@ 0x64
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e244      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e60:	f7ff fc6d 	bl	800173e <LL_RCC_HSE_IsReady>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f1      	bne.n	8001e4e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d046      	beq.n	8001f04 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_OscConfig+0x290>
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d10e      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d10b      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e22a      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fc8e 	bl	80017ba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e9e:	e031      	b.n	8001f04 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d019      	beq.n	8001edc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea8:	f7ff fc5a 	bl	8001760 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff f91c 	bl	80010e8 <HAL_GetTick>
 8001eb0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7ff f918 	bl	80010e8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e211      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ec6:	f7ff fc67 	bl	8001798 <LL_RCC_HSI_IsReady>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f1      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fc70 	bl	80017ba <LL_RCC_HSI_SetCalibTrimming>
 8001eda:	e013      	b.n	8001f04 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001edc:	f7ff fc4e 	bl	800177c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f902 	bl	80010e8 <HAL_GetTick>
 8001ee4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff f8fe 	bl	80010e8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1f7      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001efa:	f7ff fc4d 	bl	8001798 <LL_RCC_HSI_IsReady>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f1      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d06e      	beq.n	8001fee <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d056      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f20:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d031      	beq.n	8001f94 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e1d0      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d013      	beq.n	8001f7a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f52:	f7ff fc67 	bl	8001824 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f56:	f7ff f8c7 	bl	80010e8 <HAL_GetTick>
 8001f5a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5e:	f7ff f8c3 	bl	80010e8 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b11      	cmp	r3, #17
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1bc      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f70:	f7ff fc68 	bl	8001844 <LL_RCC_LSI_IsReady>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f1      	bne.n	8001f5e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f82:	f023 0210 	bic.w	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f94:	f7ff fc36 	bl	8001804 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7ff f8a6 	bl	80010e8 <HAL_GetTick>
 8001f9c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f9e:	e00c      	b.n	8001fba <HAL_RCC_OscConfig+0x3c2>
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7ff f89e 	bl	80010e8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b11      	cmp	r3, #17
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e197      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001fba:	f7ff fc43 	bl	8001844 <LL_RCC_LSI_IsReady>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f1      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x3b0>
 8001fc4:	e013      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc6:	f7ff fc2d 	bl	8001824 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7ff f88d 	bl	80010e8 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f889 	bl	80010e8 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b11      	cmp	r3, #17
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e182      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001fe4:	f7ff fc2e 	bl	8001844 <LL_RCC_LSI_IsReady>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f1      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80d8 	beq.w	80021ac <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ffc:	f7ff fb44 	bl	8001688 <LL_PWR_IsEnabledBkUpAccess>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d113      	bne.n	800202e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002006:	f7ff fb0d 	bl	8001624 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200a:	f7ff f86d 	bl	80010e8 <HAL_GetTick>
 800200e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7ff f869 	bl	80010e8 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e162      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002024:	f7ff fb30 	bl	8001688 <LL_PWR_IsEnabledBkUpAccess>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f1      	beq.n	8002012 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d07b      	beq.n	800212e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b85      	cmp	r3, #133	@ 0x85
 800203c:	d003      	beq.n	8002046 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b05      	cmp	r3, #5
 8002044:	d109      	bne.n	800205a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7ff f845 	bl	80010e8 <HAL_GetTick>
 800205e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002068:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff f837 	bl	80010e8 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e12e      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800208c:	f7ff fba9 	bl	80017e2 <LL_RCC_LSE_IsReady>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0ef      	beq.n	8002076 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b81      	cmp	r3, #129	@ 0x81
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b85      	cmp	r3, #133	@ 0x85
 80020a4:	d121      	bne.n	80020ea <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff f81f 	bl	80010e8 <HAL_GetTick>
 80020aa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff f811 	bl	80010e8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e108      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ec      	beq.n	80020c2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80020e8:	e060      	b.n	80021ac <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7fe fffd 	bl	80010e8 <HAL_GetTick>
 80020ee:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7fe ffef 	bl	80010e8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0e6      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ec      	bne.n	8002106 <HAL_RCC_OscConfig+0x50e>
 800212c:	e03e      	b.n	80021ac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7fe ffdb 	bl	80010e8 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002140:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe ffcd 	bl	80010e8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0c4      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ec      	bne.n	800214a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002170:	f7fe ffba 	bl	80010e8 <HAL_GetTick>
 8002174:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe ffac 	bl	80010e8 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0a3      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80021a2:	f7ff fb1e 	bl	80017e2 <LL_RCC_LSE_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ef      	bne.n	800218c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8099 	beq.w	80022e8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d06c      	beq.n	8002296 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d14b      	bne.n	800225c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	f7ff fc74 	bl	8001ab0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff8e 	bl	80010e8 <HAL_GetTick>
 80021cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe ff8a 	bl	80010e8 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b0a      	cmp	r3, #10
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e083      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80021e2:	f7ff fc73 	bl	8001acc <LL_RCC_PLL_IsReady>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f1      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4b40      	ldr	r3, [pc, #256]	@ (80022f4 <HAL_RCC_OscConfig+0x6fc>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002204:	0212      	lsls	r2, r2, #8
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800220c:	4311      	orrs	r1, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002218:	430a      	orrs	r2, r1
 800221a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800221e:	4313      	orrs	r3, r2
 8002220:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002222:	f7ff fc37 	bl	8001a94 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002234:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe ff57 	bl	80010e8 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe ff53 	bl	80010e8 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b0a      	cmp	r3, #10
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e04c      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002250:	f7ff fc3c 	bl	8001acc <LL_RCC_PLL_IsReady>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f1      	beq.n	800223e <HAL_RCC_OscConfig+0x646>
 800225a:	e045      	b.n	80022e8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	f7ff fc28 	bl	8001ab0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe ff42 	bl	80010e8 <HAL_GetTick>
 8002264:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe ff3e 	bl	80010e8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b0a      	cmp	r3, #10
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e037      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800227a:	f7ff fc27 	bl	8001acc <LL_RCC_PLL_IsReady>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f1      	bne.n	8002268 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800228e:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <HAL_RCC_OscConfig+0x700>)
 8002290:	4013      	ands	r3, r2
 8002292:	60cb      	str	r3, [r1, #12]
 8002294:	e028      	b.n	80022e8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e023      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f003 0203 	and.w	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d115      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d10e      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	11c1808c 	.word	0x11c1808c
 80022f8:	eefefffc 	.word	0xeefefffc

080022fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e12c      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b98      	ldr	r3, [pc, #608]	@ (8002574 <HAL_RCC_ClockConfig+0x278>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d91b      	bls.n	8002356 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b95      	ldr	r3, [pc, #596]	@ (8002574 <HAL_RCC_ClockConfig+0x278>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4993      	ldr	r1, [pc, #588]	@ (8002574 <HAL_RCC_ClockConfig+0x278>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232e:	f7fe fedb 	bl	80010e8 <HAL_GetTick>
 8002332:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002334:	e008      	b.n	8002348 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002336:	f7fe fed7 	bl	80010e8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e110      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002348:	4b8a      	ldr	r3, [pc, #552]	@ (8002574 <HAL_RCC_ClockConfig+0x278>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d1ef      	bne.n	8002336 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fb02 	bl	8001970 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800236c:	f7fe febc 	bl	80010e8 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002374:	f7fe feb8 	bl	80010e8 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0f1      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002386:	f7ff fbdf 	bl	8001b48 <LL_RCC_IsActiveFlag_HPRE>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f1      	beq.n	8002374 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d016      	beq.n	80023ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff faf8 	bl	8001996 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fe9f 	bl	80010e8 <HAL_GetTick>
 80023aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ae:	f7fe fe9b 	bl	80010e8 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0d4      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023c0:	f7ff fbd3 	bl	8001b6a <LL_RCC_IsActiveFlag_C2HPRE>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f1      	beq.n	80023ae <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff faf0 	bl	80019c0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fe82 	bl	80010e8 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023e8:	f7fe fe7e 	bl	80010e8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0b7      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023fa:	f7ff fbc8 	bl	8001b8e <LL_RCC_IsActiveFlag_SHDHPRE>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f1      	beq.n	80023e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d016      	beq.n	800243e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fae9 	bl	80019ec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800241a:	f7fe fe65 	bl	80010e8 <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002422:	f7fe fe61 	bl	80010e8 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e09a      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002434:	f7ff fbbd 	bl	8001bb2 <LL_RCC_IsActiveFlag_PPRE1>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f1      	beq.n	8002422 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d017      	beq.n	800247a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fade 	bl	8001a12 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002456:	f7fe fe47 	bl	80010e8 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800245e:	f7fe fe43 	bl	80010e8 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e07c      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002470:	f7ff fbb0 	bl	8001bd4 <LL_RCC_IsActiveFlag_PPRE2>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f1      	beq.n	800245e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d043      	beq.n	800250e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d106      	bne.n	800249c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800248e:	f7ff f956 	bl	800173e <LL_RCC_HSE_IsReady>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d11e      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e066      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80024a4:	f7ff fb12 	bl	8001acc <LL_RCC_PLL_IsReady>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d113      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e05b      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80024ba:	f7ff f9f0 	bl	800189e <LL_RCC_MSI_IsReady>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d108      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e050      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80024c8:	f7ff f966 	bl	8001798 <LL_RCC_HSI_IsReady>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e049      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fa2a 	bl	8001934 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fe02 	bl	80010e8 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7fe fdfe 	bl	80010e8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e035      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	f7ff fa2c 	bl	800195a <LL_RCC_GetSysClkSource>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	429a      	cmp	r2, r3
 800250c:	d1ec      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250e:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <HAL_RCC_ClockConfig+0x278>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d21b      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251c:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_RCC_ClockConfig+0x278>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 0207 	bic.w	r2, r3, #7
 8002524:	4913      	ldr	r1, [pc, #76]	@ (8002574 <HAL_RCC_ClockConfig+0x278>)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800252c:	f7fe fddc 	bl	80010e8 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	e008      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002534:	f7fe fdd8 	bl	80010e8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e011      	b.n	800256a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_RCC_ClockConfig+0x278>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d1ef      	bne.n	8002534 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002554:	f000 f8b4 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8002558:	4603      	mov	r3, r0
 800255a:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <HAL_RCC_ClockConfig+0x27c>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800255e:	4b07      	ldr	r3, [pc, #28]	@ (800257c <HAL_RCC_ClockConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fd74 	bl	8001050 <HAL_InitTick>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	58004000 	.word	0x58004000
 8002578:	20000000 	.word	0x20000000
 800257c:	20000004 	.word	0x20000004

08002580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258e:	f7ff f9e4 	bl	800195a <LL_RCC_GetSysClkSource>
 8002592:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002594:	f7ff facd 	bl	8001b32 <LL_RCC_PLL_GetMainSource>
 8002598:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x2c>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d139      	bne.n	800261a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d136      	bne.n	800261a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80025ac:	f7ff f987 	bl	80018be <LL_RCC_MSI_IsEnabledRangeSelect>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d115      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x62>
 80025b6:	f7ff f982 	bl	80018be <LL_RCC_MSI_IsEnabledRangeSelect>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x4e>
 80025c0:	f7ff f98d 	bl	80018de <LL_RCC_MSI_GetRange>
 80025c4:	4603      	mov	r3, r0
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	e005      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x5a>
 80025ce:	f7ff f991 	bl	80018f4 <LL_RCC_MSI_GetRangeAfterStandby>
 80025d2:	4603      	mov	r3, r0
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	4a36      	ldr	r2, [pc, #216]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x134>)
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	e014      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x8c>
 80025e2:	f7ff f96c 	bl	80018be <LL_RCC_MSI_IsEnabledRangeSelect>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x7a>
 80025ec:	f7ff f977 	bl	80018de <LL_RCC_MSI_GetRange>
 80025f0:	4603      	mov	r3, r0
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	e005      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x86>
 80025fa:	f7ff f97b 	bl	80018f4 <LL_RCC_MSI_GetRangeAfterStandby>
 80025fe:	4603      	mov	r3, r0
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	4a2b      	ldr	r2, [pc, #172]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d115      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002618:	e012      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b04      	cmp	r3, #4
 800261e:	d102      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002620:	4b25      	ldr	r3, [pc, #148]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	e00c      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d109      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800262c:	f7ff f85a 	bl	80016e4 <LL_RCC_HSE_IsEnabledDiv2>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002636:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e001      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800263c:	4b1f      	ldr	r3, [pc, #124]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x13c>)
 800263e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002640:	f7ff f98b 	bl	800195a <LL_RCC_GetSysClkSource>
 8002644:	4603      	mov	r3, r0
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d12f      	bne.n	80026aa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800264a:	f7ff fa72 	bl	8001b32 <LL_RCC_PLL_GetMainSource>
 800264e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0xde>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d003      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0xe4>
 800265c:	e00d      	b.n	800267a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800265e:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002660:	60fb      	str	r3, [r7, #12]
        break;
 8002662:	e00d      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002664:	f7ff f83e 	bl	80016e4 <LL_RCC_HSE_IsEnabledDiv2>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002670:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002672:	e005      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002674:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002676:	60fb      	str	r3, [r7, #12]
        break;
 8002678:	e002      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	60fb      	str	r3, [r7, #12]
        break;
 800267e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002680:	f7ff fa35 	bl	8001aee <LL_RCC_PLL_GetN>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	fb03 f402 	mul.w	r4, r3, r2
 800268c:	f7ff fa46 	bl	8001b1c <LL_RCC_PLL_GetDivider>
 8002690:	4603      	mov	r3, r0
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	3301      	adds	r3, #1
 8002696:	fbb4 f4f3 	udiv	r4, r4, r3
 800269a:	f7ff fa34 	bl	8001b06 <LL_RCC_PLL_GetR>
 800269e:	4603      	mov	r3, r0
 80026a0:	0f5b      	lsrs	r3, r3, #29
 80026a2:	3301      	adds	r3, #1
 80026a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80026a8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80026aa:	697b      	ldr	r3, [r7, #20]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	080048dc 	.word	0x080048dc
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	01e84800 	.word	0x01e84800

080026c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c0:	b598      	push	{r3, r4, r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80026c4:	f7ff ff5c 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 80026c8:	4604      	mov	r4, r0
 80026ca:	f7ff f9b5 	bl	8001a38 <LL_RCC_GetAHBPrescaler>
 80026ce:	4603      	mov	r3, r0
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	4a03      	ldr	r2, [pc, #12]	@ (80026e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80026d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd98      	pop	{r3, r4, r7, pc}
 80026e4:	0800487c 	.word	0x0800487c

080026e8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b598      	push	{r3, r4, r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026ec:	f7ff ffe8 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 80026f0:	4604      	mov	r4, r0
 80026f2:	f7ff f9b9 	bl	8001a68 <LL_RCC_GetAPB1Prescaler>
 80026f6:	4603      	mov	r3, r0
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	4a03      	ldr	r2, [pc, #12]	@ (8002708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd98      	pop	{r3, r4, r7, pc}
 8002708:	080048bc 	.word	0x080048bc

0800270c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800270c:	b598      	push	{r3, r4, r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002710:	f7ff ffd6 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8002714:	4604      	mov	r4, r0
 8002716:	f7ff f9b2 	bl	8001a7e <LL_RCC_GetAPB2Prescaler>
 800271a:	4603      	mov	r3, r0
 800271c:	0adb      	lsrs	r3, r3, #11
 800271e:	4a03      	ldr	r2, [pc, #12]	@ (800272c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002724:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd98      	pop	{r3, r4, r7, pc}
 800272c:	080048bc 	.word	0x080048bc

08002730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	4a10      	ldr	r2, [pc, #64]	@ (8002784 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002746:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002748:	f7ff f981 	bl	8001a4e <LL_RCC_GetAHB3Prescaler>
 800274c:	4603      	mov	r3, r0
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	4a0c      	ldr	r2, [pc, #48]	@ (8002788 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4a09      	ldr	r2, [pc, #36]	@ (800278c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9c      	lsrs	r4, r3, #18
 800276c:	f7fe ff76 	bl	800165c <HAL_PWREx_GetVoltageRange>
 8002770:	4603      	mov	r3, r0
 8002772:	4619      	mov	r1, r3
 8002774:	4620      	mov	r0, r4
 8002776:	f000 f80b 	bl	8002790 <RCC_SetFlashLatency>
 800277a:	4603      	mov	r3, r0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}
 8002784:	080048dc 	.word	0x080048dc
 8002788:	0800487c 	.word	0x0800487c
 800278c:	431bde83 	.word	0x431bde83

08002790 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08e      	sub	sp, #56	@ 0x38
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800279a:	4a3a      	ldr	r2, [pc, #232]	@ (8002884 <RCC_SetFlashLatency+0xf4>)
 800279c:	f107 0320 	add.w	r3, r7, #32
 80027a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a4:	6018      	str	r0, [r3, #0]
 80027a6:	3304      	adds	r3, #4
 80027a8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80027aa:	4a37      	ldr	r2, [pc, #220]	@ (8002888 <RCC_SetFlashLatency+0xf8>)
 80027ac:	f107 0318 	add.w	r3, r7, #24
 80027b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b4:	6018      	str	r0, [r3, #0]
 80027b6:	3304      	adds	r3, #4
 80027b8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80027ba:	4a34      	ldr	r2, [pc, #208]	@ (800288c <RCC_SetFlashLatency+0xfc>)
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027c6:	2300      	movs	r3, #0
 80027c8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d0:	d11b      	bne.n	800280a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80027d6:	e014      	b.n	8002802 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	3338      	adds	r3, #56	@ 0x38
 80027de:	443b      	add	r3, r7
 80027e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d807      	bhi.n	80027fc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3338      	adds	r3, #56	@ 0x38
 80027f2:	443b      	add	r3, r7
 80027f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80027fa:	e021      	b.n	8002840 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fe:	3301      	adds	r3, #1
 8002800:	633b      	str	r3, [r7, #48]	@ 0x30
 8002802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002804:	2b02      	cmp	r3, #2
 8002806:	d9e7      	bls.n	80027d8 <RCC_SetFlashLatency+0x48>
 8002808:	e01a      	b.n	8002840 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800280a:	2300      	movs	r3, #0
 800280c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800280e:	e014      	b.n	800283a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	3338      	adds	r3, #56	@ 0x38
 8002816:	443b      	add	r3, r7
 8002818:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800281c:	461a      	mov	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4293      	cmp	r3, r2
 8002822:	d807      	bhi.n	8002834 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	3338      	adds	r3, #56	@ 0x38
 800282a:	443b      	add	r3, r7
 800282c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002830:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002832:	e005      	b.n	8002840 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002836:	3301      	adds	r3, #1
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800283a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283c:	2b02      	cmp	r3, #2
 800283e:	d9e7      	bls.n	8002810 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002840:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <RCC_SetFlashLatency+0x100>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 0207 	bic.w	r2, r3, #7
 8002848:	4911      	ldr	r1, [pc, #68]	@ (8002890 <RCC_SetFlashLatency+0x100>)
 800284a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002850:	f7fe fc4a 	bl	80010e8 <HAL_GetTick>
 8002854:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002856:	e008      	b.n	800286a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002858:	f7fe fc46 	bl	80010e8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e007      	b.n	800287a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <RCC_SetFlashLatency+0x100>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002874:	429a      	cmp	r2, r3
 8002876:	d1ef      	bne.n	8002858 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3738      	adds	r7, #56	@ 0x38
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	08004860 	.word	0x08004860
 8002888:	08004868 	.word	0x08004868
 800288c:	08004870 	.word	0x08004870
 8002890:	58004000 	.word	0x58004000

08002894 <LL_RCC_LSE_IsReady>:
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d101      	bne.n	80028ac <LL_RCC_LSE_IsReady+0x18>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <LL_RCC_LSE_IsReady+0x1a>
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_SetUSARTClockSource>:
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	43db      	mvns	r3, r3
 80028cc:	401a      	ands	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_SetI2SClockSource>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <LL_RCC_SetLPUARTClockSource>:
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002924:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <LL_RCC_SetI2CClockSource>:
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002946:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002952:	43db      	mvns	r3, r3
 8002954:	401a      	ands	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800295e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <LL_RCC_SetLPTIMClockSource>:
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0c1b      	lsrs	r3, r3, #16
 8002986:	041b      	lsls	r3, r3, #16
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_RCC_SetRNGClockSource>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_SetADCClockSource>:
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_SetRTCClockSource>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_GetRTCClockSource>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_ForceBackupDomainReset>:
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002a88:	2300      	movs	r3, #0
 8002a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d058      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002a9c:	f7fe fdc2 	bl	8001624 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fb22 	bl	80010e8 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002aa6:	e009      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa8:	f7fe fb1e 	bl	80010e8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8002aba:	e006      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002abc:	4b7b      	ldr	r3, [pc, #492]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac8:	d1ee      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d13c      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002ad0:	f7ff ffa7 	bl	8002a22 <LL_RCC_GetRTCClockSource>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d00f      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aec:	f7ff ffa5 	bl	8002a3a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002af0:	f7ff ffb3 	bl	8002a5a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d014      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe faee 	bl	80010e8 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7fe faea 	bl	80010e8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d902      	bls.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	74fb      	strb	r3, [r7, #19]
            break;
 8002b26:	e004      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002b28:	f7ff feb4 	bl	8002894 <LL_RCC_LSE_IsReady>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d1ee      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff5b 	bl	80029f8 <LL_RCC_SetRTCClockSource>
 8002b42:	e004      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
 8002b48:	e001      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fea9 	bl	80028b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fe9e 	bl	80028b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fec0 	bl	8002910 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fee6 	bl	8002972 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fedb 	bl	8002972 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fed0 	bl	8002972 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fea9 	bl	800293a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fe9e 	bl	800293a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d004      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fe93 	bl	800293a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d011      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fe5e 	bl	80028e6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c32:	d107      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d010      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fea5 	bl	80029a4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d107      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d011      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fea3 	bl	80029ce <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002ca2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	58000400 	.word	0x58000400

08002cb0 <LL_RCC_GetUSARTClockSource>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	4313      	orrs	r3, r2
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e04a      	b.n	8002d7c <HAL_USART_Init+0xa8>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d114      	bne.n	8002d1c <HAL_USART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    USART_InitCallbacksToDefault(husart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f92c 	bl	8002f58 <USART_InitCallbacksToDefault>

    if (husart->MspInitCallback == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_USART_Init+0x3e>
    {
      husart->MspInitCallback = HAL_USART_MspInit;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d84 <HAL_USART_Init+0xb0>)
 8002d0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f97d 	bl	8003034 <USART_SetConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_USART_Init+0x70>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e01b      	b.n	8002d7c <HAL_USART_Init+0xa8>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d52:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d62:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fc1f 	bl	80035b8 <USART_CheckIdleState>
 8002d7a:	4603      	mov	r3, r0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	08000d85 	.word	0x08000d85

08002d88 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	@ 0x28
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f040 8095 	bne.w	8002ed0 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_USART_Transmit+0x2a>
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e08d      	b.n	8002ed2 <HAL_USART_Transmit+0x14a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Process Locked */
    __HAL_LOCK(husart);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_USART_Transmit+0x3c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e086      	b.n	8002ed2 <HAL_USART_Transmit+0x14a>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2212      	movs	r2, #18
 8002dd6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dda:	f7fe f985 	bl	80010e8 <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	88fa      	ldrh	r2, [r7, #6]
 8002de4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    husart->TxXferCount = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	88fa      	ldrh	r2, [r7, #6]
 8002dea:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df4:	d108      	bne.n	8002e08 <HAL_USART_Transmit+0x80>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	e003      	b.n	8002e10 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002e10:	e02a      	b.n	8002e68 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2180      	movs	r1, #128	@ 0x80
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f8d3 	bl	8002fc8 <USART_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e052      	b.n	8002ed2 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e40:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3302      	adds	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e007      	b.n	8002e5a <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3301      	adds	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (husart->TxXferCount > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1cf      	bne.n	8002e12 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2140      	movs	r1, #64	@ 0x40
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f8a3 	bl	8002fc8 <USART_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e022      	b.n	8002ed2 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2240      	movs	r2, #64	@ 0x40
 8002e92:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0208 	orr.w	r2, r2, #8
 8002eaa:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0210 	orr.w	r2, r2, #16
 8002eba:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <HAL_USART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback can be implemented in the user file.
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_USART_RxHalfCpltCallback>:
  * @brief Rx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_RxHalfCpltCallback can be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <HAL_USART_AbortCpltCallback>:
  * @brief  USART Abort Complete callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <USART_InitCallbacksToDefault>:
  * @param  husart USART handle.
  * @retval none
  */
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
void USART_InitCallbacksToDefault(USART_HandleTypeDef *husart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Init the USART Callback settings */
  husart->TxHalfCpltCallback        = HAL_USART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a10      	ldr	r2, [pc, #64]	@ (8002fa4 <USART_InitCallbacksToDefault+0x4c>)
 8002f64:	661a      	str	r2, [r3, #96]	@ 0x60
  husart->TxCpltCallback            = HAL_USART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a0f      	ldr	r2, [pc, #60]	@ (8002fa8 <USART_InitCallbacksToDefault+0x50>)
 8002f6a:	665a      	str	r2, [r3, #100]	@ 0x64
  husart->RxHalfCpltCallback        = HAL_USART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fac <USART_InitCallbacksToDefault+0x54>)
 8002f70:	669a      	str	r2, [r3, #104]	@ 0x68
  husart->RxCpltCallback            = HAL_USART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb0 <USART_InitCallbacksToDefault+0x58>)
 8002f76:	66da      	str	r2, [r3, #108]	@ 0x6c
  husart->TxRxCpltCallback          = HAL_USART_TxRxCpltCallback;          /* Legacy weak TxRxCpltCallback          */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb4 <USART_InitCallbacksToDefault+0x5c>)
 8002f7c:	671a      	str	r2, [r3, #112]	@ 0x70
  husart->ErrorCallback             = HAL_USART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <USART_InitCallbacksToDefault+0x60>)
 8002f82:	675a      	str	r2, [r3, #116]	@ 0x74
  husart->AbortCpltCallback         = HAL_USART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <USART_InitCallbacksToDefault+0x64>)
 8002f88:	679a      	str	r2, [r3, #120]	@ 0x78
  husart->RxFifoFullCallback        = HAL_USARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <USART_InitCallbacksToDefault+0x68>)
 8002f8e:	67da      	str	r2, [r3, #124]	@ 0x7c
  husart->TxFifoEmptyCallback       = HAL_USARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc4 <USART_InitCallbacksToDefault+0x6c>)
 8002f94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	08002eed 	.word	0x08002eed
 8002fa8:	08002edb 	.word	0x08002edb
 8002fac:	08002f11 	.word	0x08002f11
 8002fb0:	08002eff 	.word	0x08002eff
 8002fb4:	08002f23 	.word	0x08002f23
 8002fb8:	08002f35 	.word	0x08002f35
 8002fbc:	08002f47 	.word	0x08002f47
 8002fc0:	0800363f 	.word	0x0800363f
 8002fc4:	08003651 	.word	0x08003651

08002fc8 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002fd8:	e018      	b.n	800300c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d014      	beq.n	800300c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe f881 	bl	80010e8 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <USART_WaitOnFlagUntilTimeout+0x30>
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e00f      	b.n	800302c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	d0d7      	beq.n	8002fda <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003058:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4ba1      	ldr	r3, [pc, #644]	@ (80032e8 <USART_SetConfig+0x2b4>)
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	430b      	orrs	r3, r1
 800306c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800306e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003072:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4313      	orrs	r3, r2
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030a2:	f023 0309 	bic.w	r3, r3, #9
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	6979      	ldr	r1, [r7, #20]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	f023 010f 	bic.w	r1, r3, #15
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a88      	ldr	r2, [pc, #544]	@ (80032ec <USART_SetConfig+0x2b8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d122      	bne.n	8003116 <USART_SetConfig+0xe2>
 80030d0:	2003      	movs	r0, #3
 80030d2:	f7ff fded 	bl	8002cb0 <LL_RCC_GetUSARTClockSource>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d817      	bhi.n	8003110 <USART_SetConfig+0xdc>
 80030e0:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <USART_SetConfig+0xb4>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	080030f9 	.word	0x080030f9
 80030ec:	08003105 	.word	0x08003105
 80030f0:	080030ff 	.word	0x080030ff
 80030f4:	0800310b 	.word	0x0800310b
 80030f8:	2301      	movs	r3, #1
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e047      	b.n	800318e <USART_SetConfig+0x15a>
 80030fe:	2302      	movs	r3, #2
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e044      	b.n	800318e <USART_SetConfig+0x15a>
 8003104:	2304      	movs	r3, #4
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e041      	b.n	800318e <USART_SetConfig+0x15a>
 800310a:	2308      	movs	r3, #8
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e03e      	b.n	800318e <USART_SetConfig+0x15a>
 8003110:	2310      	movs	r3, #16
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e03b      	b.n	800318e <USART_SetConfig+0x15a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a75      	ldr	r2, [pc, #468]	@ (80032f0 <USART_SetConfig+0x2bc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d134      	bne.n	800318a <USART_SetConfig+0x156>
 8003120:	200c      	movs	r0, #12
 8003122:	f7ff fdc5 	bl	8002cb0 <LL_RCC_GetUSARTClockSource>
 8003126:	4603      	mov	r3, r0
 8003128:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d829      	bhi.n	8003184 <USART_SetConfig+0x150>
 8003130:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <USART_SetConfig+0x104>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	0800316d 	.word	0x0800316d
 800313c:	08003185 	.word	0x08003185
 8003140:	08003185 	.word	0x08003185
 8003144:	08003185 	.word	0x08003185
 8003148:	08003179 	.word	0x08003179
 800314c:	08003185 	.word	0x08003185
 8003150:	08003185 	.word	0x08003185
 8003154:	08003185 	.word	0x08003185
 8003158:	08003173 	.word	0x08003173
 800315c:	08003185 	.word	0x08003185
 8003160:	08003185 	.word	0x08003185
 8003164:	08003185 	.word	0x08003185
 8003168:	0800317f 	.word	0x0800317f
 800316c:	2300      	movs	r3, #0
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e00d      	b.n	800318e <USART_SetConfig+0x15a>
 8003172:	2302      	movs	r3, #2
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e00a      	b.n	800318e <USART_SetConfig+0x15a>
 8003178:	2304      	movs	r3, #4
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e007      	b.n	800318e <USART_SetConfig+0x15a>
 800317e:	2308      	movs	r3, #8
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e004      	b.n	800318e <USART_SetConfig+0x15a>
 8003184:	2310      	movs	r3, #16
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e001      	b.n	800318e <USART_SetConfig+0x15a>
 800318a:	2310      	movs	r3, #16
 800318c:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800318e:	7ffb      	ldrb	r3, [r7, #31]
 8003190:	2b08      	cmp	r3, #8
 8003192:	f200 81de 	bhi.w	8003552 <USART_SetConfig+0x51e>
 8003196:	a201      	add	r2, pc, #4	@ (adr r2, 800319c <USART_SetConfig+0x168>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	08003277 	.word	0x08003277
 80031a4:	0800333b 	.word	0x0800333b
 80031a8:	08003553 	.word	0x08003553
 80031ac:	080033eb 	.word	0x080033eb
 80031b0:	08003553 	.word	0x08003553
 80031b4:	08003553 	.word	0x08003553
 80031b8:	08003553 	.word	0x08003553
 80031bc:	080034a1 	.word	0x080034a1
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80031c0:	f7ff fa92 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 80031c4:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d044      	beq.n	8003258 <USART_SetConfig+0x224>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d03e      	beq.n	8003254 <USART_SetConfig+0x220>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d038      	beq.n	8003250 <USART_SetConfig+0x21c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d032      	beq.n	800324c <USART_SetConfig+0x218>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d02c      	beq.n	8003248 <USART_SetConfig+0x214>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d026      	beq.n	8003244 <USART_SetConfig+0x210>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d020      	beq.n	8003240 <USART_SetConfig+0x20c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	2b07      	cmp	r3, #7
 8003204:	d01a      	beq.n	800323c <USART_SetConfig+0x208>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	2b08      	cmp	r3, #8
 800320c:	d014      	beq.n	8003238 <USART_SetConfig+0x204>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	2b09      	cmp	r3, #9
 8003214:	d00e      	beq.n	8003234 <USART_SetConfig+0x200>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	2b0a      	cmp	r3, #10
 800321c:	d008      	beq.n	8003230 <USART_SetConfig+0x1fc>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	2b0b      	cmp	r3, #11
 8003224:	d102      	bne.n	800322c <USART_SetConfig+0x1f8>
 8003226:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800322a:	e016      	b.n	800325a <USART_SetConfig+0x226>
 800322c:	2301      	movs	r3, #1
 800322e:	e014      	b.n	800325a <USART_SetConfig+0x226>
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	e012      	b.n	800325a <USART_SetConfig+0x226>
 8003234:	2340      	movs	r3, #64	@ 0x40
 8003236:	e010      	b.n	800325a <USART_SetConfig+0x226>
 8003238:	2320      	movs	r3, #32
 800323a:	e00e      	b.n	800325a <USART_SetConfig+0x226>
 800323c:	2310      	movs	r3, #16
 800323e:	e00c      	b.n	800325a <USART_SetConfig+0x226>
 8003240:	230c      	movs	r3, #12
 8003242:	e00a      	b.n	800325a <USART_SetConfig+0x226>
 8003244:	230a      	movs	r3, #10
 8003246:	e008      	b.n	800325a <USART_SetConfig+0x226>
 8003248:	2308      	movs	r3, #8
 800324a:	e006      	b.n	800325a <USART_SetConfig+0x226>
 800324c:	2306      	movs	r3, #6
 800324e:	e004      	b.n	800325a <USART_SetConfig+0x226>
 8003250:	2304      	movs	r3, #4
 8003252:	e002      	b.n	800325a <USART_SetConfig+0x226>
 8003254:	2302      	movs	r3, #2
 8003256:	e000      	b.n	800325a <USART_SetConfig+0x226>
 8003258:	2301      	movs	r3, #1
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	005a      	lsls	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	441a      	add	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	61bb      	str	r3, [r7, #24]
      break;
 8003274:	e170      	b.n	8003558 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8003276:	f7ff fa49 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 800327a:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d04b      	beq.n	800331c <USART_SetConfig+0x2e8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	2b01      	cmp	r3, #1
 800328a:	d045      	beq.n	8003318 <USART_SetConfig+0x2e4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	2b02      	cmp	r3, #2
 8003292:	d03f      	beq.n	8003314 <USART_SetConfig+0x2e0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	2b03      	cmp	r3, #3
 800329a:	d039      	beq.n	8003310 <USART_SetConfig+0x2dc>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d033      	beq.n	800330c <USART_SetConfig+0x2d8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d02d      	beq.n	8003308 <USART_SetConfig+0x2d4>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	2b06      	cmp	r3, #6
 80032b2:	d027      	beq.n	8003304 <USART_SetConfig+0x2d0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	2b07      	cmp	r3, #7
 80032ba:	d021      	beq.n	8003300 <USART_SetConfig+0x2cc>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d01b      	beq.n	80032fc <USART_SetConfig+0x2c8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	d015      	beq.n	80032f8 <USART_SetConfig+0x2c4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	2b0a      	cmp	r3, #10
 80032d2:	d00f      	beq.n	80032f4 <USART_SetConfig+0x2c0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	2b0b      	cmp	r3, #11
 80032da:	d102      	bne.n	80032e2 <USART_SetConfig+0x2ae>
 80032dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032e0:	e01d      	b.n	800331e <USART_SetConfig+0x2ea>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e01b      	b.n	800331e <USART_SetConfig+0x2ea>
 80032e6:	bf00      	nop
 80032e8:	cfff69f3 	.word	0xcfff69f3
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40004400 	.word	0x40004400
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	e012      	b.n	800331e <USART_SetConfig+0x2ea>
 80032f8:	2340      	movs	r3, #64	@ 0x40
 80032fa:	e010      	b.n	800331e <USART_SetConfig+0x2ea>
 80032fc:	2320      	movs	r3, #32
 80032fe:	e00e      	b.n	800331e <USART_SetConfig+0x2ea>
 8003300:	2310      	movs	r3, #16
 8003302:	e00c      	b.n	800331e <USART_SetConfig+0x2ea>
 8003304:	230c      	movs	r3, #12
 8003306:	e00a      	b.n	800331e <USART_SetConfig+0x2ea>
 8003308:	230a      	movs	r3, #10
 800330a:	e008      	b.n	800331e <USART_SetConfig+0x2ea>
 800330c:	2308      	movs	r3, #8
 800330e:	e006      	b.n	800331e <USART_SetConfig+0x2ea>
 8003310:	2306      	movs	r3, #6
 8003312:	e004      	b.n	800331e <USART_SetConfig+0x2ea>
 8003314:	2304      	movs	r3, #4
 8003316:	e002      	b.n	800331e <USART_SetConfig+0x2ea>
 8003318:	2302      	movs	r3, #2
 800331a:	e000      	b.n	800331e <USART_SetConfig+0x2ea>
 800331c:	2301      	movs	r3, #1
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	005a      	lsls	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	441a      	add	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	61bb      	str	r3, [r7, #24]
      break;
 8003338:	e10e      	b.n	8003558 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	2b00      	cmp	r3, #0
 8003340:	d044      	beq.n	80033cc <USART_SetConfig+0x398>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	2b01      	cmp	r3, #1
 8003348:	d03e      	beq.n	80033c8 <USART_SetConfig+0x394>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	2b02      	cmp	r3, #2
 8003350:	d038      	beq.n	80033c4 <USART_SetConfig+0x390>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	2b03      	cmp	r3, #3
 8003358:	d032      	beq.n	80033c0 <USART_SetConfig+0x38c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	2b04      	cmp	r3, #4
 8003360:	d02c      	beq.n	80033bc <USART_SetConfig+0x388>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	2b05      	cmp	r3, #5
 8003368:	d026      	beq.n	80033b8 <USART_SetConfig+0x384>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	2b06      	cmp	r3, #6
 8003370:	d020      	beq.n	80033b4 <USART_SetConfig+0x380>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	2b07      	cmp	r3, #7
 8003378:	d01a      	beq.n	80033b0 <USART_SetConfig+0x37c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	2b08      	cmp	r3, #8
 8003380:	d014      	beq.n	80033ac <USART_SetConfig+0x378>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	2b09      	cmp	r3, #9
 8003388:	d00e      	beq.n	80033a8 <USART_SetConfig+0x374>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	2b0a      	cmp	r3, #10
 8003390:	d008      	beq.n	80033a4 <USART_SetConfig+0x370>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	2b0b      	cmp	r3, #11
 8003398:	d102      	bne.n	80033a0 <USART_SetConfig+0x36c>
 800339a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800339e:	e016      	b.n	80033ce <USART_SetConfig+0x39a>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e014      	b.n	80033ce <USART_SetConfig+0x39a>
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	e012      	b.n	80033ce <USART_SetConfig+0x39a>
 80033a8:	2340      	movs	r3, #64	@ 0x40
 80033aa:	e010      	b.n	80033ce <USART_SetConfig+0x39a>
 80033ac:	2320      	movs	r3, #32
 80033ae:	e00e      	b.n	80033ce <USART_SetConfig+0x39a>
 80033b0:	2310      	movs	r3, #16
 80033b2:	e00c      	b.n	80033ce <USART_SetConfig+0x39a>
 80033b4:	230c      	movs	r3, #12
 80033b6:	e00a      	b.n	80033ce <USART_SetConfig+0x39a>
 80033b8:	230a      	movs	r3, #10
 80033ba:	e008      	b.n	80033ce <USART_SetConfig+0x39a>
 80033bc:	2308      	movs	r3, #8
 80033be:	e006      	b.n	80033ce <USART_SetConfig+0x39a>
 80033c0:	2306      	movs	r3, #6
 80033c2:	e004      	b.n	80033ce <USART_SetConfig+0x39a>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e002      	b.n	80033ce <USART_SetConfig+0x39a>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e000      	b.n	80033ce <USART_SetConfig+0x39a>
 80033cc:	2301      	movs	r3, #1
 80033ce:	4a79      	ldr	r2, [pc, #484]	@ (80035b4 <USART_SetConfig+0x580>)
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	005a      	lsls	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	441a      	add	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	61bb      	str	r3, [r7, #24]
      break;
 80033e8:	e0b6      	b.n	8003558 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80033ea:	f7ff f8c9 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 80033ee:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d044      	beq.n	8003482 <USART_SetConfig+0x44e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d03e      	beq.n	800347e <USART_SetConfig+0x44a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	2b02      	cmp	r3, #2
 8003406:	d038      	beq.n	800347a <USART_SetConfig+0x446>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	2b03      	cmp	r3, #3
 800340e:	d032      	beq.n	8003476 <USART_SetConfig+0x442>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	2b04      	cmp	r3, #4
 8003416:	d02c      	beq.n	8003472 <USART_SetConfig+0x43e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	2b05      	cmp	r3, #5
 800341e:	d026      	beq.n	800346e <USART_SetConfig+0x43a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	2b06      	cmp	r3, #6
 8003426:	d020      	beq.n	800346a <USART_SetConfig+0x436>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	2b07      	cmp	r3, #7
 800342e:	d01a      	beq.n	8003466 <USART_SetConfig+0x432>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	2b08      	cmp	r3, #8
 8003436:	d014      	beq.n	8003462 <USART_SetConfig+0x42e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	2b09      	cmp	r3, #9
 800343e:	d00e      	beq.n	800345e <USART_SetConfig+0x42a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	2b0a      	cmp	r3, #10
 8003446:	d008      	beq.n	800345a <USART_SetConfig+0x426>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	2b0b      	cmp	r3, #11
 800344e:	d102      	bne.n	8003456 <USART_SetConfig+0x422>
 8003450:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003454:	e016      	b.n	8003484 <USART_SetConfig+0x450>
 8003456:	2301      	movs	r3, #1
 8003458:	e014      	b.n	8003484 <USART_SetConfig+0x450>
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	e012      	b.n	8003484 <USART_SetConfig+0x450>
 800345e:	2340      	movs	r3, #64	@ 0x40
 8003460:	e010      	b.n	8003484 <USART_SetConfig+0x450>
 8003462:	2320      	movs	r3, #32
 8003464:	e00e      	b.n	8003484 <USART_SetConfig+0x450>
 8003466:	2310      	movs	r3, #16
 8003468:	e00c      	b.n	8003484 <USART_SetConfig+0x450>
 800346a:	230c      	movs	r3, #12
 800346c:	e00a      	b.n	8003484 <USART_SetConfig+0x450>
 800346e:	230a      	movs	r3, #10
 8003470:	e008      	b.n	8003484 <USART_SetConfig+0x450>
 8003472:	2308      	movs	r3, #8
 8003474:	e006      	b.n	8003484 <USART_SetConfig+0x450>
 8003476:	2306      	movs	r3, #6
 8003478:	e004      	b.n	8003484 <USART_SetConfig+0x450>
 800347a:	2304      	movs	r3, #4
 800347c:	e002      	b.n	8003484 <USART_SetConfig+0x450>
 800347e:	2302      	movs	r3, #2
 8003480:	e000      	b.n	8003484 <USART_SetConfig+0x450>
 8003482:	2301      	movs	r3, #1
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	005a      	lsls	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	441a      	add	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	61bb      	str	r3, [r7, #24]
      break;
 800349e:	e05b      	b.n	8003558 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d044      	beq.n	8003532 <USART_SetConfig+0x4fe>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d03e      	beq.n	800352e <USART_SetConfig+0x4fa>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d038      	beq.n	800352a <USART_SetConfig+0x4f6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d032      	beq.n	8003526 <USART_SetConfig+0x4f2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d02c      	beq.n	8003522 <USART_SetConfig+0x4ee>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d026      	beq.n	800351e <USART_SetConfig+0x4ea>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d020      	beq.n	800351a <USART_SetConfig+0x4e6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	2b07      	cmp	r3, #7
 80034de:	d01a      	beq.n	8003516 <USART_SetConfig+0x4e2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d014      	beq.n	8003512 <USART_SetConfig+0x4de>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	2b09      	cmp	r3, #9
 80034ee:	d00e      	beq.n	800350e <USART_SetConfig+0x4da>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	2b0a      	cmp	r3, #10
 80034f6:	d008      	beq.n	800350a <USART_SetConfig+0x4d6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	2b0b      	cmp	r3, #11
 80034fe:	d102      	bne.n	8003506 <USART_SetConfig+0x4d2>
 8003500:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003504:	e016      	b.n	8003534 <USART_SetConfig+0x500>
 8003506:	2301      	movs	r3, #1
 8003508:	e014      	b.n	8003534 <USART_SetConfig+0x500>
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	e012      	b.n	8003534 <USART_SetConfig+0x500>
 800350e:	2340      	movs	r3, #64	@ 0x40
 8003510:	e010      	b.n	8003534 <USART_SetConfig+0x500>
 8003512:	2320      	movs	r3, #32
 8003514:	e00e      	b.n	8003534 <USART_SetConfig+0x500>
 8003516:	2310      	movs	r3, #16
 8003518:	e00c      	b.n	8003534 <USART_SetConfig+0x500>
 800351a:	230c      	movs	r3, #12
 800351c:	e00a      	b.n	8003534 <USART_SetConfig+0x500>
 800351e:	230a      	movs	r3, #10
 8003520:	e008      	b.n	8003534 <USART_SetConfig+0x500>
 8003522:	2308      	movs	r3, #8
 8003524:	e006      	b.n	8003534 <USART_SetConfig+0x500>
 8003526:	2306      	movs	r3, #6
 8003528:	e004      	b.n	8003534 <USART_SetConfig+0x500>
 800352a:	2304      	movs	r3, #4
 800352c:	e002      	b.n	8003534 <USART_SetConfig+0x500>
 800352e:	2302      	movs	r3, #2
 8003530:	e000      	b.n	8003534 <USART_SetConfig+0x500>
 8003532:	2301      	movs	r3, #1
 8003534:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	441a      	add	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	61bb      	str	r3, [r7, #24]
      break;
 8003550:	e002      	b.n	8003558 <USART_SetConfig+0x524>
    default:
      ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	77bb      	strb	r3, [r7, #30]
      break;
 8003556:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b0f      	cmp	r3, #15
 800355c:	d916      	bls.n	800358c <USART_SetConfig+0x558>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003564:	d212      	bcs.n	800358c <USART_SetConfig+0x558>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f023 030f 	bic.w	r3, r3, #15
 800356e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	b29b      	uxth	r3, r3
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	b29a      	uxth	r2, r3
 800357c:	89fb      	ldrh	r3, [r7, #14]
 800357e:	4313      	orrs	r3, r2
 8003580:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	89fa      	ldrh	r2, [r7, #14]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	e001      	b.n	8003590 <USART_SetConfig+0x55c>
  }
  else
  {
    ret = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 80035a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	00f42400 	.word	0x00f42400

080035b8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035c6:	f7fd fd8f 	bl	80010e8 <HAL_GetTick>
 80035ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d10e      	bne.n	80035f8 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80035da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff fced 	bl	8002fc8 <USART_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e01e      	b.n	8003636 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d10e      	bne.n	8003624 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fcd7 	bl	8002fc8 <USART_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e008      	b.n	8003636 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_USARTEx_DisableFifoMode+0x16>
 8003674:	2302      	movs	r3, #2
 8003676:	e027      	b.n	80036c8 <HAL_USARTEx_DisableFifoMode+0x66>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80036a6:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e02d      	b.n	8003746 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f850 	bl	80037cc <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8003762:	2302      	movs	r3, #2
 8003764:	e02d      	b.n	80037c2 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f812 	bl	80037cc <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	875a      	strh	r2, [r3, #58]	@ 0x3a
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037e8:	e02f      	b.n	800384a <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037ea:	2308      	movs	r3, #8
 80037ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037ee:	2308      	movs	r3, #8
 80037f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	0e5b      	lsrs	r3, r3, #25
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	0f5b      	lsrs	r3, r3, #29
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003812:	7bbb      	ldrb	r3, [r7, #14]
 8003814:	7b3a      	ldrb	r2, [r7, #12]
 8003816:	490f      	ldr	r1, [pc, #60]	@ (8003854 <USARTEx_SetNbDataToProcess+0x88>)
 8003818:	5c8a      	ldrb	r2, [r1, r2]
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	7b3a      	ldrb	r2, [r7, #12]
 8003820:	490d      	ldr	r1, [pc, #52]	@ (8003858 <USARTEx_SetNbDataToProcess+0x8c>)
 8003822:	5c8a      	ldrb	r2, [r1, r2]
 8003824:	fb93 f3f2 	sdiv	r3, r3, r2
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	7b7a      	ldrb	r2, [r7, #13]
 8003832:	4908      	ldr	r1, [pc, #32]	@ (8003854 <USARTEx_SetNbDataToProcess+0x88>)
 8003834:	5c8a      	ldrb	r2, [r1, r2]
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	7b7a      	ldrb	r2, [r7, #13]
 800383c:	4906      	ldr	r1, [pc, #24]	@ (8003858 <USARTEx_SetNbDataToProcess+0x8c>)
 800383e:	5c8a      	ldrb	r2, [r1, r2]
 8003840:	fb93 f3f2 	sdiv	r3, r3, r2
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	08004b2c 	.word	0x08004b2c
 8003858:	08004b34 	.word	0x08004b34

0800385c <std>:
 800385c:	2300      	movs	r3, #0
 800385e:	b510      	push	{r4, lr}
 8003860:	4604      	mov	r4, r0
 8003862:	e9c0 3300 	strd	r3, r3, [r0]
 8003866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800386a:	6083      	str	r3, [r0, #8]
 800386c:	8181      	strh	r1, [r0, #12]
 800386e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003870:	81c2      	strh	r2, [r0, #14]
 8003872:	6183      	str	r3, [r0, #24]
 8003874:	4619      	mov	r1, r3
 8003876:	2208      	movs	r2, #8
 8003878:	305c      	adds	r0, #92	@ 0x5c
 800387a:	f000 fa01 	bl	8003c80 <memset>
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <std+0x58>)
 8003880:	6263      	str	r3, [r4, #36]	@ 0x24
 8003882:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <std+0x5c>)
 8003884:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <std+0x60>)
 8003888:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800388a:	4b0d      	ldr	r3, [pc, #52]	@ (80038c0 <std+0x64>)
 800388c:	6323      	str	r3, [r4, #48]	@ 0x30
 800388e:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <std+0x68>)
 8003890:	6224      	str	r4, [r4, #32]
 8003892:	429c      	cmp	r4, r3
 8003894:	d006      	beq.n	80038a4 <std+0x48>
 8003896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800389a:	4294      	cmp	r4, r2
 800389c:	d002      	beq.n	80038a4 <std+0x48>
 800389e:	33d0      	adds	r3, #208	@ 0xd0
 80038a0:	429c      	cmp	r4, r3
 80038a2:	d105      	bne.n	80038b0 <std+0x54>
 80038a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ac:	f000 ba60 	b.w	8003d70 <__retarget_lock_init_recursive>
 80038b0:	bd10      	pop	{r4, pc}
 80038b2:	bf00      	nop
 80038b4:	08003ad1 	.word	0x08003ad1
 80038b8:	08003af3 	.word	0x08003af3
 80038bc:	08003b2b 	.word	0x08003b2b
 80038c0:	08003b4f 	.word	0x08003b4f
 80038c4:	20000130 	.word	0x20000130

080038c8 <stdio_exit_handler>:
 80038c8:	4a02      	ldr	r2, [pc, #8]	@ (80038d4 <stdio_exit_handler+0xc>)
 80038ca:	4903      	ldr	r1, [pc, #12]	@ (80038d8 <stdio_exit_handler+0x10>)
 80038cc:	4803      	ldr	r0, [pc, #12]	@ (80038dc <stdio_exit_handler+0x14>)
 80038ce:	f000 b869 	b.w	80039a4 <_fwalk_sglue>
 80038d2:	bf00      	nop
 80038d4:	2000000c 	.word	0x2000000c
 80038d8:	08004605 	.word	0x08004605
 80038dc:	2000001c 	.word	0x2000001c

080038e0 <cleanup_stdio>:
 80038e0:	6841      	ldr	r1, [r0, #4]
 80038e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003914 <cleanup_stdio+0x34>)
 80038e4:	4299      	cmp	r1, r3
 80038e6:	b510      	push	{r4, lr}
 80038e8:	4604      	mov	r4, r0
 80038ea:	d001      	beq.n	80038f0 <cleanup_stdio+0x10>
 80038ec:	f000 fe8a 	bl	8004604 <_fflush_r>
 80038f0:	68a1      	ldr	r1, [r4, #8]
 80038f2:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <cleanup_stdio+0x38>)
 80038f4:	4299      	cmp	r1, r3
 80038f6:	d002      	beq.n	80038fe <cleanup_stdio+0x1e>
 80038f8:	4620      	mov	r0, r4
 80038fa:	f000 fe83 	bl	8004604 <_fflush_r>
 80038fe:	68e1      	ldr	r1, [r4, #12]
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <cleanup_stdio+0x3c>)
 8003902:	4299      	cmp	r1, r3
 8003904:	d004      	beq.n	8003910 <cleanup_stdio+0x30>
 8003906:	4620      	mov	r0, r4
 8003908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800390c:	f000 be7a 	b.w	8004604 <_fflush_r>
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	20000130 	.word	0x20000130
 8003918:	20000198 	.word	0x20000198
 800391c:	20000200 	.word	0x20000200

08003920 <global_stdio_init.part.0>:
 8003920:	b510      	push	{r4, lr}
 8003922:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <global_stdio_init.part.0+0x30>)
 8003924:	4c0b      	ldr	r4, [pc, #44]	@ (8003954 <global_stdio_init.part.0+0x34>)
 8003926:	4a0c      	ldr	r2, [pc, #48]	@ (8003958 <global_stdio_init.part.0+0x38>)
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	4620      	mov	r0, r4
 800392c:	2200      	movs	r2, #0
 800392e:	2104      	movs	r1, #4
 8003930:	f7ff ff94 	bl	800385c <std>
 8003934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003938:	2201      	movs	r2, #1
 800393a:	2109      	movs	r1, #9
 800393c:	f7ff ff8e 	bl	800385c <std>
 8003940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003944:	2202      	movs	r2, #2
 8003946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800394a:	2112      	movs	r1, #18
 800394c:	f7ff bf86 	b.w	800385c <std>
 8003950:	20000268 	.word	0x20000268
 8003954:	20000130 	.word	0x20000130
 8003958:	080038c9 	.word	0x080038c9

0800395c <__sfp_lock_acquire>:
 800395c:	4801      	ldr	r0, [pc, #4]	@ (8003964 <__sfp_lock_acquire+0x8>)
 800395e:	f000 ba08 	b.w	8003d72 <__retarget_lock_acquire_recursive>
 8003962:	bf00      	nop
 8003964:	20000271 	.word	0x20000271

08003968 <__sfp_lock_release>:
 8003968:	4801      	ldr	r0, [pc, #4]	@ (8003970 <__sfp_lock_release+0x8>)
 800396a:	f000 ba03 	b.w	8003d74 <__retarget_lock_release_recursive>
 800396e:	bf00      	nop
 8003970:	20000271 	.word	0x20000271

08003974 <__sinit>:
 8003974:	b510      	push	{r4, lr}
 8003976:	4604      	mov	r4, r0
 8003978:	f7ff fff0 	bl	800395c <__sfp_lock_acquire>
 800397c:	6a23      	ldr	r3, [r4, #32]
 800397e:	b11b      	cbz	r3, 8003988 <__sinit+0x14>
 8003980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003984:	f7ff bff0 	b.w	8003968 <__sfp_lock_release>
 8003988:	4b04      	ldr	r3, [pc, #16]	@ (800399c <__sinit+0x28>)
 800398a:	6223      	str	r3, [r4, #32]
 800398c:	4b04      	ldr	r3, [pc, #16]	@ (80039a0 <__sinit+0x2c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f5      	bne.n	8003980 <__sinit+0xc>
 8003994:	f7ff ffc4 	bl	8003920 <global_stdio_init.part.0>
 8003998:	e7f2      	b.n	8003980 <__sinit+0xc>
 800399a:	bf00      	nop
 800399c:	080038e1 	.word	0x080038e1
 80039a0:	20000268 	.word	0x20000268

080039a4 <_fwalk_sglue>:
 80039a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a8:	4607      	mov	r7, r0
 80039aa:	4688      	mov	r8, r1
 80039ac:	4614      	mov	r4, r2
 80039ae:	2600      	movs	r6, #0
 80039b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039b4:	f1b9 0901 	subs.w	r9, r9, #1
 80039b8:	d505      	bpl.n	80039c6 <_fwalk_sglue+0x22>
 80039ba:	6824      	ldr	r4, [r4, #0]
 80039bc:	2c00      	cmp	r4, #0
 80039be:	d1f7      	bne.n	80039b0 <_fwalk_sglue+0xc>
 80039c0:	4630      	mov	r0, r6
 80039c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039c6:	89ab      	ldrh	r3, [r5, #12]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d907      	bls.n	80039dc <_fwalk_sglue+0x38>
 80039cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039d0:	3301      	adds	r3, #1
 80039d2:	d003      	beq.n	80039dc <_fwalk_sglue+0x38>
 80039d4:	4629      	mov	r1, r5
 80039d6:	4638      	mov	r0, r7
 80039d8:	47c0      	blx	r8
 80039da:	4306      	orrs	r6, r0
 80039dc:	3568      	adds	r5, #104	@ 0x68
 80039de:	e7e9      	b.n	80039b4 <_fwalk_sglue+0x10>

080039e0 <iprintf>:
 80039e0:	b40f      	push	{r0, r1, r2, r3}
 80039e2:	b507      	push	{r0, r1, r2, lr}
 80039e4:	4906      	ldr	r1, [pc, #24]	@ (8003a00 <iprintf+0x20>)
 80039e6:	ab04      	add	r3, sp, #16
 80039e8:	6808      	ldr	r0, [r1, #0]
 80039ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ee:	6881      	ldr	r1, [r0, #8]
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	f000 fae1 	bl	8003fb8 <_vfiprintf_r>
 80039f6:	b003      	add	sp, #12
 80039f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039fc:	b004      	add	sp, #16
 80039fe:	4770      	bx	lr
 8003a00:	20000018 	.word	0x20000018

08003a04 <putchar>:
 8003a04:	4b02      	ldr	r3, [pc, #8]	@ (8003a10 <putchar+0xc>)
 8003a06:	4601      	mov	r1, r0
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	6882      	ldr	r2, [r0, #8]
 8003a0c:	f000 be84 	b.w	8004718 <_putc_r>
 8003a10:	20000018 	.word	0x20000018

08003a14 <_puts_r>:
 8003a14:	6a03      	ldr	r3, [r0, #32]
 8003a16:	b570      	push	{r4, r5, r6, lr}
 8003a18:	6884      	ldr	r4, [r0, #8]
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	460e      	mov	r6, r1
 8003a1e:	b90b      	cbnz	r3, 8003a24 <_puts_r+0x10>
 8003a20:	f7ff ffa8 	bl	8003974 <__sinit>
 8003a24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a26:	07db      	lsls	r3, r3, #31
 8003a28:	d405      	bmi.n	8003a36 <_puts_r+0x22>
 8003a2a:	89a3      	ldrh	r3, [r4, #12]
 8003a2c:	0598      	lsls	r0, r3, #22
 8003a2e:	d402      	bmi.n	8003a36 <_puts_r+0x22>
 8003a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a32:	f000 f99e 	bl	8003d72 <__retarget_lock_acquire_recursive>
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	0719      	lsls	r1, r3, #28
 8003a3a:	d502      	bpl.n	8003a42 <_puts_r+0x2e>
 8003a3c:	6923      	ldr	r3, [r4, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d135      	bne.n	8003aae <_puts_r+0x9a>
 8003a42:	4621      	mov	r1, r4
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 f8c5 	bl	8003bd4 <__swsetup_r>
 8003a4a:	b380      	cbz	r0, 8003aae <_puts_r+0x9a>
 8003a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8003a50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a52:	07da      	lsls	r2, r3, #31
 8003a54:	d405      	bmi.n	8003a62 <_puts_r+0x4e>
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	059b      	lsls	r3, r3, #22
 8003a5a:	d402      	bmi.n	8003a62 <_puts_r+0x4e>
 8003a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a5e:	f000 f989 	bl	8003d74 <__retarget_lock_release_recursive>
 8003a62:	4628      	mov	r0, r5
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	da04      	bge.n	8003a74 <_puts_r+0x60>
 8003a6a:	69a2      	ldr	r2, [r4, #24]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	dc17      	bgt.n	8003aa0 <_puts_r+0x8c>
 8003a70:	290a      	cmp	r1, #10
 8003a72:	d015      	beq.n	8003aa0 <_puts_r+0x8c>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	6022      	str	r2, [r4, #0]
 8003a7a:	7019      	strb	r1, [r3, #0]
 8003a7c:	68a3      	ldr	r3, [r4, #8]
 8003a7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a82:	3b01      	subs	r3, #1
 8003a84:	60a3      	str	r3, [r4, #8]
 8003a86:	2900      	cmp	r1, #0
 8003a88:	d1ed      	bne.n	8003a66 <_puts_r+0x52>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da11      	bge.n	8003ab2 <_puts_r+0x9e>
 8003a8e:	4622      	mov	r2, r4
 8003a90:	210a      	movs	r1, #10
 8003a92:	4628      	mov	r0, r5
 8003a94:	f000 f85f 	bl	8003b56 <__swbuf_r>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d0d7      	beq.n	8003a4c <_puts_r+0x38>
 8003a9c:	250a      	movs	r5, #10
 8003a9e:	e7d7      	b.n	8003a50 <_puts_r+0x3c>
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 f857 	bl	8003b56 <__swbuf_r>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d1e7      	bne.n	8003a7c <_puts_r+0x68>
 8003aac:	e7ce      	b.n	8003a4c <_puts_r+0x38>
 8003aae:	3e01      	subs	r6, #1
 8003ab0:	e7e4      	b.n	8003a7c <_puts_r+0x68>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	6022      	str	r2, [r4, #0]
 8003ab8:	220a      	movs	r2, #10
 8003aba:	701a      	strb	r2, [r3, #0]
 8003abc:	e7ee      	b.n	8003a9c <_puts_r+0x88>
	...

08003ac0 <puts>:
 8003ac0:	4b02      	ldr	r3, [pc, #8]	@ (8003acc <puts+0xc>)
 8003ac2:	4601      	mov	r1, r0
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	f7ff bfa5 	b.w	8003a14 <_puts_r>
 8003aca:	bf00      	nop
 8003acc:	20000018 	.word	0x20000018

08003ad0 <__sread>:
 8003ad0:	b510      	push	{r4, lr}
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad8:	f000 f8fc 	bl	8003cd4 <_read_r>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	bfab      	itete	ge
 8003ae0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ae4:	181b      	addge	r3, r3, r0
 8003ae6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003aea:	bfac      	ite	ge
 8003aec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003aee:	81a3      	strhlt	r3, [r4, #12]
 8003af0:	bd10      	pop	{r4, pc}

08003af2 <__swrite>:
 8003af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af6:	461f      	mov	r7, r3
 8003af8:	898b      	ldrh	r3, [r1, #12]
 8003afa:	05db      	lsls	r3, r3, #23
 8003afc:	4605      	mov	r5, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	4616      	mov	r6, r2
 8003b02:	d505      	bpl.n	8003b10 <__swrite+0x1e>
 8003b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b08:	2302      	movs	r3, #2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f000 f8d0 	bl	8003cb0 <_lseek_r>
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	4632      	mov	r2, r6
 8003b1e:	463b      	mov	r3, r7
 8003b20:	4628      	mov	r0, r5
 8003b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b26:	f000 b8e7 	b.w	8003cf8 <_write_r>

08003b2a <__sseek>:
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b32:	f000 f8bd 	bl	8003cb0 <_lseek_r>
 8003b36:	1c43      	adds	r3, r0, #1
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	bf15      	itete	ne
 8003b3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b46:	81a3      	strheq	r3, [r4, #12]
 8003b48:	bf18      	it	ne
 8003b4a:	81a3      	strhne	r3, [r4, #12]
 8003b4c:	bd10      	pop	{r4, pc}

08003b4e <__sclose>:
 8003b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b52:	f000 b89d 	b.w	8003c90 <_close_r>

08003b56 <__swbuf_r>:
 8003b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b58:	460e      	mov	r6, r1
 8003b5a:	4614      	mov	r4, r2
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	b118      	cbz	r0, 8003b68 <__swbuf_r+0x12>
 8003b60:	6a03      	ldr	r3, [r0, #32]
 8003b62:	b90b      	cbnz	r3, 8003b68 <__swbuf_r+0x12>
 8003b64:	f7ff ff06 	bl	8003974 <__sinit>
 8003b68:	69a3      	ldr	r3, [r4, #24]
 8003b6a:	60a3      	str	r3, [r4, #8]
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	071a      	lsls	r2, r3, #28
 8003b70:	d501      	bpl.n	8003b76 <__swbuf_r+0x20>
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	b943      	cbnz	r3, 8003b88 <__swbuf_r+0x32>
 8003b76:	4621      	mov	r1, r4
 8003b78:	4628      	mov	r0, r5
 8003b7a:	f000 f82b 	bl	8003bd4 <__swsetup_r>
 8003b7e:	b118      	cbz	r0, 8003b88 <__swbuf_r+0x32>
 8003b80:	f04f 37ff 	mov.w	r7, #4294967295
 8003b84:	4638      	mov	r0, r7
 8003b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	6922      	ldr	r2, [r4, #16]
 8003b8c:	1a98      	subs	r0, r3, r2
 8003b8e:	6963      	ldr	r3, [r4, #20]
 8003b90:	b2f6      	uxtb	r6, r6
 8003b92:	4283      	cmp	r3, r0
 8003b94:	4637      	mov	r7, r6
 8003b96:	dc05      	bgt.n	8003ba4 <__swbuf_r+0x4e>
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f000 fd32 	bl	8004604 <_fflush_r>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d1ed      	bne.n	8003b80 <__swbuf_r+0x2a>
 8003ba4:	68a3      	ldr	r3, [r4, #8]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	60a3      	str	r3, [r4, #8]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	6022      	str	r2, [r4, #0]
 8003bb0:	701e      	strb	r6, [r3, #0]
 8003bb2:	6962      	ldr	r2, [r4, #20]
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d004      	beq.n	8003bc4 <__swbuf_r+0x6e>
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	07db      	lsls	r3, r3, #31
 8003bbe:	d5e1      	bpl.n	8003b84 <__swbuf_r+0x2e>
 8003bc0:	2e0a      	cmp	r6, #10
 8003bc2:	d1df      	bne.n	8003b84 <__swbuf_r+0x2e>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 fd1c 	bl	8004604 <_fflush_r>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d0d9      	beq.n	8003b84 <__swbuf_r+0x2e>
 8003bd0:	e7d6      	b.n	8003b80 <__swbuf_r+0x2a>
	...

08003bd4 <__swsetup_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <__swsetup_r+0xa8>)
 8003bd8:	4605      	mov	r5, r0
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	460c      	mov	r4, r1
 8003bde:	b118      	cbz	r0, 8003be8 <__swsetup_r+0x14>
 8003be0:	6a03      	ldr	r3, [r0, #32]
 8003be2:	b90b      	cbnz	r3, 8003be8 <__swsetup_r+0x14>
 8003be4:	f7ff fec6 	bl	8003974 <__sinit>
 8003be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bec:	0719      	lsls	r1, r3, #28
 8003bee:	d422      	bmi.n	8003c36 <__swsetup_r+0x62>
 8003bf0:	06da      	lsls	r2, r3, #27
 8003bf2:	d407      	bmi.n	8003c04 <__swsetup_r+0x30>
 8003bf4:	2209      	movs	r2, #9
 8003bf6:	602a      	str	r2, [r5, #0]
 8003bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bfc:	81a3      	strh	r3, [r4, #12]
 8003bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003c02:	e033      	b.n	8003c6c <__swsetup_r+0x98>
 8003c04:	0758      	lsls	r0, r3, #29
 8003c06:	d512      	bpl.n	8003c2e <__swsetup_r+0x5a>
 8003c08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c0a:	b141      	cbz	r1, 8003c1e <__swsetup_r+0x4a>
 8003c0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c10:	4299      	cmp	r1, r3
 8003c12:	d002      	beq.n	8003c1a <__swsetup_r+0x46>
 8003c14:	4628      	mov	r0, r5
 8003c16:	f000 f8af 	bl	8003d78 <_free_r>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c24:	81a3      	strh	r3, [r4, #12]
 8003c26:	2300      	movs	r3, #0
 8003c28:	6063      	str	r3, [r4, #4]
 8003c2a:	6923      	ldr	r3, [r4, #16]
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	f043 0308 	orr.w	r3, r3, #8
 8003c34:	81a3      	strh	r3, [r4, #12]
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	b94b      	cbnz	r3, 8003c4e <__swsetup_r+0x7a>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c44:	d003      	beq.n	8003c4e <__swsetup_r+0x7a>
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 fd29 	bl	80046a0 <__smakebuf_r>
 8003c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c52:	f013 0201 	ands.w	r2, r3, #1
 8003c56:	d00a      	beq.n	8003c6e <__swsetup_r+0x9a>
 8003c58:	2200      	movs	r2, #0
 8003c5a:	60a2      	str	r2, [r4, #8]
 8003c5c:	6962      	ldr	r2, [r4, #20]
 8003c5e:	4252      	negs	r2, r2
 8003c60:	61a2      	str	r2, [r4, #24]
 8003c62:	6922      	ldr	r2, [r4, #16]
 8003c64:	b942      	cbnz	r2, 8003c78 <__swsetup_r+0xa4>
 8003c66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c6a:	d1c5      	bne.n	8003bf8 <__swsetup_r+0x24>
 8003c6c:	bd38      	pop	{r3, r4, r5, pc}
 8003c6e:	0799      	lsls	r1, r3, #30
 8003c70:	bf58      	it	pl
 8003c72:	6962      	ldrpl	r2, [r4, #20]
 8003c74:	60a2      	str	r2, [r4, #8]
 8003c76:	e7f4      	b.n	8003c62 <__swsetup_r+0x8e>
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e7f7      	b.n	8003c6c <__swsetup_r+0x98>
 8003c7c:	20000018 	.word	0x20000018

08003c80 <memset>:
 8003c80:	4402      	add	r2, r0
 8003c82:	4603      	mov	r3, r0
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d100      	bne.n	8003c8a <memset+0xa>
 8003c88:	4770      	bx	lr
 8003c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8e:	e7f9      	b.n	8003c84 <memset+0x4>

08003c90 <_close_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	4d06      	ldr	r5, [pc, #24]	@ (8003cac <_close_r+0x1c>)
 8003c94:	2300      	movs	r3, #0
 8003c96:	4604      	mov	r4, r0
 8003c98:	4608      	mov	r0, r1
 8003c9a:	602b      	str	r3, [r5, #0]
 8003c9c:	f7fd f916 	bl	8000ecc <_close>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_close_r+0x1a>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_close_r+0x1a>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	2000026c 	.word	0x2000026c

08003cb0 <_lseek_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4d07      	ldr	r5, [pc, #28]	@ (8003cd0 <_lseek_r+0x20>)
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	4608      	mov	r0, r1
 8003cb8:	4611      	mov	r1, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	602a      	str	r2, [r5, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7fd f928 	bl	8000f14 <_lseek>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_lseek_r+0x1e>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_lseek_r+0x1e>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	2000026c 	.word	0x2000026c

08003cd4 <_read_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d07      	ldr	r5, [pc, #28]	@ (8003cf4 <_read_r+0x20>)
 8003cd8:	4604      	mov	r4, r0
 8003cda:	4608      	mov	r0, r1
 8003cdc:	4611      	mov	r1, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	602a      	str	r2, [r5, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f7fd f8d5 	bl	8000e92 <_read>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_read_r+0x1e>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_read_r+0x1e>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	2000026c 	.word	0x2000026c

08003cf8 <_write_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4d07      	ldr	r5, [pc, #28]	@ (8003d18 <_write_r+0x20>)
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	4608      	mov	r0, r1
 8003d00:	4611      	mov	r1, r2
 8003d02:	2200      	movs	r2, #0
 8003d04:	602a      	str	r2, [r5, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f7fc fff0 	bl	8000cec <_write>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d102      	bne.n	8003d16 <_write_r+0x1e>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	b103      	cbz	r3, 8003d16 <_write_r+0x1e>
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	2000026c 	.word	0x2000026c

08003d1c <__errno>:
 8003d1c:	4b01      	ldr	r3, [pc, #4]	@ (8003d24 <__errno+0x8>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000018 	.word	0x20000018

08003d28 <__libc_init_array>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d60 <__libc_init_array+0x38>)
 8003d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8003d64 <__libc_init_array+0x3c>)
 8003d2e:	1b64      	subs	r4, r4, r5
 8003d30:	10a4      	asrs	r4, r4, #2
 8003d32:	2600      	movs	r6, #0
 8003d34:	42a6      	cmp	r6, r4
 8003d36:	d109      	bne.n	8003d4c <__libc_init_array+0x24>
 8003d38:	4d0b      	ldr	r5, [pc, #44]	@ (8003d68 <__libc_init_array+0x40>)
 8003d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d6c <__libc_init_array+0x44>)
 8003d3c:	f000 fd52 	bl	80047e4 <_init>
 8003d40:	1b64      	subs	r4, r4, r5
 8003d42:	10a4      	asrs	r4, r4, #2
 8003d44:	2600      	movs	r6, #0
 8003d46:	42a6      	cmp	r6, r4
 8003d48:	d105      	bne.n	8003d56 <__libc_init_array+0x2e>
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d50:	4798      	blx	r3
 8003d52:	3601      	adds	r6, #1
 8003d54:	e7ee      	b.n	8003d34 <__libc_init_array+0xc>
 8003d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5a:	4798      	blx	r3
 8003d5c:	3601      	adds	r6, #1
 8003d5e:	e7f2      	b.n	8003d46 <__libc_init_array+0x1e>
 8003d60:	08004b78 	.word	0x08004b78
 8003d64:	08004b78 	.word	0x08004b78
 8003d68:	08004b78 	.word	0x08004b78
 8003d6c:	08004b7c 	.word	0x08004b7c

08003d70 <__retarget_lock_init_recursive>:
 8003d70:	4770      	bx	lr

08003d72 <__retarget_lock_acquire_recursive>:
 8003d72:	4770      	bx	lr

08003d74 <__retarget_lock_release_recursive>:
 8003d74:	4770      	bx	lr
	...

08003d78 <_free_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	d041      	beq.n	8003e04 <_free_r+0x8c>
 8003d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d84:	1f0c      	subs	r4, r1, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bfb8      	it	lt
 8003d8a:	18e4      	addlt	r4, r4, r3
 8003d8c:	f000 f8e0 	bl	8003f50 <__malloc_lock>
 8003d90:	4a1d      	ldr	r2, [pc, #116]	@ (8003e08 <_free_r+0x90>)
 8003d92:	6813      	ldr	r3, [r2, #0]
 8003d94:	b933      	cbnz	r3, 8003da4 <_free_r+0x2c>
 8003d96:	6063      	str	r3, [r4, #4]
 8003d98:	6014      	str	r4, [r2, #0]
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003da0:	f000 b8dc 	b.w	8003f5c <__malloc_unlock>
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	d908      	bls.n	8003dba <_free_r+0x42>
 8003da8:	6820      	ldr	r0, [r4, #0]
 8003daa:	1821      	adds	r1, r4, r0
 8003dac:	428b      	cmp	r3, r1
 8003dae:	bf01      	itttt	eq
 8003db0:	6819      	ldreq	r1, [r3, #0]
 8003db2:	685b      	ldreq	r3, [r3, #4]
 8003db4:	1809      	addeq	r1, r1, r0
 8003db6:	6021      	streq	r1, [r4, #0]
 8003db8:	e7ed      	b.n	8003d96 <_free_r+0x1e>
 8003dba:	461a      	mov	r2, r3
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	b10b      	cbz	r3, 8003dc4 <_free_r+0x4c>
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	d9fa      	bls.n	8003dba <_free_r+0x42>
 8003dc4:	6811      	ldr	r1, [r2, #0]
 8003dc6:	1850      	adds	r0, r2, r1
 8003dc8:	42a0      	cmp	r0, r4
 8003dca:	d10b      	bne.n	8003de4 <_free_r+0x6c>
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	4401      	add	r1, r0
 8003dd0:	1850      	adds	r0, r2, r1
 8003dd2:	4283      	cmp	r3, r0
 8003dd4:	6011      	str	r1, [r2, #0]
 8003dd6:	d1e0      	bne.n	8003d9a <_free_r+0x22>
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	6053      	str	r3, [r2, #4]
 8003dde:	4408      	add	r0, r1
 8003de0:	6010      	str	r0, [r2, #0]
 8003de2:	e7da      	b.n	8003d9a <_free_r+0x22>
 8003de4:	d902      	bls.n	8003dec <_free_r+0x74>
 8003de6:	230c      	movs	r3, #12
 8003de8:	602b      	str	r3, [r5, #0]
 8003dea:	e7d6      	b.n	8003d9a <_free_r+0x22>
 8003dec:	6820      	ldr	r0, [r4, #0]
 8003dee:	1821      	adds	r1, r4, r0
 8003df0:	428b      	cmp	r3, r1
 8003df2:	bf04      	itt	eq
 8003df4:	6819      	ldreq	r1, [r3, #0]
 8003df6:	685b      	ldreq	r3, [r3, #4]
 8003df8:	6063      	str	r3, [r4, #4]
 8003dfa:	bf04      	itt	eq
 8003dfc:	1809      	addeq	r1, r1, r0
 8003dfe:	6021      	streq	r1, [r4, #0]
 8003e00:	6054      	str	r4, [r2, #4]
 8003e02:	e7ca      	b.n	8003d9a <_free_r+0x22>
 8003e04:	bd38      	pop	{r3, r4, r5, pc}
 8003e06:	bf00      	nop
 8003e08:	20000278 	.word	0x20000278

08003e0c <sbrk_aligned>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8003e4c <sbrk_aligned+0x40>)
 8003e10:	460c      	mov	r4, r1
 8003e12:	6831      	ldr	r1, [r6, #0]
 8003e14:	4605      	mov	r5, r0
 8003e16:	b911      	cbnz	r1, 8003e1e <sbrk_aligned+0x12>
 8003e18:	f000 fcd4 	bl	80047c4 <_sbrk_r>
 8003e1c:	6030      	str	r0, [r6, #0]
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4628      	mov	r0, r5
 8003e22:	f000 fccf 	bl	80047c4 <_sbrk_r>
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	d103      	bne.n	8003e32 <sbrk_aligned+0x26>
 8003e2a:	f04f 34ff 	mov.w	r4, #4294967295
 8003e2e:	4620      	mov	r0, r4
 8003e30:	bd70      	pop	{r4, r5, r6, pc}
 8003e32:	1cc4      	adds	r4, r0, #3
 8003e34:	f024 0403 	bic.w	r4, r4, #3
 8003e38:	42a0      	cmp	r0, r4
 8003e3a:	d0f8      	beq.n	8003e2e <sbrk_aligned+0x22>
 8003e3c:	1a21      	subs	r1, r4, r0
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 fcc0 	bl	80047c4 <_sbrk_r>
 8003e44:	3001      	adds	r0, #1
 8003e46:	d1f2      	bne.n	8003e2e <sbrk_aligned+0x22>
 8003e48:	e7ef      	b.n	8003e2a <sbrk_aligned+0x1e>
 8003e4a:	bf00      	nop
 8003e4c:	20000274 	.word	0x20000274

08003e50 <_malloc_r>:
 8003e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e54:	1ccd      	adds	r5, r1, #3
 8003e56:	f025 0503 	bic.w	r5, r5, #3
 8003e5a:	3508      	adds	r5, #8
 8003e5c:	2d0c      	cmp	r5, #12
 8003e5e:	bf38      	it	cc
 8003e60:	250c      	movcc	r5, #12
 8003e62:	2d00      	cmp	r5, #0
 8003e64:	4606      	mov	r6, r0
 8003e66:	db01      	blt.n	8003e6c <_malloc_r+0x1c>
 8003e68:	42a9      	cmp	r1, r5
 8003e6a:	d904      	bls.n	8003e76 <_malloc_r+0x26>
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	6033      	str	r3, [r6, #0]
 8003e70:	2000      	movs	r0, #0
 8003e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f4c <_malloc_r+0xfc>
 8003e7a:	f000 f869 	bl	8003f50 <__malloc_lock>
 8003e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e82:	461c      	mov	r4, r3
 8003e84:	bb44      	cbnz	r4, 8003ed8 <_malloc_r+0x88>
 8003e86:	4629      	mov	r1, r5
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f7ff ffbf 	bl	8003e0c <sbrk_aligned>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	4604      	mov	r4, r0
 8003e92:	d158      	bne.n	8003f46 <_malloc_r+0xf6>
 8003e94:	f8d8 4000 	ldr.w	r4, [r8]
 8003e98:	4627      	mov	r7, r4
 8003e9a:	2f00      	cmp	r7, #0
 8003e9c:	d143      	bne.n	8003f26 <_malloc_r+0xd6>
 8003e9e:	2c00      	cmp	r4, #0
 8003ea0:	d04b      	beq.n	8003f3a <_malloc_r+0xea>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	4639      	mov	r1, r7
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	eb04 0903 	add.w	r9, r4, r3
 8003eac:	f000 fc8a 	bl	80047c4 <_sbrk_r>
 8003eb0:	4581      	cmp	r9, r0
 8003eb2:	d142      	bne.n	8003f3a <_malloc_r+0xea>
 8003eb4:	6821      	ldr	r1, [r4, #0]
 8003eb6:	1a6d      	subs	r5, r5, r1
 8003eb8:	4629      	mov	r1, r5
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f7ff ffa6 	bl	8003e0c <sbrk_aligned>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d03a      	beq.n	8003f3a <_malloc_r+0xea>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	442b      	add	r3, r5
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	f8d8 3000 	ldr.w	r3, [r8]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	bb62      	cbnz	r2, 8003f2c <_malloc_r+0xdc>
 8003ed2:	f8c8 7000 	str.w	r7, [r8]
 8003ed6:	e00f      	b.n	8003ef8 <_malloc_r+0xa8>
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	1b52      	subs	r2, r2, r5
 8003edc:	d420      	bmi.n	8003f20 <_malloc_r+0xd0>
 8003ede:	2a0b      	cmp	r2, #11
 8003ee0:	d917      	bls.n	8003f12 <_malloc_r+0xc2>
 8003ee2:	1961      	adds	r1, r4, r5
 8003ee4:	42a3      	cmp	r3, r4
 8003ee6:	6025      	str	r5, [r4, #0]
 8003ee8:	bf18      	it	ne
 8003eea:	6059      	strne	r1, [r3, #4]
 8003eec:	6863      	ldr	r3, [r4, #4]
 8003eee:	bf08      	it	eq
 8003ef0:	f8c8 1000 	streq.w	r1, [r8]
 8003ef4:	5162      	str	r2, [r4, r5]
 8003ef6:	604b      	str	r3, [r1, #4]
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f000 f82f 	bl	8003f5c <__malloc_unlock>
 8003efe:	f104 000b 	add.w	r0, r4, #11
 8003f02:	1d23      	adds	r3, r4, #4
 8003f04:	f020 0007 	bic.w	r0, r0, #7
 8003f08:	1ac2      	subs	r2, r0, r3
 8003f0a:	bf1c      	itt	ne
 8003f0c:	1a1b      	subne	r3, r3, r0
 8003f0e:	50a3      	strne	r3, [r4, r2]
 8003f10:	e7af      	b.n	8003e72 <_malloc_r+0x22>
 8003f12:	6862      	ldr	r2, [r4, #4]
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	bf0c      	ite	eq
 8003f18:	f8c8 2000 	streq.w	r2, [r8]
 8003f1c:	605a      	strne	r2, [r3, #4]
 8003f1e:	e7eb      	b.n	8003ef8 <_malloc_r+0xa8>
 8003f20:	4623      	mov	r3, r4
 8003f22:	6864      	ldr	r4, [r4, #4]
 8003f24:	e7ae      	b.n	8003e84 <_malloc_r+0x34>
 8003f26:	463c      	mov	r4, r7
 8003f28:	687f      	ldr	r7, [r7, #4]
 8003f2a:	e7b6      	b.n	8003e9a <_malloc_r+0x4a>
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	d1fb      	bne.n	8003f2c <_malloc_r+0xdc>
 8003f34:	2300      	movs	r3, #0
 8003f36:	6053      	str	r3, [r2, #4]
 8003f38:	e7de      	b.n	8003ef8 <_malloc_r+0xa8>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	6033      	str	r3, [r6, #0]
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f000 f80c 	bl	8003f5c <__malloc_unlock>
 8003f44:	e794      	b.n	8003e70 <_malloc_r+0x20>
 8003f46:	6005      	str	r5, [r0, #0]
 8003f48:	e7d6      	b.n	8003ef8 <_malloc_r+0xa8>
 8003f4a:	bf00      	nop
 8003f4c:	20000278 	.word	0x20000278

08003f50 <__malloc_lock>:
 8003f50:	4801      	ldr	r0, [pc, #4]	@ (8003f58 <__malloc_lock+0x8>)
 8003f52:	f7ff bf0e 	b.w	8003d72 <__retarget_lock_acquire_recursive>
 8003f56:	bf00      	nop
 8003f58:	20000270 	.word	0x20000270

08003f5c <__malloc_unlock>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	@ (8003f64 <__malloc_unlock+0x8>)
 8003f5e:	f7ff bf09 	b.w	8003d74 <__retarget_lock_release_recursive>
 8003f62:	bf00      	nop
 8003f64:	20000270 	.word	0x20000270

08003f68 <__sfputc_r>:
 8003f68:	6893      	ldr	r3, [r2, #8]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	b410      	push	{r4}
 8003f70:	6093      	str	r3, [r2, #8]
 8003f72:	da07      	bge.n	8003f84 <__sfputc_r+0x1c>
 8003f74:	6994      	ldr	r4, [r2, #24]
 8003f76:	42a3      	cmp	r3, r4
 8003f78:	db01      	blt.n	8003f7e <__sfputc_r+0x16>
 8003f7a:	290a      	cmp	r1, #10
 8003f7c:	d102      	bne.n	8003f84 <__sfputc_r+0x1c>
 8003f7e:	bc10      	pop	{r4}
 8003f80:	f7ff bde9 	b.w	8003b56 <__swbuf_r>
 8003f84:	6813      	ldr	r3, [r2, #0]
 8003f86:	1c58      	adds	r0, r3, #1
 8003f88:	6010      	str	r0, [r2, #0]
 8003f8a:	7019      	strb	r1, [r3, #0]
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	bc10      	pop	{r4}
 8003f90:	4770      	bx	lr

08003f92 <__sfputs_r>:
 8003f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f94:	4606      	mov	r6, r0
 8003f96:	460f      	mov	r7, r1
 8003f98:	4614      	mov	r4, r2
 8003f9a:	18d5      	adds	r5, r2, r3
 8003f9c:	42ac      	cmp	r4, r5
 8003f9e:	d101      	bne.n	8003fa4 <__sfputs_r+0x12>
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	e007      	b.n	8003fb4 <__sfputs_r+0x22>
 8003fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa8:	463a      	mov	r2, r7
 8003faa:	4630      	mov	r0, r6
 8003fac:	f7ff ffdc 	bl	8003f68 <__sfputc_r>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d1f3      	bne.n	8003f9c <__sfputs_r+0xa>
 8003fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fb8 <_vfiprintf_r>:
 8003fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbc:	460d      	mov	r5, r1
 8003fbe:	b09d      	sub	sp, #116	@ 0x74
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	4698      	mov	r8, r3
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	b118      	cbz	r0, 8003fd0 <_vfiprintf_r+0x18>
 8003fc8:	6a03      	ldr	r3, [r0, #32]
 8003fca:	b90b      	cbnz	r3, 8003fd0 <_vfiprintf_r+0x18>
 8003fcc:	f7ff fcd2 	bl	8003974 <__sinit>
 8003fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fd2:	07d9      	lsls	r1, r3, #31
 8003fd4:	d405      	bmi.n	8003fe2 <_vfiprintf_r+0x2a>
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	059a      	lsls	r2, r3, #22
 8003fda:	d402      	bmi.n	8003fe2 <_vfiprintf_r+0x2a>
 8003fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fde:	f7ff fec8 	bl	8003d72 <__retarget_lock_acquire_recursive>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	d501      	bpl.n	8003fec <_vfiprintf_r+0x34>
 8003fe8:	692b      	ldr	r3, [r5, #16]
 8003fea:	b99b      	cbnz	r3, 8004014 <_vfiprintf_r+0x5c>
 8003fec:	4629      	mov	r1, r5
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f7ff fdf0 	bl	8003bd4 <__swsetup_r>
 8003ff4:	b170      	cbz	r0, 8004014 <_vfiprintf_r+0x5c>
 8003ff6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ff8:	07dc      	lsls	r4, r3, #31
 8003ffa:	d504      	bpl.n	8004006 <_vfiprintf_r+0x4e>
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	b01d      	add	sp, #116	@ 0x74
 8004002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004006:	89ab      	ldrh	r3, [r5, #12]
 8004008:	0598      	lsls	r0, r3, #22
 800400a:	d4f7      	bmi.n	8003ffc <_vfiprintf_r+0x44>
 800400c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800400e:	f7ff feb1 	bl	8003d74 <__retarget_lock_release_recursive>
 8004012:	e7f3      	b.n	8003ffc <_vfiprintf_r+0x44>
 8004014:	2300      	movs	r3, #0
 8004016:	9309      	str	r3, [sp, #36]	@ 0x24
 8004018:	2320      	movs	r3, #32
 800401a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800401e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004022:	2330      	movs	r3, #48	@ 0x30
 8004024:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80041d4 <_vfiprintf_r+0x21c>
 8004028:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800402c:	f04f 0901 	mov.w	r9, #1
 8004030:	4623      	mov	r3, r4
 8004032:	469a      	mov	sl, r3
 8004034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004038:	b10a      	cbz	r2, 800403e <_vfiprintf_r+0x86>
 800403a:	2a25      	cmp	r2, #37	@ 0x25
 800403c:	d1f9      	bne.n	8004032 <_vfiprintf_r+0x7a>
 800403e:	ebba 0b04 	subs.w	fp, sl, r4
 8004042:	d00b      	beq.n	800405c <_vfiprintf_r+0xa4>
 8004044:	465b      	mov	r3, fp
 8004046:	4622      	mov	r2, r4
 8004048:	4629      	mov	r1, r5
 800404a:	4630      	mov	r0, r6
 800404c:	f7ff ffa1 	bl	8003f92 <__sfputs_r>
 8004050:	3001      	adds	r0, #1
 8004052:	f000 80a7 	beq.w	80041a4 <_vfiprintf_r+0x1ec>
 8004056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004058:	445a      	add	r2, fp
 800405a:	9209      	str	r2, [sp, #36]	@ 0x24
 800405c:	f89a 3000 	ldrb.w	r3, [sl]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 809f 	beq.w	80041a4 <_vfiprintf_r+0x1ec>
 8004066:	2300      	movs	r3, #0
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004070:	f10a 0a01 	add.w	sl, sl, #1
 8004074:	9304      	str	r3, [sp, #16]
 8004076:	9307      	str	r3, [sp, #28]
 8004078:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800407c:	931a      	str	r3, [sp, #104]	@ 0x68
 800407e:	4654      	mov	r4, sl
 8004080:	2205      	movs	r2, #5
 8004082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004086:	4853      	ldr	r0, [pc, #332]	@ (80041d4 <_vfiprintf_r+0x21c>)
 8004088:	f7fc f87a 	bl	8000180 <memchr>
 800408c:	9a04      	ldr	r2, [sp, #16]
 800408e:	b9d8      	cbnz	r0, 80040c8 <_vfiprintf_r+0x110>
 8004090:	06d1      	lsls	r1, r2, #27
 8004092:	bf44      	itt	mi
 8004094:	2320      	movmi	r3, #32
 8004096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800409a:	0713      	lsls	r3, r2, #28
 800409c:	bf44      	itt	mi
 800409e:	232b      	movmi	r3, #43	@ 0x2b
 80040a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040a4:	f89a 3000 	ldrb.w	r3, [sl]
 80040a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80040aa:	d015      	beq.n	80040d8 <_vfiprintf_r+0x120>
 80040ac:	9a07      	ldr	r2, [sp, #28]
 80040ae:	4654      	mov	r4, sl
 80040b0:	2000      	movs	r0, #0
 80040b2:	f04f 0c0a 	mov.w	ip, #10
 80040b6:	4621      	mov	r1, r4
 80040b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040bc:	3b30      	subs	r3, #48	@ 0x30
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d94b      	bls.n	800415a <_vfiprintf_r+0x1a2>
 80040c2:	b1b0      	cbz	r0, 80040f2 <_vfiprintf_r+0x13a>
 80040c4:	9207      	str	r2, [sp, #28]
 80040c6:	e014      	b.n	80040f2 <_vfiprintf_r+0x13a>
 80040c8:	eba0 0308 	sub.w	r3, r0, r8
 80040cc:	fa09 f303 	lsl.w	r3, r9, r3
 80040d0:	4313      	orrs	r3, r2
 80040d2:	9304      	str	r3, [sp, #16]
 80040d4:	46a2      	mov	sl, r4
 80040d6:	e7d2      	b.n	800407e <_vfiprintf_r+0xc6>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	1d19      	adds	r1, r3, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	9103      	str	r1, [sp, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bfbb      	ittet	lt
 80040e4:	425b      	neglt	r3, r3
 80040e6:	f042 0202 	orrlt.w	r2, r2, #2
 80040ea:	9307      	strge	r3, [sp, #28]
 80040ec:	9307      	strlt	r3, [sp, #28]
 80040ee:	bfb8      	it	lt
 80040f0:	9204      	strlt	r2, [sp, #16]
 80040f2:	7823      	ldrb	r3, [r4, #0]
 80040f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80040f6:	d10a      	bne.n	800410e <_vfiprintf_r+0x156>
 80040f8:	7863      	ldrb	r3, [r4, #1]
 80040fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80040fc:	d132      	bne.n	8004164 <_vfiprintf_r+0x1ac>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	1d1a      	adds	r2, r3, #4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	9203      	str	r2, [sp, #12]
 8004106:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800410a:	3402      	adds	r4, #2
 800410c:	9305      	str	r3, [sp, #20]
 800410e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80041d8 <_vfiprintf_r+0x220>
 8004112:	7821      	ldrb	r1, [r4, #0]
 8004114:	2203      	movs	r2, #3
 8004116:	4650      	mov	r0, sl
 8004118:	f7fc f832 	bl	8000180 <memchr>
 800411c:	b138      	cbz	r0, 800412e <_vfiprintf_r+0x176>
 800411e:	9b04      	ldr	r3, [sp, #16]
 8004120:	eba0 000a 	sub.w	r0, r0, sl
 8004124:	2240      	movs	r2, #64	@ 0x40
 8004126:	4082      	lsls	r2, r0
 8004128:	4313      	orrs	r3, r2
 800412a:	3401      	adds	r4, #1
 800412c:	9304      	str	r3, [sp, #16]
 800412e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004132:	482a      	ldr	r0, [pc, #168]	@ (80041dc <_vfiprintf_r+0x224>)
 8004134:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004138:	2206      	movs	r2, #6
 800413a:	f7fc f821 	bl	8000180 <memchr>
 800413e:	2800      	cmp	r0, #0
 8004140:	d03f      	beq.n	80041c2 <_vfiprintf_r+0x20a>
 8004142:	4b27      	ldr	r3, [pc, #156]	@ (80041e0 <_vfiprintf_r+0x228>)
 8004144:	bb1b      	cbnz	r3, 800418e <_vfiprintf_r+0x1d6>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	3307      	adds	r3, #7
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	3308      	adds	r3, #8
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004154:	443b      	add	r3, r7
 8004156:	9309      	str	r3, [sp, #36]	@ 0x24
 8004158:	e76a      	b.n	8004030 <_vfiprintf_r+0x78>
 800415a:	fb0c 3202 	mla	r2, ip, r2, r3
 800415e:	460c      	mov	r4, r1
 8004160:	2001      	movs	r0, #1
 8004162:	e7a8      	b.n	80040b6 <_vfiprintf_r+0xfe>
 8004164:	2300      	movs	r3, #0
 8004166:	3401      	adds	r4, #1
 8004168:	9305      	str	r3, [sp, #20]
 800416a:	4619      	mov	r1, r3
 800416c:	f04f 0c0a 	mov.w	ip, #10
 8004170:	4620      	mov	r0, r4
 8004172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004176:	3a30      	subs	r2, #48	@ 0x30
 8004178:	2a09      	cmp	r2, #9
 800417a:	d903      	bls.n	8004184 <_vfiprintf_r+0x1cc>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0c6      	beq.n	800410e <_vfiprintf_r+0x156>
 8004180:	9105      	str	r1, [sp, #20]
 8004182:	e7c4      	b.n	800410e <_vfiprintf_r+0x156>
 8004184:	fb0c 2101 	mla	r1, ip, r1, r2
 8004188:	4604      	mov	r4, r0
 800418a:	2301      	movs	r3, #1
 800418c:	e7f0      	b.n	8004170 <_vfiprintf_r+0x1b8>
 800418e:	ab03      	add	r3, sp, #12
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	462a      	mov	r2, r5
 8004194:	4b13      	ldr	r3, [pc, #76]	@ (80041e4 <_vfiprintf_r+0x22c>)
 8004196:	a904      	add	r1, sp, #16
 8004198:	4630      	mov	r0, r6
 800419a:	f3af 8000 	nop.w
 800419e:	4607      	mov	r7, r0
 80041a0:	1c78      	adds	r0, r7, #1
 80041a2:	d1d6      	bne.n	8004152 <_vfiprintf_r+0x19a>
 80041a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041a6:	07d9      	lsls	r1, r3, #31
 80041a8:	d405      	bmi.n	80041b6 <_vfiprintf_r+0x1fe>
 80041aa:	89ab      	ldrh	r3, [r5, #12]
 80041ac:	059a      	lsls	r2, r3, #22
 80041ae:	d402      	bmi.n	80041b6 <_vfiprintf_r+0x1fe>
 80041b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041b2:	f7ff fddf 	bl	8003d74 <__retarget_lock_release_recursive>
 80041b6:	89ab      	ldrh	r3, [r5, #12]
 80041b8:	065b      	lsls	r3, r3, #25
 80041ba:	f53f af1f 	bmi.w	8003ffc <_vfiprintf_r+0x44>
 80041be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041c0:	e71e      	b.n	8004000 <_vfiprintf_r+0x48>
 80041c2:	ab03      	add	r3, sp, #12
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	462a      	mov	r2, r5
 80041c8:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <_vfiprintf_r+0x22c>)
 80041ca:	a904      	add	r1, sp, #16
 80041cc:	4630      	mov	r0, r6
 80041ce:	f000 f879 	bl	80042c4 <_printf_i>
 80041d2:	e7e4      	b.n	800419e <_vfiprintf_r+0x1e6>
 80041d4:	08004b3c 	.word	0x08004b3c
 80041d8:	08004b42 	.word	0x08004b42
 80041dc:	08004b46 	.word	0x08004b46
 80041e0:	00000000 	.word	0x00000000
 80041e4:	08003f93 	.word	0x08003f93

080041e8 <_printf_common>:
 80041e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	4616      	mov	r6, r2
 80041ee:	4698      	mov	r8, r3
 80041f0:	688a      	ldr	r2, [r1, #8]
 80041f2:	690b      	ldr	r3, [r1, #16]
 80041f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041f8:	4293      	cmp	r3, r2
 80041fa:	bfb8      	it	lt
 80041fc:	4613      	movlt	r3, r2
 80041fe:	6033      	str	r3, [r6, #0]
 8004200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004204:	4607      	mov	r7, r0
 8004206:	460c      	mov	r4, r1
 8004208:	b10a      	cbz	r2, 800420e <_printf_common+0x26>
 800420a:	3301      	adds	r3, #1
 800420c:	6033      	str	r3, [r6, #0]
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	0699      	lsls	r1, r3, #26
 8004212:	bf42      	ittt	mi
 8004214:	6833      	ldrmi	r3, [r6, #0]
 8004216:	3302      	addmi	r3, #2
 8004218:	6033      	strmi	r3, [r6, #0]
 800421a:	6825      	ldr	r5, [r4, #0]
 800421c:	f015 0506 	ands.w	r5, r5, #6
 8004220:	d106      	bne.n	8004230 <_printf_common+0x48>
 8004222:	f104 0a19 	add.w	sl, r4, #25
 8004226:	68e3      	ldr	r3, [r4, #12]
 8004228:	6832      	ldr	r2, [r6, #0]
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	42ab      	cmp	r3, r5
 800422e:	dc26      	bgt.n	800427e <_printf_common+0x96>
 8004230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004234:	6822      	ldr	r2, [r4, #0]
 8004236:	3b00      	subs	r3, #0
 8004238:	bf18      	it	ne
 800423a:	2301      	movne	r3, #1
 800423c:	0692      	lsls	r2, r2, #26
 800423e:	d42b      	bmi.n	8004298 <_printf_common+0xb0>
 8004240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004244:	4641      	mov	r1, r8
 8004246:	4638      	mov	r0, r7
 8004248:	47c8      	blx	r9
 800424a:	3001      	adds	r0, #1
 800424c:	d01e      	beq.n	800428c <_printf_common+0xa4>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	6922      	ldr	r2, [r4, #16]
 8004252:	f003 0306 	and.w	r3, r3, #6
 8004256:	2b04      	cmp	r3, #4
 8004258:	bf02      	ittt	eq
 800425a:	68e5      	ldreq	r5, [r4, #12]
 800425c:	6833      	ldreq	r3, [r6, #0]
 800425e:	1aed      	subeq	r5, r5, r3
 8004260:	68a3      	ldr	r3, [r4, #8]
 8004262:	bf0c      	ite	eq
 8004264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004268:	2500      	movne	r5, #0
 800426a:	4293      	cmp	r3, r2
 800426c:	bfc4      	itt	gt
 800426e:	1a9b      	subgt	r3, r3, r2
 8004270:	18ed      	addgt	r5, r5, r3
 8004272:	2600      	movs	r6, #0
 8004274:	341a      	adds	r4, #26
 8004276:	42b5      	cmp	r5, r6
 8004278:	d11a      	bne.n	80042b0 <_printf_common+0xc8>
 800427a:	2000      	movs	r0, #0
 800427c:	e008      	b.n	8004290 <_printf_common+0xa8>
 800427e:	2301      	movs	r3, #1
 8004280:	4652      	mov	r2, sl
 8004282:	4641      	mov	r1, r8
 8004284:	4638      	mov	r0, r7
 8004286:	47c8      	blx	r9
 8004288:	3001      	adds	r0, #1
 800428a:	d103      	bne.n	8004294 <_printf_common+0xac>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004294:	3501      	adds	r5, #1
 8004296:	e7c6      	b.n	8004226 <_printf_common+0x3e>
 8004298:	18e1      	adds	r1, r4, r3
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	2030      	movs	r0, #48	@ 0x30
 800429e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042a2:	4422      	add	r2, r4
 80042a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042ac:	3302      	adds	r3, #2
 80042ae:	e7c7      	b.n	8004240 <_printf_common+0x58>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4622      	mov	r2, r4
 80042b4:	4641      	mov	r1, r8
 80042b6:	4638      	mov	r0, r7
 80042b8:	47c8      	blx	r9
 80042ba:	3001      	adds	r0, #1
 80042bc:	d0e6      	beq.n	800428c <_printf_common+0xa4>
 80042be:	3601      	adds	r6, #1
 80042c0:	e7d9      	b.n	8004276 <_printf_common+0x8e>
	...

080042c4 <_printf_i>:
 80042c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	7e0f      	ldrb	r7, [r1, #24]
 80042ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042cc:	2f78      	cmp	r7, #120	@ 0x78
 80042ce:	4691      	mov	r9, r2
 80042d0:	4680      	mov	r8, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	469a      	mov	sl, r3
 80042d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042da:	d807      	bhi.n	80042ec <_printf_i+0x28>
 80042dc:	2f62      	cmp	r7, #98	@ 0x62
 80042de:	d80a      	bhi.n	80042f6 <_printf_i+0x32>
 80042e0:	2f00      	cmp	r7, #0
 80042e2:	f000 80d2 	beq.w	800448a <_printf_i+0x1c6>
 80042e6:	2f58      	cmp	r7, #88	@ 0x58
 80042e8:	f000 80b9 	beq.w	800445e <_printf_i+0x19a>
 80042ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042f4:	e03a      	b.n	800436c <_printf_i+0xa8>
 80042f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042fa:	2b15      	cmp	r3, #21
 80042fc:	d8f6      	bhi.n	80042ec <_printf_i+0x28>
 80042fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004304 <_printf_i+0x40>)
 8004300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004304:	0800435d 	.word	0x0800435d
 8004308:	08004371 	.word	0x08004371
 800430c:	080042ed 	.word	0x080042ed
 8004310:	080042ed 	.word	0x080042ed
 8004314:	080042ed 	.word	0x080042ed
 8004318:	080042ed 	.word	0x080042ed
 800431c:	08004371 	.word	0x08004371
 8004320:	080042ed 	.word	0x080042ed
 8004324:	080042ed 	.word	0x080042ed
 8004328:	080042ed 	.word	0x080042ed
 800432c:	080042ed 	.word	0x080042ed
 8004330:	08004471 	.word	0x08004471
 8004334:	0800439b 	.word	0x0800439b
 8004338:	0800442b 	.word	0x0800442b
 800433c:	080042ed 	.word	0x080042ed
 8004340:	080042ed 	.word	0x080042ed
 8004344:	08004493 	.word	0x08004493
 8004348:	080042ed 	.word	0x080042ed
 800434c:	0800439b 	.word	0x0800439b
 8004350:	080042ed 	.word	0x080042ed
 8004354:	080042ed 	.word	0x080042ed
 8004358:	08004433 	.word	0x08004433
 800435c:	6833      	ldr	r3, [r6, #0]
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6032      	str	r2, [r6, #0]
 8004364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800436c:	2301      	movs	r3, #1
 800436e:	e09d      	b.n	80044ac <_printf_i+0x1e8>
 8004370:	6833      	ldr	r3, [r6, #0]
 8004372:	6820      	ldr	r0, [r4, #0]
 8004374:	1d19      	adds	r1, r3, #4
 8004376:	6031      	str	r1, [r6, #0]
 8004378:	0606      	lsls	r6, r0, #24
 800437a:	d501      	bpl.n	8004380 <_printf_i+0xbc>
 800437c:	681d      	ldr	r5, [r3, #0]
 800437e:	e003      	b.n	8004388 <_printf_i+0xc4>
 8004380:	0645      	lsls	r5, r0, #25
 8004382:	d5fb      	bpl.n	800437c <_printf_i+0xb8>
 8004384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004388:	2d00      	cmp	r5, #0
 800438a:	da03      	bge.n	8004394 <_printf_i+0xd0>
 800438c:	232d      	movs	r3, #45	@ 0x2d
 800438e:	426d      	negs	r5, r5
 8004390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004394:	4859      	ldr	r0, [pc, #356]	@ (80044fc <_printf_i+0x238>)
 8004396:	230a      	movs	r3, #10
 8004398:	e011      	b.n	80043be <_printf_i+0xfa>
 800439a:	6821      	ldr	r1, [r4, #0]
 800439c:	6833      	ldr	r3, [r6, #0]
 800439e:	0608      	lsls	r0, r1, #24
 80043a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80043a4:	d402      	bmi.n	80043ac <_printf_i+0xe8>
 80043a6:	0649      	lsls	r1, r1, #25
 80043a8:	bf48      	it	mi
 80043aa:	b2ad      	uxthmi	r5, r5
 80043ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80043ae:	4853      	ldr	r0, [pc, #332]	@ (80044fc <_printf_i+0x238>)
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	bf14      	ite	ne
 80043b4:	230a      	movne	r3, #10
 80043b6:	2308      	moveq	r3, #8
 80043b8:	2100      	movs	r1, #0
 80043ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043be:	6866      	ldr	r6, [r4, #4]
 80043c0:	60a6      	str	r6, [r4, #8]
 80043c2:	2e00      	cmp	r6, #0
 80043c4:	bfa2      	ittt	ge
 80043c6:	6821      	ldrge	r1, [r4, #0]
 80043c8:	f021 0104 	bicge.w	r1, r1, #4
 80043cc:	6021      	strge	r1, [r4, #0]
 80043ce:	b90d      	cbnz	r5, 80043d4 <_printf_i+0x110>
 80043d0:	2e00      	cmp	r6, #0
 80043d2:	d04b      	beq.n	800446c <_printf_i+0x1a8>
 80043d4:	4616      	mov	r6, r2
 80043d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80043da:	fb03 5711 	mls	r7, r3, r1, r5
 80043de:	5dc7      	ldrb	r7, [r0, r7]
 80043e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043e4:	462f      	mov	r7, r5
 80043e6:	42bb      	cmp	r3, r7
 80043e8:	460d      	mov	r5, r1
 80043ea:	d9f4      	bls.n	80043d6 <_printf_i+0x112>
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d10b      	bne.n	8004408 <_printf_i+0x144>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	07df      	lsls	r7, r3, #31
 80043f4:	d508      	bpl.n	8004408 <_printf_i+0x144>
 80043f6:	6923      	ldr	r3, [r4, #16]
 80043f8:	6861      	ldr	r1, [r4, #4]
 80043fa:	4299      	cmp	r1, r3
 80043fc:	bfde      	ittt	le
 80043fe:	2330      	movle	r3, #48	@ 0x30
 8004400:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004404:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004408:	1b92      	subs	r2, r2, r6
 800440a:	6122      	str	r2, [r4, #16]
 800440c:	f8cd a000 	str.w	sl, [sp]
 8004410:	464b      	mov	r3, r9
 8004412:	aa03      	add	r2, sp, #12
 8004414:	4621      	mov	r1, r4
 8004416:	4640      	mov	r0, r8
 8004418:	f7ff fee6 	bl	80041e8 <_printf_common>
 800441c:	3001      	adds	r0, #1
 800441e:	d14a      	bne.n	80044b6 <_printf_i+0x1f2>
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	b004      	add	sp, #16
 8004426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	f043 0320 	orr.w	r3, r3, #32
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	4833      	ldr	r0, [pc, #204]	@ (8004500 <_printf_i+0x23c>)
 8004434:	2778      	movs	r7, #120	@ 0x78
 8004436:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	6831      	ldr	r1, [r6, #0]
 800443e:	061f      	lsls	r7, r3, #24
 8004440:	f851 5b04 	ldr.w	r5, [r1], #4
 8004444:	d402      	bmi.n	800444c <_printf_i+0x188>
 8004446:	065f      	lsls	r7, r3, #25
 8004448:	bf48      	it	mi
 800444a:	b2ad      	uxthmi	r5, r5
 800444c:	6031      	str	r1, [r6, #0]
 800444e:	07d9      	lsls	r1, r3, #31
 8004450:	bf44      	itt	mi
 8004452:	f043 0320 	orrmi.w	r3, r3, #32
 8004456:	6023      	strmi	r3, [r4, #0]
 8004458:	b11d      	cbz	r5, 8004462 <_printf_i+0x19e>
 800445a:	2310      	movs	r3, #16
 800445c:	e7ac      	b.n	80043b8 <_printf_i+0xf4>
 800445e:	4827      	ldr	r0, [pc, #156]	@ (80044fc <_printf_i+0x238>)
 8004460:	e7e9      	b.n	8004436 <_printf_i+0x172>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	f023 0320 	bic.w	r3, r3, #32
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	e7f6      	b.n	800445a <_printf_i+0x196>
 800446c:	4616      	mov	r6, r2
 800446e:	e7bd      	b.n	80043ec <_printf_i+0x128>
 8004470:	6833      	ldr	r3, [r6, #0]
 8004472:	6825      	ldr	r5, [r4, #0]
 8004474:	6961      	ldr	r1, [r4, #20]
 8004476:	1d18      	adds	r0, r3, #4
 8004478:	6030      	str	r0, [r6, #0]
 800447a:	062e      	lsls	r6, r5, #24
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	d501      	bpl.n	8004484 <_printf_i+0x1c0>
 8004480:	6019      	str	r1, [r3, #0]
 8004482:	e002      	b.n	800448a <_printf_i+0x1c6>
 8004484:	0668      	lsls	r0, r5, #25
 8004486:	d5fb      	bpl.n	8004480 <_printf_i+0x1bc>
 8004488:	8019      	strh	r1, [r3, #0]
 800448a:	2300      	movs	r3, #0
 800448c:	6123      	str	r3, [r4, #16]
 800448e:	4616      	mov	r6, r2
 8004490:	e7bc      	b.n	800440c <_printf_i+0x148>
 8004492:	6833      	ldr	r3, [r6, #0]
 8004494:	1d1a      	adds	r2, r3, #4
 8004496:	6032      	str	r2, [r6, #0]
 8004498:	681e      	ldr	r6, [r3, #0]
 800449a:	6862      	ldr	r2, [r4, #4]
 800449c:	2100      	movs	r1, #0
 800449e:	4630      	mov	r0, r6
 80044a0:	f7fb fe6e 	bl	8000180 <memchr>
 80044a4:	b108      	cbz	r0, 80044aa <_printf_i+0x1e6>
 80044a6:	1b80      	subs	r0, r0, r6
 80044a8:	6060      	str	r0, [r4, #4]
 80044aa:	6863      	ldr	r3, [r4, #4]
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	2300      	movs	r3, #0
 80044b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044b4:	e7aa      	b.n	800440c <_printf_i+0x148>
 80044b6:	6923      	ldr	r3, [r4, #16]
 80044b8:	4632      	mov	r2, r6
 80044ba:	4649      	mov	r1, r9
 80044bc:	4640      	mov	r0, r8
 80044be:	47d0      	blx	sl
 80044c0:	3001      	adds	r0, #1
 80044c2:	d0ad      	beq.n	8004420 <_printf_i+0x15c>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	079b      	lsls	r3, r3, #30
 80044c8:	d413      	bmi.n	80044f2 <_printf_i+0x22e>
 80044ca:	68e0      	ldr	r0, [r4, #12]
 80044cc:	9b03      	ldr	r3, [sp, #12]
 80044ce:	4298      	cmp	r0, r3
 80044d0:	bfb8      	it	lt
 80044d2:	4618      	movlt	r0, r3
 80044d4:	e7a6      	b.n	8004424 <_printf_i+0x160>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4632      	mov	r2, r6
 80044da:	4649      	mov	r1, r9
 80044dc:	4640      	mov	r0, r8
 80044de:	47d0      	blx	sl
 80044e0:	3001      	adds	r0, #1
 80044e2:	d09d      	beq.n	8004420 <_printf_i+0x15c>
 80044e4:	3501      	adds	r5, #1
 80044e6:	68e3      	ldr	r3, [r4, #12]
 80044e8:	9903      	ldr	r1, [sp, #12]
 80044ea:	1a5b      	subs	r3, r3, r1
 80044ec:	42ab      	cmp	r3, r5
 80044ee:	dcf2      	bgt.n	80044d6 <_printf_i+0x212>
 80044f0:	e7eb      	b.n	80044ca <_printf_i+0x206>
 80044f2:	2500      	movs	r5, #0
 80044f4:	f104 0619 	add.w	r6, r4, #25
 80044f8:	e7f5      	b.n	80044e6 <_printf_i+0x222>
 80044fa:	bf00      	nop
 80044fc:	08004b4d 	.word	0x08004b4d
 8004500:	08004b5e 	.word	0x08004b5e

08004504 <__sflush_r>:
 8004504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	0716      	lsls	r6, r2, #28
 800450c:	4605      	mov	r5, r0
 800450e:	460c      	mov	r4, r1
 8004510:	d454      	bmi.n	80045bc <__sflush_r+0xb8>
 8004512:	684b      	ldr	r3, [r1, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	dc02      	bgt.n	800451e <__sflush_r+0x1a>
 8004518:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	dd48      	ble.n	80045b0 <__sflush_r+0xac>
 800451e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004520:	2e00      	cmp	r6, #0
 8004522:	d045      	beq.n	80045b0 <__sflush_r+0xac>
 8004524:	2300      	movs	r3, #0
 8004526:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800452a:	682f      	ldr	r7, [r5, #0]
 800452c:	6a21      	ldr	r1, [r4, #32]
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	d030      	beq.n	8004594 <__sflush_r+0x90>
 8004532:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	0759      	lsls	r1, r3, #29
 8004538:	d505      	bpl.n	8004546 <__sflush_r+0x42>
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	1ad2      	subs	r2, r2, r3
 800453e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004540:	b10b      	cbz	r3, 8004546 <__sflush_r+0x42>
 8004542:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004544:	1ad2      	subs	r2, r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800454a:	6a21      	ldr	r1, [r4, #32]
 800454c:	4628      	mov	r0, r5
 800454e:	47b0      	blx	r6
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	d106      	bne.n	8004564 <__sflush_r+0x60>
 8004556:	6829      	ldr	r1, [r5, #0]
 8004558:	291d      	cmp	r1, #29
 800455a:	d82b      	bhi.n	80045b4 <__sflush_r+0xb0>
 800455c:	4a28      	ldr	r2, [pc, #160]	@ (8004600 <__sflush_r+0xfc>)
 800455e:	410a      	asrs	r2, r1
 8004560:	07d6      	lsls	r6, r2, #31
 8004562:	d427      	bmi.n	80045b4 <__sflush_r+0xb0>
 8004564:	2200      	movs	r2, #0
 8004566:	6062      	str	r2, [r4, #4]
 8004568:	04d9      	lsls	r1, r3, #19
 800456a:	6922      	ldr	r2, [r4, #16]
 800456c:	6022      	str	r2, [r4, #0]
 800456e:	d504      	bpl.n	800457a <__sflush_r+0x76>
 8004570:	1c42      	adds	r2, r0, #1
 8004572:	d101      	bne.n	8004578 <__sflush_r+0x74>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b903      	cbnz	r3, 800457a <__sflush_r+0x76>
 8004578:	6560      	str	r0, [r4, #84]	@ 0x54
 800457a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800457c:	602f      	str	r7, [r5, #0]
 800457e:	b1b9      	cbz	r1, 80045b0 <__sflush_r+0xac>
 8004580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004584:	4299      	cmp	r1, r3
 8004586:	d002      	beq.n	800458e <__sflush_r+0x8a>
 8004588:	4628      	mov	r0, r5
 800458a:	f7ff fbf5 	bl	8003d78 <_free_r>
 800458e:	2300      	movs	r3, #0
 8004590:	6363      	str	r3, [r4, #52]	@ 0x34
 8004592:	e00d      	b.n	80045b0 <__sflush_r+0xac>
 8004594:	2301      	movs	r3, #1
 8004596:	4628      	mov	r0, r5
 8004598:	47b0      	blx	r6
 800459a:	4602      	mov	r2, r0
 800459c:	1c50      	adds	r0, r2, #1
 800459e:	d1c9      	bne.n	8004534 <__sflush_r+0x30>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0c6      	beq.n	8004534 <__sflush_r+0x30>
 80045a6:	2b1d      	cmp	r3, #29
 80045a8:	d001      	beq.n	80045ae <__sflush_r+0xaa>
 80045aa:	2b16      	cmp	r3, #22
 80045ac:	d11d      	bne.n	80045ea <__sflush_r+0xe6>
 80045ae:	602f      	str	r7, [r5, #0]
 80045b0:	2000      	movs	r0, #0
 80045b2:	e021      	b.n	80045f8 <__sflush_r+0xf4>
 80045b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045b8:	b21b      	sxth	r3, r3
 80045ba:	e01a      	b.n	80045f2 <__sflush_r+0xee>
 80045bc:	690f      	ldr	r7, [r1, #16]
 80045be:	2f00      	cmp	r7, #0
 80045c0:	d0f6      	beq.n	80045b0 <__sflush_r+0xac>
 80045c2:	0793      	lsls	r3, r2, #30
 80045c4:	680e      	ldr	r6, [r1, #0]
 80045c6:	bf08      	it	eq
 80045c8:	694b      	ldreq	r3, [r1, #20]
 80045ca:	600f      	str	r7, [r1, #0]
 80045cc:	bf18      	it	ne
 80045ce:	2300      	movne	r3, #0
 80045d0:	1bf6      	subs	r6, r6, r7
 80045d2:	608b      	str	r3, [r1, #8]
 80045d4:	2e00      	cmp	r6, #0
 80045d6:	ddeb      	ble.n	80045b0 <__sflush_r+0xac>
 80045d8:	6a21      	ldr	r1, [r4, #32]
 80045da:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80045de:	4633      	mov	r3, r6
 80045e0:	463a      	mov	r2, r7
 80045e2:	4628      	mov	r0, r5
 80045e4:	47e0      	blx	ip
 80045e6:	2800      	cmp	r0, #0
 80045e8:	dc07      	bgt.n	80045fa <__sflush_r+0xf6>
 80045ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fa:	4407      	add	r7, r0
 80045fc:	1a36      	subs	r6, r6, r0
 80045fe:	e7e9      	b.n	80045d4 <__sflush_r+0xd0>
 8004600:	dfbffffe 	.word	0xdfbffffe

08004604 <_fflush_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	690b      	ldr	r3, [r1, #16]
 8004608:	4605      	mov	r5, r0
 800460a:	460c      	mov	r4, r1
 800460c:	b913      	cbnz	r3, 8004614 <_fflush_r+0x10>
 800460e:	2500      	movs	r5, #0
 8004610:	4628      	mov	r0, r5
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	b118      	cbz	r0, 800461e <_fflush_r+0x1a>
 8004616:	6a03      	ldr	r3, [r0, #32]
 8004618:	b90b      	cbnz	r3, 800461e <_fflush_r+0x1a>
 800461a:	f7ff f9ab 	bl	8003974 <__sinit>
 800461e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f3      	beq.n	800460e <_fflush_r+0xa>
 8004626:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004628:	07d0      	lsls	r0, r2, #31
 800462a:	d404      	bmi.n	8004636 <_fflush_r+0x32>
 800462c:	0599      	lsls	r1, r3, #22
 800462e:	d402      	bmi.n	8004636 <_fflush_r+0x32>
 8004630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004632:	f7ff fb9e 	bl	8003d72 <__retarget_lock_acquire_recursive>
 8004636:	4628      	mov	r0, r5
 8004638:	4621      	mov	r1, r4
 800463a:	f7ff ff63 	bl	8004504 <__sflush_r>
 800463e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004640:	07da      	lsls	r2, r3, #31
 8004642:	4605      	mov	r5, r0
 8004644:	d4e4      	bmi.n	8004610 <_fflush_r+0xc>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	059b      	lsls	r3, r3, #22
 800464a:	d4e1      	bmi.n	8004610 <_fflush_r+0xc>
 800464c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800464e:	f7ff fb91 	bl	8003d74 <__retarget_lock_release_recursive>
 8004652:	e7dd      	b.n	8004610 <_fflush_r+0xc>

08004654 <__swhatbuf_r>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	460c      	mov	r4, r1
 8004658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800465c:	2900      	cmp	r1, #0
 800465e:	b096      	sub	sp, #88	@ 0x58
 8004660:	4615      	mov	r5, r2
 8004662:	461e      	mov	r6, r3
 8004664:	da0d      	bge.n	8004682 <__swhatbuf_r+0x2e>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800466c:	f04f 0100 	mov.w	r1, #0
 8004670:	bf14      	ite	ne
 8004672:	2340      	movne	r3, #64	@ 0x40
 8004674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004678:	2000      	movs	r0, #0
 800467a:	6031      	str	r1, [r6, #0]
 800467c:	602b      	str	r3, [r5, #0]
 800467e:	b016      	add	sp, #88	@ 0x58
 8004680:	bd70      	pop	{r4, r5, r6, pc}
 8004682:	466a      	mov	r2, sp
 8004684:	f000 f87c 	bl	8004780 <_fstat_r>
 8004688:	2800      	cmp	r0, #0
 800468a:	dbec      	blt.n	8004666 <__swhatbuf_r+0x12>
 800468c:	9901      	ldr	r1, [sp, #4]
 800468e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004696:	4259      	negs	r1, r3
 8004698:	4159      	adcs	r1, r3
 800469a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800469e:	e7eb      	b.n	8004678 <__swhatbuf_r+0x24>

080046a0 <__smakebuf_r>:
 80046a0:	898b      	ldrh	r3, [r1, #12]
 80046a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046a4:	079d      	lsls	r5, r3, #30
 80046a6:	4606      	mov	r6, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	d507      	bpl.n	80046bc <__smakebuf_r+0x1c>
 80046ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	6123      	str	r3, [r4, #16]
 80046b4:	2301      	movs	r3, #1
 80046b6:	6163      	str	r3, [r4, #20]
 80046b8:	b003      	add	sp, #12
 80046ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046bc:	ab01      	add	r3, sp, #4
 80046be:	466a      	mov	r2, sp
 80046c0:	f7ff ffc8 	bl	8004654 <__swhatbuf_r>
 80046c4:	9f00      	ldr	r7, [sp, #0]
 80046c6:	4605      	mov	r5, r0
 80046c8:	4639      	mov	r1, r7
 80046ca:	4630      	mov	r0, r6
 80046cc:	f7ff fbc0 	bl	8003e50 <_malloc_r>
 80046d0:	b948      	cbnz	r0, 80046e6 <__smakebuf_r+0x46>
 80046d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046d6:	059a      	lsls	r2, r3, #22
 80046d8:	d4ee      	bmi.n	80046b8 <__smakebuf_r+0x18>
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	f043 0302 	orr.w	r3, r3, #2
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	e7e2      	b.n	80046ac <__smakebuf_r+0xc>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	6020      	str	r0, [r4, #0]
 80046ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	9b01      	ldr	r3, [sp, #4]
 80046f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046f6:	b15b      	cbz	r3, 8004710 <__smakebuf_r+0x70>
 80046f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046fc:	4630      	mov	r0, r6
 80046fe:	f000 f851 	bl	80047a4 <_isatty_r>
 8004702:	b128      	cbz	r0, 8004710 <__smakebuf_r+0x70>
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	81a3      	strh	r3, [r4, #12]
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	431d      	orrs	r5, r3
 8004714:	81a5      	strh	r5, [r4, #12]
 8004716:	e7cf      	b.n	80046b8 <__smakebuf_r+0x18>

08004718 <_putc_r>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	460d      	mov	r5, r1
 800471c:	4614      	mov	r4, r2
 800471e:	4606      	mov	r6, r0
 8004720:	b118      	cbz	r0, 800472a <_putc_r+0x12>
 8004722:	6a03      	ldr	r3, [r0, #32]
 8004724:	b90b      	cbnz	r3, 800472a <_putc_r+0x12>
 8004726:	f7ff f925 	bl	8003974 <__sinit>
 800472a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800472c:	07d8      	lsls	r0, r3, #31
 800472e:	d405      	bmi.n	800473c <_putc_r+0x24>
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	0599      	lsls	r1, r3, #22
 8004734:	d402      	bmi.n	800473c <_putc_r+0x24>
 8004736:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004738:	f7ff fb1b 	bl	8003d72 <__retarget_lock_acquire_recursive>
 800473c:	68a3      	ldr	r3, [r4, #8]
 800473e:	3b01      	subs	r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	60a3      	str	r3, [r4, #8]
 8004744:	da05      	bge.n	8004752 <_putc_r+0x3a>
 8004746:	69a2      	ldr	r2, [r4, #24]
 8004748:	4293      	cmp	r3, r2
 800474a:	db12      	blt.n	8004772 <_putc_r+0x5a>
 800474c:	b2eb      	uxtb	r3, r5
 800474e:	2b0a      	cmp	r3, #10
 8004750:	d00f      	beq.n	8004772 <_putc_r+0x5a>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	6022      	str	r2, [r4, #0]
 8004758:	701d      	strb	r5, [r3, #0]
 800475a:	b2ed      	uxtb	r5, r5
 800475c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800475e:	07da      	lsls	r2, r3, #31
 8004760:	d405      	bmi.n	800476e <_putc_r+0x56>
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	059b      	lsls	r3, r3, #22
 8004766:	d402      	bmi.n	800476e <_putc_r+0x56>
 8004768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800476a:	f7ff fb03 	bl	8003d74 <__retarget_lock_release_recursive>
 800476e:	4628      	mov	r0, r5
 8004770:	bd70      	pop	{r4, r5, r6, pc}
 8004772:	4629      	mov	r1, r5
 8004774:	4622      	mov	r2, r4
 8004776:	4630      	mov	r0, r6
 8004778:	f7ff f9ed 	bl	8003b56 <__swbuf_r>
 800477c:	4605      	mov	r5, r0
 800477e:	e7ed      	b.n	800475c <_putc_r+0x44>

08004780 <_fstat_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	@ (80047a0 <_fstat_r+0x20>)
 8004784:	2300      	movs	r3, #0
 8004786:	4604      	mov	r4, r0
 8004788:	4608      	mov	r0, r1
 800478a:	4611      	mov	r1, r2
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	f7fc fba8 	bl	8000ee2 <_fstat>
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	d102      	bne.n	800479c <_fstat_r+0x1c>
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	b103      	cbz	r3, 800479c <_fstat_r+0x1c>
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	bd38      	pop	{r3, r4, r5, pc}
 800479e:	bf00      	nop
 80047a0:	2000026c 	.word	0x2000026c

080047a4 <_isatty_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d06      	ldr	r5, [pc, #24]	@ (80047c0 <_isatty_r+0x1c>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fc fba6 	bl	8000f00 <_isatty>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_isatty_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_isatty_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	2000026c 	.word	0x2000026c

080047c4 <_sbrk_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d06      	ldr	r5, [pc, #24]	@ (80047e0 <_sbrk_r+0x1c>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	f7fc fbac 	bl	8000f2c <_sbrk>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_sbrk_r+0x1a>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_sbrk_r+0x1a>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	2000026c 	.word	0x2000026c

080047e4 <_init>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr

080047f0 <_fini>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr
