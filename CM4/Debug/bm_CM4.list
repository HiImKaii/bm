
bm_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000570c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800584c  0800584c  0000684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c00  08005c00  0000709c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c00  08005c00  00006c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c08  08005c08  0000709c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c08  08005c08  00006c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c0c  08005c0c  00006c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08005c10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000009c  08005cac  0000709c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08005cac  00007354  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012535  00000000  00000000  000070c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5b  00000000  00000000  000195fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0001c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e62  00000000  00000000  0001d450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df58  00000000  00000000  0001e2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a8d  00000000  00000000  0003c20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6fe0  00000000  00000000  00050c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107c77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005698  00000000  00000000  00107cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0010d354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000009c 	.word	0x2000009c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005834 	.word	0x08005834

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a0 	.word	0x200000a0
 800017c:	08005834 	.word	0x08005834

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <KeyExpansion>:
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
    0x6C, 0xD8, 0xAB, 0x4D, 0x9A
};


static void KeyExpansion(const uint8_t *key, uint8_t *RoundKey) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint8_t temp[4];

    for (i = 0; i < 8; ++i) {
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e030      	b.n	800058e <KeyExpansion+0x72>
        RoundKey[i * 4 + 0] = key[i * 4 + 0];
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	441a      	add	r2, r3
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	6839      	ldr	r1, [r7, #0]
 800053a:	440b      	add	r3, r1
 800053c:	7812      	ldrb	r2, [r2, #0]
 800053e:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 1] = key[i * 4 + 1];
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	3301      	adds	r3, #1
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	441a      	add	r2, r3
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	3301      	adds	r3, #1
 8000550:	6839      	ldr	r1, [r7, #0]
 8000552:	440b      	add	r3, r1
 8000554:	7812      	ldrb	r2, [r2, #0]
 8000556:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 2] = key[i * 4 + 2];
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	3302      	adds	r3, #2
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	3302      	adds	r3, #2
 8000568:	6839      	ldr	r1, [r7, #0]
 800056a:	440b      	add	r3, r1
 800056c:	7812      	ldrb	r2, [r2, #0]
 800056e:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 3] = key[i * 4 + 3];
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	3303      	adds	r3, #3
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	441a      	add	r2, r3
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	3303      	adds	r3, #3
 8000580:	6839      	ldr	r1, [r7, #0]
 8000582:	440b      	add	r3, r1
 8000584:	7812      	ldrb	r2, [r2, #0]
 8000586:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; ++i) {
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	3301      	adds	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	2b07      	cmp	r3, #7
 8000592:	d9cb      	bls.n	800052c <KeyExpansion+0x10>
    }

    for (i = 8; i < 60; ++i) {
 8000594:	2308      	movs	r3, #8
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e099      	b.n	80006ce <KeyExpansion+0x1b2>
        temp[0] = RoundKey[(i - 1) * 4 + 0];
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3b01      	subs	r3, #1
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	733b      	strb	r3, [r7, #12]
        temp[1] = RoundKey[(i - 1) * 4 + 1];
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	3301      	adds	r3, #1
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	737b      	strb	r3, [r7, #13]
        temp[2] = RoundKey[(i - 1) * 4 + 2];
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	3302      	adds	r3, #2
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	73bb      	strb	r3, [r7, #14]
        temp[3] = RoundKey[(i - 1) * 4 + 3];
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	3303      	adds	r3, #3
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	73fb      	strb	r3, [r7, #15]

        if (i % 8 == 0) {
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d11b      	bne.n	800061a <KeyExpansion+0xfe>
            uint8_t t = temp[0];
 80005e2:	7b3b      	ldrb	r3, [r7, #12]
 80005e4:	74fb      	strb	r3, [r7, #19]
            temp[0] = sbox[temp[1]] ^ Rcon[i / 8];
 80005e6:	7b7b      	ldrb	r3, [r7, #13]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b3e      	ldr	r3, [pc, #248]	@ (80006e4 <KeyExpansion+0x1c8>)
 80005ec:	5c9a      	ldrb	r2, [r3, r2]
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	493d      	ldr	r1, [pc, #244]	@ (80006e8 <KeyExpansion+0x1cc>)
 80005f4:	5ccb      	ldrb	r3, [r1, r3]
 80005f6:	4053      	eors	r3, r2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	733b      	strb	r3, [r7, #12]
            temp[1] = sbox[temp[2]];
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	461a      	mov	r2, r3
 8000600:	4b38      	ldr	r3, [pc, #224]	@ (80006e4 <KeyExpansion+0x1c8>)
 8000602:	5c9b      	ldrb	r3, [r3, r2]
 8000604:	737b      	strb	r3, [r7, #13]
            temp[2] = sbox[temp[3]];
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	461a      	mov	r2, r3
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <KeyExpansion+0x1c8>)
 800060c:	5c9b      	ldrb	r3, [r3, r2]
 800060e:	73bb      	strb	r3, [r7, #14]
            temp[3] = sbox[t];
 8000610:	7cfb      	ldrb	r3, [r7, #19]
 8000612:	4a34      	ldr	r2, [pc, #208]	@ (80006e4 <KeyExpansion+0x1c8>)
 8000614:	5cd3      	ldrb	r3, [r2, r3]
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	e018      	b.n	800064c <KeyExpansion+0x130>
        } else if (i % 8 == 4) {
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	f003 0307 	and.w	r3, r3, #7
 8000620:	2b04      	cmp	r3, #4
 8000622:	d113      	bne.n	800064c <KeyExpansion+0x130>
            temp[0] = sbox[temp[0]];
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	461a      	mov	r2, r3
 8000628:	4b2e      	ldr	r3, [pc, #184]	@ (80006e4 <KeyExpansion+0x1c8>)
 800062a:	5c9b      	ldrb	r3, [r3, r2]
 800062c:	733b      	strb	r3, [r7, #12]
            temp[1] = sbox[temp[1]];
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	461a      	mov	r2, r3
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <KeyExpansion+0x1c8>)
 8000634:	5c9b      	ldrb	r3, [r3, r2]
 8000636:	737b      	strb	r3, [r7, #13]
            temp[2] = sbox[temp[2]];
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	461a      	mov	r2, r3
 800063c:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <KeyExpansion+0x1c8>)
 800063e:	5c9b      	ldrb	r3, [r3, r2]
 8000640:	73bb      	strb	r3, [r7, #14]
            temp[3] = sbox[temp[3]];
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	461a      	mov	r2, r3
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <KeyExpansion+0x1c8>)
 8000648:	5c9b      	ldrb	r3, [r3, r2]
 800064a:	73fb      	strb	r3, [r7, #15]
        }

        RoundKey[i * 4 + 0] = RoundKey[(i - 8) * 4 + 0] ^ temp[0];
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3b08      	subs	r3, #8
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	4413      	add	r3, r2
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	7b3a      	ldrb	r2, [r7, #12]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	6838      	ldr	r0, [r7, #0]
 8000660:	4403      	add	r3, r0
 8000662:	404a      	eors	r2, r1
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 1] = RoundKey[(i - 8) * 4 + 1] ^ temp[1];
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3b08      	subs	r3, #8
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	3301      	adds	r3, #1
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	4413      	add	r3, r2
 8000674:	7819      	ldrb	r1, [r3, #0]
 8000676:	7b7a      	ldrb	r2, [r7, #13]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3301      	adds	r3, #1
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	4403      	add	r3, r0
 8000682:	404a      	eors	r2, r1
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 2] = RoundKey[(i - 8) * 4 + 2] ^ temp[2];
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	3b08      	subs	r3, #8
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	3302      	adds	r3, #2
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	4413      	add	r3, r2
 8000694:	7819      	ldrb	r1, [r3, #0]
 8000696:	7bba      	ldrb	r2, [r7, #14]
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	3302      	adds	r3, #2
 800069e:	6838      	ldr	r0, [r7, #0]
 80006a0:	4403      	add	r3, r0
 80006a2:	404a      	eors	r2, r1
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	701a      	strb	r2, [r3, #0]
        RoundKey[i * 4 + 3] = RoundKey[(i - 8) * 4 + 3] ^ temp[3];
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	3b08      	subs	r3, #8
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	3303      	adds	r3, #3
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	7819      	ldrb	r1, [r3, #0]
 80006b6:	7bfa      	ldrb	r2, [r7, #15]
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	3303      	adds	r3, #3
 80006be:	6838      	ldr	r0, [r7, #0]
 80006c0:	4403      	add	r3, r0
 80006c2:	404a      	eors	r2, r1
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	701a      	strb	r2, [r3, #0]
    for (i = 8; i < 60; ++i) {
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	3301      	adds	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2b3b      	cmp	r3, #59	@ 0x3b
 80006d2:	f67f af62 	bls.w	800059a <KeyExpansion+0x7e>
    }
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	371c      	adds	r7, #28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	08005974 	.word	0x08005974
 80006e8:	08005b74 	.word	0x08005b74

080006ec <AddRoundKey>:

static void AddRoundKey(uint8_t *state, const uint8_t *RoundKey) {
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	e010      	b.n	800071e <AddRoundKey+0x32>
        state[i] ^= RoundKey[i];
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	7819      	ldrb	r1, [r3, #0]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	4413      	add	r3, r2
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	4403      	add	r3, r0
 8000712:	404a      	eors	r2, r1
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	ddeb      	ble.n	80006fc <AddRoundKey+0x10>
    }
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <SubBytes>:

static void SubBytes(uint8_t *state) {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e00d      	b.n	800075a <SubBytes+0x2a>
        state[i] = sbox[state[i]];
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	4a07      	ldr	r2, [pc, #28]	@ (800076c <SubBytes+0x3c>)
 8000750:	5c52      	ldrb	r2, [r2, r1]
 8000752:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3301      	adds	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	ddee      	ble.n	800073e <SubBytes+0xe>
    }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	08005974 	.word	0x08005974

08000770 <InvSubBytes>:

static void InvSubBytes(uint8_t *state) {
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e00d      	b.n	800079a <InvSubBytes+0x2a>
        state[i] = rsbox[state[i]];
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	4a07      	ldr	r2, [pc, #28]	@ (80007ac <InvSubBytes+0x3c>)
 8000790:	5c52      	ldrb	r2, [r2, r1]
 8000792:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	ddee      	ble.n	800077e <InvSubBytes+0xe>
    }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	08005a74 	.word	0x08005a74

080007b0 <ShiftRows>:

static void ShiftRows(uint8_t *state) {
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    uint8_t temp;

    // Row 1
    temp = state[1];
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	785b      	ldrb	r3, [r3, #1]
 80007bc:	73fb      	strb	r3, [r7, #15]
    state[1] = state[5];
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3301      	adds	r3, #1
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	7952      	ldrb	r2, [r2, #5]
 80007c6:	701a      	strb	r2, [r3, #0]
    state[5] = state[9];
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3305      	adds	r3, #5
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	7a52      	ldrb	r2, [r2, #9]
 80007d0:	701a      	strb	r2, [r3, #0]
    state[9] = state[13];
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3309      	adds	r3, #9
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	7b52      	ldrb	r2, [r2, #13]
 80007da:	701a      	strb	r2, [r3, #0]
    state[13] = temp;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	330d      	adds	r3, #13
 80007e0:	7bfa      	ldrb	r2, [r7, #15]
 80007e2:	701a      	strb	r2, [r3, #0]

    // Row 2
    temp = state[2];
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	789b      	ldrb	r3, [r3, #2]
 80007e8:	73fb      	strb	r3, [r7, #15]
    state[2] = state[10];
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3302      	adds	r3, #2
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	7a92      	ldrb	r2, [r2, #10]
 80007f2:	701a      	strb	r2, [r3, #0]
    state[10] = temp;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	330a      	adds	r3, #10
 80007f8:	7bfa      	ldrb	r2, [r7, #15]
 80007fa:	701a      	strb	r2, [r3, #0]
    temp = state[6];
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	799b      	ldrb	r3, [r3, #6]
 8000800:	73fb      	strb	r3, [r7, #15]
    state[6] = state[14];
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3306      	adds	r3, #6
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	7b92      	ldrb	r2, [r2, #14]
 800080a:	701a      	strb	r2, [r3, #0]
    state[14] = temp;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	330e      	adds	r3, #14
 8000810:	7bfa      	ldrb	r2, [r7, #15]
 8000812:	701a      	strb	r2, [r3, #0]

    // Row 3
    temp = state[3];
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	78db      	ldrb	r3, [r3, #3]
 8000818:	73fb      	strb	r3, [r7, #15]
    state[3] = state[15];
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3303      	adds	r3, #3
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	7bd2      	ldrb	r2, [r2, #15]
 8000822:	701a      	strb	r2, [r3, #0]
    state[15] = state[11];
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	330f      	adds	r3, #15
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	7ad2      	ldrb	r2, [r2, #11]
 800082c:	701a      	strb	r2, [r3, #0]
    state[11] = state[7];
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	330b      	adds	r3, #11
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	79d2      	ldrb	r2, [r2, #7]
 8000836:	701a      	strb	r2, [r3, #0]
    state[7] = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3307      	adds	r3, #7
 800083c:	7bfa      	ldrb	r2, [r7, #15]
 800083e:	701a      	strb	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <InvShiftRows>:

static void InvShiftRows(uint8_t *state) {
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
    uint8_t temp;

    // Row 1
    temp = state[13];
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7b5b      	ldrb	r3, [r3, #13]
 8000856:	73fb      	strb	r3, [r7, #15]
    state[13] = state[9];
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	330d      	adds	r3, #13
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	7a52      	ldrb	r2, [r2, #9]
 8000860:	701a      	strb	r2, [r3, #0]
    state[9] = state[5];
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3309      	adds	r3, #9
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	7952      	ldrb	r2, [r2, #5]
 800086a:	701a      	strb	r2, [r3, #0]
    state[5] = state[1];
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3305      	adds	r3, #5
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	7852      	ldrb	r2, [r2, #1]
 8000874:	701a      	strb	r2, [r3, #0]
    state[1] = temp;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3301      	adds	r3, #1
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	701a      	strb	r2, [r3, #0]

    // Row 2
    temp = state[2];
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	789b      	ldrb	r3, [r3, #2]
 8000882:	73fb      	strb	r3, [r7, #15]
    state[2] = state[10];
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3302      	adds	r3, #2
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	7a92      	ldrb	r2, [r2, #10]
 800088c:	701a      	strb	r2, [r3, #0]
    state[10] = temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	330a      	adds	r3, #10
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	701a      	strb	r2, [r3, #0]
    temp = state[6];
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	799b      	ldrb	r3, [r3, #6]
 800089a:	73fb      	strb	r3, [r7, #15]
    state[6] = state[14];
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3306      	adds	r3, #6
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	7b92      	ldrb	r2, [r2, #14]
 80008a4:	701a      	strb	r2, [r3, #0]
    state[14] = temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	330e      	adds	r3, #14
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	701a      	strb	r2, [r3, #0]

    // Row 3
    temp = state[3];
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	78db      	ldrb	r3, [r3, #3]
 80008b2:	73fb      	strb	r3, [r7, #15]
    state[3] = state[7];
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3303      	adds	r3, #3
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	79d2      	ldrb	r2, [r2, #7]
 80008bc:	701a      	strb	r2, [r3, #0]
    state[7] = state[11];
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3307      	adds	r3, #7
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	7ad2      	ldrb	r2, [r2, #11]
 80008c6:	701a      	strb	r2, [r3, #0]
    state[11] = state[15];
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	330b      	adds	r3, #11
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	7bd2      	ldrb	r2, [r2, #15]
 80008d0:	701a      	strb	r2, [r3, #0]
    state[15] = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	330f      	adds	r3, #15
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	701a      	strb	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <MixColumns>:

static void MixColumns(uint8_t *state) {
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    // Implementation of MixColumns step
    for (int i = 0; i < 4; ++i) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e072      	b.n	80009d8 <MixColumns+0xf4>
        uint8_t *col = &state[i * 4];
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        uint8_t a[4] = {col[0], col[1], col[2], col[3]};
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	733b      	strb	r3, [r7, #12]
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	785b      	ldrb	r3, [r3, #1]
 8000908:	737b      	strb	r3, [r7, #13]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	789b      	ldrb	r3, [r3, #2]
 800090e:	73bb      	strb	r3, [r7, #14]
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	78db      	ldrb	r3, [r3, #3]
 8000914:	73fb      	strb	r3, [r7, #15]
        col[0] = (uint8_t)(0x02 * a[0] ^ 0x03 * a[1] ^ a[2] ^ a[3]);
 8000916:	7b3b      	ldrb	r3, [r7, #12]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	b25a      	sxtb	r2, r3
 800091e:	7b7b      	ldrb	r3, [r7, #13]
 8000920:	4619      	mov	r1, r3
 8000922:	0049      	lsls	r1, r1, #1
 8000924:	440b      	add	r3, r1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	b25b      	sxtb	r3, r3
 800092a:	4053      	eors	r3, r2
 800092c:	b25a      	sxtb	r2, r3
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	b25b      	sxtb	r3, r3
 8000932:	4053      	eors	r3, r2
 8000934:	b25a      	sxtb	r2, r3
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4053      	eors	r3, r2
 800093c:	b25b      	sxtb	r3, r3
 800093e:	b2da      	uxtb	r2, r3
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	701a      	strb	r2, [r3, #0]
        col[1] = (uint8_t)(a[0] ^ 0x02 * a[1] ^ 0x03 * a[2] ^ a[3]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	b25a      	sxtb	r2, r3
 8000948:	7b7b      	ldrb	r3, [r7, #13]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	b25b      	sxtb	r3, r3
 8000950:	4053      	eors	r3, r2
 8000952:	b25a      	sxtb	r2, r3
 8000954:	7bbb      	ldrb	r3, [r7, #14]
 8000956:	4619      	mov	r1, r3
 8000958:	0049      	lsls	r1, r1, #1
 800095a:	440b      	add	r3, r1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	b25b      	sxtb	r3, r3
 8000960:	4053      	eors	r3, r2
 8000962:	b25a      	sxtb	r2, r3
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	b25b      	sxtb	r3, r3
 8000968:	4053      	eors	r3, r2
 800096a:	b25a      	sxtb	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	3301      	adds	r3, #1
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	701a      	strb	r2, [r3, #0]
        col[2] = (uint8_t)(a[0] ^ a[1] ^ 0x02 * a[2] ^ 0x03 * a[3]);
 8000974:	7b3a      	ldrb	r2, [r7, #12]
 8000976:	7b7b      	ldrb	r3, [r7, #13]
 8000978:	4053      	eors	r3, r2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	b25a      	sxtb	r2, r3
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	b25b      	sxtb	r3, r3
 8000986:	4053      	eors	r3, r2
 8000988:	b25a      	sxtb	r2, r3
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4619      	mov	r1, r3
 800098e:	0049      	lsls	r1, r1, #1
 8000990:	440b      	add	r3, r1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	b25b      	sxtb	r3, r3
 8000996:	4053      	eors	r3, r2
 8000998:	b25a      	sxtb	r2, r3
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	3302      	adds	r3, #2
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
        col[3] = (uint8_t)(0x03 * a[0] ^ a[1] ^ a[2] ^ 0x02 * a[3]);
 80009a2:	7b3b      	ldrb	r3, [r7, #12]
 80009a4:	461a      	mov	r2, r3
 80009a6:	0052      	lsls	r2, r2, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	7b7b      	ldrb	r3, [r7, #13]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	4053      	eors	r3, r2
 80009b4:	b25a      	sxtb	r2, r3
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	4053      	eors	r3, r2
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	4053      	eors	r3, r2
 80009c8:	b25a      	sxtb	r2, r3
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	3303      	adds	r3, #3
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	dd89      	ble.n	80008f2 <MixColumns+0xe>
    }
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <InvMixColumns>:

static void InvMixColumns(uint8_t *state) {
 80009ea:	b480      	push	{r7}
 80009ec:	b087      	sub	sp, #28
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
    // Implementation of inverse MixColumns step
    for (int i = 0; i < 4; ++i) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	e0af      	b.n	8000b58 <InvMixColumns+0x16e>
        uint8_t *col = &state[i * 4];
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	461a      	mov	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        uint8_t a[4] = {col[0], col[1], col[2], col[3]};
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	733b      	strb	r3, [r7, #12]
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	785b      	ldrb	r3, [r3, #1]
 8000a0e:	737b      	strb	r3, [r7, #13]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	789b      	ldrb	r3, [r3, #2]
 8000a14:	73bb      	strb	r3, [r7, #14]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	78db      	ldrb	r3, [r3, #3]
 8000a1a:	73fb      	strb	r3, [r7, #15]
        col[0] = (uint8_t)(0x0e * a[0] ^ 0x0b * a[1] ^ 0x0d * a[2] ^ 0x09 * a[3]);
 8000a1c:	7b3b      	ldrb	r3, [r7, #12]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	00d2      	lsls	r2, r2, #3
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	b25a      	sxtb	r2, r3
 8000a2a:	7b7b      	ldrb	r3, [r7, #13]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	0089      	lsls	r1, r1, #2
 8000a30:	4419      	add	r1, r3
 8000a32:	0049      	lsls	r1, r1, #1
 8000a34:	440b      	add	r3, r1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	4053      	eors	r3, r2
 8000a3c:	b25a      	sxtb	r2, r3
 8000a3e:	7bbb      	ldrb	r3, [r7, #14]
 8000a40:	4619      	mov	r1, r3
 8000a42:	0049      	lsls	r1, r1, #1
 8000a44:	4419      	add	r1, r3
 8000a46:	0089      	lsls	r1, r1, #2
 8000a48:	440b      	add	r3, r1
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	4053      	eors	r3, r2
 8000a50:	b25a      	sxtb	r2, r3
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	4619      	mov	r1, r3
 8000a56:	00c9      	lsls	r1, r1, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	4053      	eors	r3, r2
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	701a      	strb	r2, [r3, #0]
        col[1] = (uint8_t)(0x09 * a[0] ^ 0x0e * a[1] ^ 0x0b * a[2] ^ 0x0d * a[3]);
 8000a68:	7b3b      	ldrb	r3, [r7, #12]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	00d2      	lsls	r2, r2, #3
 8000a6e:	4413      	add	r3, r2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	b25a      	sxtb	r2, r3
 8000a74:	7b7b      	ldrb	r3, [r7, #13]
 8000a76:	4619      	mov	r1, r3
 8000a78:	00c9      	lsls	r1, r1, #3
 8000a7a:	1acb      	subs	r3, r1, r3
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	4053      	eors	r3, r2
 8000a84:	b25a      	sxtb	r2, r3
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	0089      	lsls	r1, r1, #2
 8000a8c:	4419      	add	r1, r3
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	440b      	add	r3, r1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	4053      	eors	r3, r2
 8000a98:	b25a      	sxtb	r2, r3
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	4419      	add	r1, r3
 8000aa2:	0089      	lsls	r1, r1, #2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	4053      	eors	r3, r2
 8000aac:	b25a      	sxtb	r2, r3
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	701a      	strb	r2, [r3, #0]
        col[2] = (uint8_t)(0x0d * a[0] ^ 0x09 * a[1] ^ 0x0e * a[2] ^ 0x0b * a[3]);
 8000ab6:	7b3b      	ldrb	r3, [r7, #12]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	0052      	lsls	r2, r2, #1
 8000abc:	441a      	add	r2, r3
 8000abe:	0092      	lsls	r2, r2, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	b25a      	sxtb	r2, r3
 8000ac6:	7b7b      	ldrb	r3, [r7, #13]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	00c9      	lsls	r1, r1, #3
 8000acc:	440b      	add	r3, r1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	4053      	eors	r3, r2
 8000ad4:	b25a      	sxtb	r2, r3
 8000ad6:	7bbb      	ldrb	r3, [r7, #14]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	00c9      	lsls	r1, r1, #3
 8000adc:	1acb      	subs	r3, r1, r3
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	4053      	eors	r3, r2
 8000ae6:	b25a      	sxtb	r2, r3
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	4619      	mov	r1, r3
 8000aec:	0089      	lsls	r1, r1, #2
 8000aee:	4419      	add	r1, r3
 8000af0:	0049      	lsls	r1, r1, #1
 8000af2:	440b      	add	r3, r1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	4053      	eors	r3, r2
 8000afa:	b25a      	sxtb	r2, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	3302      	adds	r3, #2
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	701a      	strb	r2, [r3, #0]
        col[3] = (uint8_t)(0x0b * a[0] ^ 0x0d * a[1] ^ 0x09 * a[2] ^ 0x0e * a[3]);
 8000b04:	7b3b      	ldrb	r3, [r7, #12]
 8000b06:	461a      	mov	r2, r3
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	441a      	add	r2, r3
 8000b0c:	0052      	lsls	r2, r2, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	b25a      	sxtb	r2, r3
 8000b14:	7b7b      	ldrb	r3, [r7, #13]
 8000b16:	4619      	mov	r1, r3
 8000b18:	0049      	lsls	r1, r1, #1
 8000b1a:	4419      	add	r1, r3
 8000b1c:	0089      	lsls	r1, r1, #2
 8000b1e:	440b      	add	r3, r1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	4053      	eors	r3, r2
 8000b26:	b25a      	sxtb	r2, r3
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	00c9      	lsls	r1, r1, #3
 8000b2e:	440b      	add	r3, r1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	4053      	eors	r3, r2
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	00c9      	lsls	r1, r1, #3
 8000b3e:	1acb      	subs	r3, r1, r3
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	4053      	eors	r3, r2
 8000b48:	b25a      	sxtb	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	3303      	adds	r3, #3
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	f77f af4c 	ble.w	80009f8 <InvMixColumns+0xe>
    }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	371c      	adds	r7, #28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <AES_Init>:

void AES_Init(AES_Context *ctx, const uint8_t *key) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
    KeyExpansion(key, ctx->RoundKey);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6838      	ldr	r0, [r7, #0]
 8000b7c:	f7ff fcce 	bl	800051c <KeyExpansion>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <AES_Encrypt>:

void AES_Encrypt(AES_Context *ctx, uint8_t *input, uint8_t *output) {
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
    uint8_t state[AES_BLOCK_SIZE];
    memcpy(state, input, AES_BLOCK_SIZE);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f107 0414 	add.w	r4, r7, #20
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	6859      	ldr	r1, [r3, #4]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    AddRoundKey(state, ctx->RoundKey);
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd9d 	bl	80006ec <AddRoundKey>

    for (int round = 1; round < 14; ++round) {
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bb6:	e01b      	b.n	8000bf0 <AES_Encrypt+0x68>
        SubBytes(state);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fdb7 	bl	8000730 <SubBytes>
        ShiftRows(state);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fdf2 	bl	80007b0 <ShiftRows>
        MixColumns(state);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fe87 	bl	80008e4 <MixColumns>
        AddRoundKey(state, ctx->RoundKey + round * AES_BLOCK_SIZE);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	441a      	add	r2, r3
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fd81 	bl	80006ec <AddRoundKey>
    for (int round = 1; round < 14; ++round) {
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	3301      	adds	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf2:	2b0d      	cmp	r3, #13
 8000bf4:	dde0      	ble.n	8000bb8 <AES_Encrypt+0x30>
    }

    SubBytes(state);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fd98 	bl	8000730 <SubBytes>
    ShiftRows(state);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fdd3 	bl	80007b0 <ShiftRows>
    AddRoundKey(state, ctx->RoundKey + 14 * AES_BLOCK_SIZE);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fd68 	bl	80006ec <AddRoundKey>

    memcpy(output, state, AES_BLOCK_SIZE);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	461d      	mov	r5, r3
 8000c20:	f107 0414 	add.w	r4, r7, #20
 8000c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c26:	6028      	str	r0, [r5, #0]
 8000c28:	6069      	str	r1, [r5, #4]
 8000c2a:	60aa      	str	r2, [r5, #8]
 8000c2c:	60eb      	str	r3, [r5, #12]
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bdb0      	pop	{r4, r5, r7, pc}

08000c36 <AES_Decrypt>:

void AES_Decrypt(AES_Context *ctx, uint8_t *input, uint8_t *output) {
 8000c36:	b5b0      	push	{r4, r5, r7, lr}
 8000c38:	b08a      	sub	sp, #40	@ 0x28
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
    uint8_t state[AES_BLOCK_SIZE];
    memcpy(state, input, AES_BLOCK_SIZE);
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f107 0414 	add.w	r4, r7, #20
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	6859      	ldr	r1, [r3, #4]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    AddRoundKey(state, ctx->RoundKey + 14 * AES_BLOCK_SIZE);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fd44 	bl	80006ec <AddRoundKey>

    for (int round = 13; round > 0; --round) {
 8000c64:	230d      	movs	r3, #13
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c68:	e01b      	b.n	8000ca2 <AES_Decrypt+0x6c>
        InvShiftRows(state);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fdeb 	bl	800084a <InvShiftRows>
        InvSubBytes(state);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fd79 	bl	8000770 <InvSubBytes>
        AddRoundKey(state, ctx->RoundKey + round * AES_BLOCK_SIZE);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	441a      	add	r2, r3
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fd2d 	bl	80006ec <AddRoundKey>
        InvMixColumns(state);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fea7 	bl	80009ea <InvMixColumns>
    for (int round = 13; round > 0; --round) {
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	dce0      	bgt.n	8000c6a <AES_Decrypt+0x34>
    }

    InvShiftRows(state);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fdcc 	bl	800084a <InvShiftRows>
    InvSubBytes(state);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fd5a 	bl	8000770 <InvSubBytes>
    AddRoundKey(state, ctx->RoundKey);
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fd11 	bl	80006ec <AddRoundKey>

    memcpy(output, state, AES_BLOCK_SIZE);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	461d      	mov	r5, r3
 8000cce:	f107 0414 	add.w	r4, r7, #20
 8000cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd4:	6028      	str	r0, [r5, #0]
 8000cd6:	6069      	str	r1, [r5, #4]
 8000cd8:	60aa      	str	r2, [r5, #8]
 8000cda:	60eb      	str	r3, [r5, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	@ 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bdb0      	pop	{r4, r5, r7, pc}

08000ce4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cf0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d08:	68fb      	ldr	r3, [r7, #12]
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b5b0      	push	{r4, r5, r7, lr}
 8000d16:	b0d4      	sub	sp, #336	@ 0x150
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

    AES_Context ctx;

    // Example 256-bit key
    uint8_t key[AES_KEY_SIZE] = {
 8000d1a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d22:	4a5f      	ldr	r2, [pc, #380]	@ (8000ea0 <main+0x18c>)
 8000d24:	461c      	mov	r4, r3
 8000d26:	4615      	mov	r5, r2
 8000d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
        0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
    };

    // Example plaintext (16 bytes)
    uint8_t plaintext[AES_BLOCK_SIZE] = {
 8000d34:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d3c:	4a59      	ldr	r2, [pc, #356]	@ (8000ea4 <main+0x190>)
 8000d3e:	461c      	mov	r4, r3
 8000d40:	4613      	mov	r3, r2
 8000d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uint8_t encrypted[AES_BLOCK_SIZE];
    uint8_t decrypted[AES_BLOCK_SIZE];

    // Initialize AES context with the key
    AES_Init(&ctx, key);
 8000d48:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000d4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff0a 	bl	8000b6c <AES_Init>

    // Encrypt the plaintext
    AES_Encrypt(&ctx, plaintext, encrypted);
 8000d58:	f107 0214 	add.w	r2, r7, #20
 8000d5c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000d60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff0f 	bl	8000b88 <AES_Encrypt>

    // Decrypt the ciphertext
    AES_Decrypt(&ctx, encrypted, decrypted);
 8000d6a:	1d3a      	adds	r2, r7, #4
 8000d6c:	f107 0114 	add.w	r1, r7, #20
 8000d70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5e 	bl	8000c36 <AES_Decrypt>

    // Print results
    printf("Plaintext: \n");
 8000d7a:	484b      	ldr	r0, [pc, #300]	@ (8000ea8 <main+0x194>)
 8000d7c:	f003 fec8 	bl	8004b10 <puts>
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000d86:	e010      	b.n	8000daa <main+0x96>
        printf("%02x ", plaintext[i]);
 8000d88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d8c:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 8000d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4844      	ldr	r0, [pc, #272]	@ (8000eac <main+0x198>)
 8000d9c:	f003 fe48 	bl	8004a30 <iprintf>
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000da4:	3301      	adds	r3, #1
 8000da6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000dae:	2b0f      	cmp	r3, #15
 8000db0:	ddea      	ble.n	8000d88 <main+0x74>
    }
    printf("\n\nEncrypted: \n");
 8000db2:	483f      	ldr	r0, [pc, #252]	@ (8000eb0 <main+0x19c>)
 8000db4:	f003 feac 	bl	8004b10 <puts>
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000dbe:	e010      	b.n	8000de2 <main+0xce>
        printf("%02x ", encrypted[i]);
 8000dc0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000dc4:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8000dc8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4836      	ldr	r0, [pc, #216]	@ (8000eac <main+0x198>)
 8000dd4:	f003 fe2c 	bl	8004a30 <iprintf>
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000dd8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000ddc:	3301      	adds	r3, #1
 8000dde:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000de2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	ddea      	ble.n	8000dc0 <main+0xac>
    }
    printf("\n\nDecrypted: \n");
 8000dea:	4832      	ldr	r0, [pc, #200]	@ (8000eb4 <main+0x1a0>)
 8000dec:	f003 fe90 	bl	8004b10 <puts>
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8000df6:	e010      	b.n	8000e1a <main+0x106>
        printf("%02x ", decrypted[i]);
 8000df8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000dfc:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 8000e00:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000e04:	4413      	add	r3, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4828      	ldr	r0, [pc, #160]	@ (8000eac <main+0x198>)
 8000e0c:	f003 fe10 	bl	8004a30 <iprintf>
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000e10:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000e14:	3301      	adds	r3, #1
 8000e16:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8000e1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000e1e:	2b0f      	cmp	r3, #15
 8000e20:	ddea      	ble.n	8000df8 <main+0xe4>
    }
    printf("\n");
 8000e22:	200a      	movs	r0, #10
 8000e24:	f003 fe16 	bl	8004a54 <putchar>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 fc2a 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f846 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 f8e4 	bl	8000ffc <MX_GPIO_Init>
  MX_USART2_Init();
 8000e34:	f000 f896 	bl	8000f64 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 fa9f 	bl	800137c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f000 fa9c 	bl	800137c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f000 fa99 	bl	800137c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 facf 	bl	80013f0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000e52:	2101      	movs	r1, #1
 8000e54:	2001      	movs	r0, #1
 8000e56:	f000 facb 	bl	80013f0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f000 fac7 	bl	80013f0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <main+0x1a4>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e68:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <main+0x1a4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <main+0x1a4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <main+0x1a4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <main+0x1a4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e82:	490d      	ldr	r1, [pc, #52]	@ (8000eb8 <main+0x1a4>)
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 fb55 	bl	8001534 <BSP_COM_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <main+0x180>
  {
    Error_Handler();
 8000e90:	f000 f8be 	bl	8001010 <Error_Handler>
  }

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f000 ff6f 	bl	8001d78 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e9a:	bf00      	nop
 8000e9c:	e7fd      	b.n	8000e9a <main+0x186>
 8000e9e:	bf00      	nop
 8000ea0:	08005888 	.word	0x08005888
 8000ea4:	080058a8 	.word	0x080058a8
 8000ea8:	08005854 	.word	0x08005854
 8000eac:	08005860 	.word	0x08005860
 8000eb0:	08005868 	.word	0x08005868
 8000eb4:	08005878 	.word	0x08005878
 8000eb8:	200000b8 	.word	0x200000b8

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b09a      	sub	sp, #104	@ 0x68
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	2248      	movs	r2, #72	@ 0x48
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 ff00 	bl	8004cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <SystemClock_Config+0xa4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000eea:	4a1d      	ldr	r2, [pc, #116]	@ (8000f60 <SystemClock_Config+0xa4>)
 8000eec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <SystemClock_Config+0xa4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000efe:	2320      	movs	r3, #32
 8000f00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f0a:	2360      	movs	r3, #96	@ 0x60
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 f9f0 	bl	80022fc <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f22:	f000 f875 	bl	8001010 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000f26:	236f      	movs	r3, #111	@ 0x6f
 8000f28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fd5a 	bl	8002a00 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f52:	f000 f85d 	bl	8001010 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3768      	adds	r7, #104	@ 0x68
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	58000400 	.word	0x58000400

08000f64 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000f68:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000f6a:	4a23      	ldr	r2, [pc, #140]	@ (8000ff8 <MX_USART2_Init+0x94>)
 8000f6c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000f94:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000fac:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000fae:	f002 feb9 	bl	8003d24 <HAL_USART_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8000fb8:	f000 f82a 	bl	8001010 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480d      	ldr	r0, [pc, #52]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000fc0:	f003 fbaf 	bl	8004722 <HAL_USARTEx_SetTxFifoThreshold>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8000fca:	f000 f821 	bl	8001010 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000fd2:	f003 fbe4 	bl	800479e <HAL_USARTEx_SetRxFifoThreshold>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8000fdc:	f000 f818 	bl	8001010 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <MX_USART2_Init+0x90>)
 8000fe2:	f003 fb66 	bl	80046b2 <HAL_USARTEx_DisableFifoMode>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_USART2_Init+0x8c>
  {
    Error_Handler();
 8000fec:	f000 f810 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200000c8 	.word	0x200000c8
 8000ff8:	40004400 	.word	0x40004400

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001000:	2004      	movs	r0, #4
 8001002:	f7ff fe6f 	bl	8000ce4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fe6c 	bl	8000ce4 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <Error_Handler+0x8>

0800101c <_write>:
}
#endif /* USE_FULL_ASSERT */


#if defined(__GNUC__)
int _write(int fd, char * ptr, int len) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  HAL_USART_Transmit( & husart2, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	b29a      	uxth	r2, r3
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	4804      	ldr	r0, [pc, #16]	@ (8001044 <_write+0x28>)
 8001034:	f002 fed0 	bl	8003dd8 <HAL_USART_Transmit>
  return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000c8 	.word	0x200000c8

08001048 <LL_AHB2_GRP1_EnableClock>:
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001054:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001056:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4313      	orrs	r3, r2
 800105e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001064:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800106c:	68fb      	ldr	r3, [r7, #12]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001084:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001086:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001094:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b096      	sub	sp, #88	@ 0x58
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2238      	movs	r2, #56	@ 0x38
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 fdfb 	bl	8004cd0 <memset>
  if(husart->Instance==USART2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <HAL_USART_MspInit+0x88>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d126      	bne.n	8001132 <HAL_USART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010e8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80010ec:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 f844 	bl	8003180 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 80010fe:	f7ff ff87 	bl	8001010 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001102:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001106:	f7ff ffb7 	bl	8001078 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff ff9c 	bl	8001048 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_4;
 8001110:	231c      	movs	r3, #28
 8001112:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001118:	2301      	movs	r3, #1
 800111a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001120:	2307      	movs	r3, #7
 8001122:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001128:	4619      	mov	r1, r3
 800112a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112e:	f000 fc83 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001132:	bf00      	nop
 8001134:	3758      	adds	r7, #88	@ 0x58
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40004400 	.word	0x40004400

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <NMI_Handler+0x4>

08001148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <MemManage_Handler+0x4>

08001158 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <UsageFault_Handler+0x4>

08001168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 fad0 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW1);
 800119c:	2000      	movs	r0, #0
 800119e:	f000 f9ad 	bl	80014fc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW2);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f000 f9a6 	bl	80014fc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW3);
 80011b8:	2002      	movs	r0, #2
 80011ba:	f000 f99f 	bl	80014fc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e00a      	b.n	80011ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d4:	f3af 8000 	nop.w
 80011d8:	4601      	mov	r1, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	60ba      	str	r2, [r7, #8]
 80011e0:	b2ca      	uxtb	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbf0      	blt.n	80011d4 <_read+0x12>
  }

  return len;
 80011f2:	687b      	ldr	r3, [r7, #4]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001222:	605a      	str	r2, [r3, #4]
  return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <_isatty>:

int _isatty(int file)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f003 fd6e 	bl	8004d6c <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	@ (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20008000 	.word	0x20008000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	20000154 	.word	0x20000154
 80012c4:	20000358 	.word	0x20000358

080012c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c8:	480d      	ldr	r0, [pc, #52]	@ (8001300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012cc:	f7ff f920 	bl	8000510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <LoopForever+0x6>)
  ldr r1, =_edata
 80012d2:	490d      	ldr	r1, [pc, #52]	@ (8001308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d4:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <LoopForever+0xe>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001314 <LoopForever+0x16>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012f6:	f003 fd3f 	bl	8004d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fa:	f7ff fd0b 	bl	8000d14 <main>

080012fe <LoopForever>:

LoopForever:
    b LoopForever
 80012fe:	e7fe      	b.n	80012fe <LoopForever>
  ldr   r0, =_estack
 8001300:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800130c:	08005c10 	.word	0x08005c10
  ldr r2, =_sbss
 8001310:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001314:	20000354 	.word	0x20000354

08001318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>

0800131a <LL_AHB2_GRP1_EnableClock>:
{
 800131a:	b480      	push	{r7}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001326:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001328:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4313      	orrs	r3, r2
 8001330:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001336:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4013      	ands	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800134a:	b480      	push	{r7}
 800134c:	b085      	sub	sp, #20
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001356:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001358:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001366:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
	...

0800137c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001396:	2002      	movs	r0, #2
 8001398:	f7ff ffbf 	bl	800131a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <BSP_LED_Init+0x6c>)
 80013a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013a4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <BSP_LED_Init+0x70>)
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	f107 020c 	add.w	r2, r7, #12
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fb39 	bl	8001a38 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	4a08      	ldr	r2, [pc, #32]	@ (80013ec <BSP_LED_Init+0x70>)
 80013ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <BSP_LED_Init+0x6c>)
 80013d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	f000 fc8d 	bl	8001cf8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	08005b84 	.word	0x08005b84
 80013ec:	20000004 	.word	0x20000004

080013f0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <BSP_PB_Init+0x2e>
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff ff7f 	bl	800131a <LL_AHB2_GRP1_EnableClock>
 800141c:	e00c      	b.n	8001438 <BSP_PB_Init+0x48>
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d103      	bne.n	800142c <BSP_PB_Init+0x3c>
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff ff78 	bl	800131a <LL_AHB2_GRP1_EnableClock>
 800142a:	e005      	b.n	8001438 <BSP_PB_Init+0x48>
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d102      	bne.n	8001438 <BSP_PB_Init+0x48>
 8001432:	2004      	movs	r0, #4
 8001434:	f7ff ff71 	bl	800131a <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4a29      	ldr	r2, [pc, #164]	@ (80014e0 <BSP_PB_Init+0xf0>)
 800143c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001440:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001442:	2301      	movs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10c      	bne.n	800146a <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4a23      	ldr	r2, [pc, #140]	@ (80014e4 <BSP_PB_Init+0xf4>)
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	f107 020c 	add.w	r2, r7, #12
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fae8 	bl	8001a38 <HAL_GPIO_Init>
 8001468:	e035      	b.n	80014d6 <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800146a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800146e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	4a1c      	ldr	r2, [pc, #112]	@ (80014e4 <BSP_PB_Init+0xf4>)
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	f107 020c 	add.w	r2, r7, #12
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fada 	bl	8001a38 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <BSP_PB_Init+0xf8>)
 800148a:	441a      	add	r2, r3
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4917      	ldr	r1, [pc, #92]	@ (80014ec <BSP_PB_Init+0xfc>)
 8001490:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001494:	4619      	mov	r1, r3
 8001496:	4610      	mov	r0, r2
 8001498:	f000 fa8c 	bl	80019b4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <BSP_PB_Init+0xf8>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <BSP_PB_Init+0x100>)
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	f000 fa67 	bl	8001982 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <BSP_PB_Init+0x104>)
 80014b8:	56d0      	ldrsb	r0, [r2, r3]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	@ (80014f8 <BSP_PB_Init+0x108>)
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	2200      	movs	r2, #0
 80014c4:	4619      	mov	r1, r3
 80014c6:	f000 fa28 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <BSP_PB_Init+0x104>)
 80014ce:	56d3      	ldrsb	r3, [r2, r3]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fa3c 	bl	800194e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	08005b8c 	.word	0x08005b8c
 80014e4:	20000010 	.word	0x20000010
 80014e8:	20000158 	.word	0x20000158
 80014ec:	08005b98 	.word	0x08005b98
 80014f0:	20000020 	.word	0x20000020
 80014f4:	08005b94 	.word	0x08005b94
 80014f8:	2000002c 	.word	0x2000002c

080014fc <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <BSP_PB_IRQHandler+0x20>)
 800150c:	4413      	add	r3, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fa63 	bl	80019da <HAL_EXTI_IRQHandler>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000158 	.word	0x20000158

08001520 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d903      	bls.n	8001552 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800154a:	f06f 0301 	mvn.w	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e018      	b.n	8001584 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2294      	movs	r2, #148	@ 0x94
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <BSP_COM_Init+0x5c>)
 800155c:	4413      	add	r3, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f85f 	bl	8001622 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2294      	movs	r2, #148	@ 0x94
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <BSP_COM_Init+0x5c>)
 800156e:	4413      	add	r3, r2
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f80e 	bl	8001594 <MX_LPUART1_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800157e:	f06f 0303 	mvn.w	r3, #3
 8001582:	e000      	b.n	8001586 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001584:	68fb      	ldr	r3, [r7, #12]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000170 	.word	0x20000170

08001594 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <MX_LPUART1_Init+0x60>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	220c      	movs	r2, #12
 80015b2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	895b      	ldrh	r3, [r3, #10]
 80015b8:	461a      	mov	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	891b      	ldrh	r3, [r3, #8]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	899b      	ldrh	r3, [r3, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015e0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f001 ff07 	bl	80033f6 <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000001c 	.word	0x2000001c

080015f8 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff ff8f 	bl	8001520 <BSP_PB_Callback>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}

08001606 <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 800160a:	2001      	movs	r0, #1
 800160c:	f7ff ff88 	bl	8001520 <BSP_PB_Callback>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8001618:	2002      	movs	r0, #2
 800161a:	f7ff ff81 	bl	8001520 <BSP_PB_Callback>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}

08001622 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b088      	sub	sp, #32
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff fe75 	bl	800131a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fe72 	bl	800131a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001636:	2001      	movs	r0, #1
 8001638:	f7ff fe87 	bl	800134a <LL_APB1_GRP2_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800163c:	2304      	movs	r3, #4
 800163e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800164c:	2308      	movs	r3, #8
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165a:	f000 f9ed 	bl	8001a38 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800165e:	2308      	movs	r3, #8
 8001660:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001666:	2308      	movs	r3, #8
 8001668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001674:	f000 f9e0 	bl	8001a38 <HAL_GPIO_Init>
}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168a:	2003      	movs	r0, #3
 800168c:	f000 f93a 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001690:	f001 fb98 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8001694:	4603      	mov	r3, r0
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_Init+0x3c>)
 8001698:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f810 	bl	80016c0 <HAL_InitTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	71fb      	strb	r3, [r7, #7]
 80016aa:	e001      	b.n	80016b0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ac:	f7ff fcfc 	bl	80010a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b0:	79fb      	ldrb	r3, [r7, #7]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <HAL_InitTick+0x6c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d024      	beq.n	800171e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016d4:	f001 fb76 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b14      	ldr	r3, [pc, #80]	@ (800172c <HAL_InitTick+0x6c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4619      	mov	r1, r3
 80016e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f93c 	bl	800196a <HAL_SYSTICK_Config>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10f      	bne.n	8001718 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	d809      	bhi.n	8001712 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fe:	2200      	movs	r2, #0
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	f04f 30ff 	mov.w	r0, #4294967295
 8001706:	f000 f908 	bl	800191a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170a:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <HAL_InitTick+0x70>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e007      	b.n	8001722 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e004      	b.n	8001722 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e001      	b.n	8001722 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000003c 	.word	0x2000003c
 8001730:	20000038 	.word	0x20000038

08001734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_IncTick+0x1c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_IncTick+0x20>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a03      	ldr	r2, [pc, #12]	@ (8001754 <HAL_IncTick+0x20>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	2000003c 	.word	0x2000003c
 8001754:	20000204 	.word	0x20000204

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b02      	ldr	r3, [pc, #8]	@ (8001768 <HAL_GetTick+0x10>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000204 	.word	0x20000204

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4906      	ldr	r1, [pc, #24]	@ (8001804 <__NVIC_EnableIRQ+0x34>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	@ (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	@ (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	@ 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff90 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff2d 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff44 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff92 	bl	800185c <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff61 	bl	8001808 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff37 	bl	80017d0 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa4 	bl	80018c0 <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001982:	b480      	push	{r7}
 8001984:	b087      	sub	sp, #28
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	460b      	mov	r3, r1
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	605a      	str	r2, [r3, #4]
      break;
 80019a0:	e002      	b.n	80019a8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
      break;
 80019a6:	bf00      	nop
  }

  return status;
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e003      	b.n	80019d0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80019ce:	2300      	movs	r3, #0
  }
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	2201      	movs	r2, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	015b      	lsls	r3, r3, #5
 8001a02:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8001a06:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8001a0a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d009      	beq.n	8001a30 <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4798      	blx	r3
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	e140      	b.n	8001cca <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8132 	beq.w	8001cc4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d005      	beq.n	8001a78 <HAL_GPIO_Init+0x40>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d130      	bne.n	8001ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aae:	2201      	movs	r2, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 0201 	and.w	r2, r3, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d017      	beq.n	8001b16 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d123      	bne.n	8001b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	6939      	ldr	r1, [r7, #16]
 8001b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0203 	and.w	r2, r3, #3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 808c 	beq.w	8001cc4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001bac:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce8 <HAL_GPIO_Init+0x2b0>)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_GPIO_Init+0x1bc>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a44      	ldr	r2, [pc, #272]	@ (8001cec <HAL_GPIO_Init+0x2b4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d007      	beq.n	8001bf0 <HAL_GPIO_Init+0x1b8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a43      	ldr	r2, [pc, #268]	@ (8001cf0 <HAL_GPIO_Init+0x2b8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_GPIO_Init+0x1b4>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x1be>
 8001bec:	2307      	movs	r3, #7
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x1be>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x1be>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c06:	4938      	ldr	r1, [pc, #224]	@ (8001ce8 <HAL_GPIO_Init+0x2b0>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c14:	4b37      	ldr	r3, [pc, #220]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c38:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c62:	4a24      	ldr	r2, [pc, #144]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001c68:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c6e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001c8e:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c9c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f47f aeb7 	bne.w	8001a48 <HAL_GPIO_Init+0x10>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	58000800 	.word	0x58000800

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a03      	ldr	r2, [pc, #12]	@ (8001d40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	58000400 	.word	0x58000400

08001d44 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <LL_PWR_EnableBootC2+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a03      	ldr	r2, [pc, #12]	@ (8001d5c <LL_PWR_EnableBootC2+0x18>)
 8001d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	58000400 	.word	0x58000400

08001d60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <HAL_PWREx_GetVoltageRange+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	58000400 	.word	0x58000400

08001d78 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001d80:	f7ff ffe0 	bl	8001d44 <LL_PWR_EnableBootC2>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <LL_PWR_IsEnabledBkUpAccess>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d9c:	d101      	bne.n	8001da2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	58000400 	.word	0x58000400

08001db0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001dfa:	d101      	bne.n	8001e00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e54:	d101      	bne.n	8001e5a <LL_RCC_HSE_IsReady+0x18>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <LL_RCC_HSE_IsReady+0x1a>
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eae:	d101      	bne.n	8001eb4 <LL_RCC_HSI_IsReady+0x18>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <LL_RCC_HSI_IsReady+0x1a>
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	061b      	lsls	r3, r3, #24
 8001ed4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d101      	bne.n	8001efe <LL_RCC_LSE_IsReady+0x18>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_RCC_LSE_IsReady+0x1a>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d101      	bne.n	8001f60 <LL_RCC_LSI_IsReady+0x18>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <LL_RCC_LSI_IsReady+0x1a>
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6013      	str	r3, [r2, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d101      	bne.n	8001fb8 <LL_RCC_MSI_IsReady+0x16>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <LL_RCC_MSI_IsReady+0x18>
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d101      	bne.n	8001fd8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002004:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002086:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020d4:	f023 020f 	bic.w	r2, r3, #15
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002128:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021e2:	d101      	bne.n	80021e8 <LL_RCC_PLL_IsReady+0x18>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <LL_RCC_PLL_IsReady+0x1a>
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800223a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225e:	d101      	bne.n	8002264 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002276:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002282:	d101      	bne.n	8002288 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800229e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a6:	d101      	bne.n	80022ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022c8:	d101      	bne.n	80022ce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022ea:	d101      	bne.n	80022f0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e36f      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800230e:	f7ff fea6 	bl	800205e <LL_RCC_GetSysClkSource>
 8002312:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002314:	f7ff ff8f 	bl	8002236 <LL_RCC_PLL_GetMainSource>
 8002318:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80c4 	beq.w	80024b0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x3e>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d176      	bne.n	8002422 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d173      	bne.n	8002422 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e353      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800234a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_OscConfig+0x68>
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002362:	e006      	b.n	8002372 <HAL_RCC_OscConfig+0x76>
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002372:	4293      	cmp	r3, r2
 8002374:	d222      	bcs.n	80023bc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fd5a 	bl	8002e34 <RCC_SetFlashLatencyFromMSIRange>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e331      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fe2b 	bl	8002010 <LL_RCC_MSI_SetCalibTrimming>
 80023ba:	e021      	b.n	8002400 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023c6:	f043 0308 	orr.w	r3, r3, #8
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fe12 	bl	8002010 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fd1f 	bl	8002e34 <RCC_SetFlashLatencyFromMSIRange>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e2f6      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002400:	f000 fce0 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002404:	4603      	mov	r3, r0
 8002406:	4aa7      	ldr	r2, [pc, #668]	@ (80026a4 <HAL_RCC_OscConfig+0x3a8>)
 8002408:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800240a:	4ba7      	ldr	r3, [pc, #668]	@ (80026a8 <HAL_RCC_OscConfig+0x3ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff f956 	bl	80016c0 <HAL_InitTick>
 8002414:	4603      	mov	r3, r0
 8002416:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d047      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	e2e5      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d02c      	beq.n	8002484 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800242a:	f7ff fd9e 	bl	8001f6a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800242e:	f7ff f993 	bl	8001758 <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002436:	f7ff f98f 	bl	8001758 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e2d2      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002448:	f7ff fdab 	bl	8001fa2 <LL_RCC_MSI_IsReady>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f1      	beq.n	8002436 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fdc7 	bl	8002010 <LL_RCC_MSI_SetCalibTrimming>
 8002482:	e015      	b.n	80024b0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002484:	f7ff fd7f 	bl	8001f86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002488:	f7ff f966 	bl	8001758 <HAL_GetTick>
 800248c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002490:	f7ff f962 	bl	8001758 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e2a5      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80024a2:	f7ff fd7e 	bl	8001fa2 <LL_RCC_MSI_IsReady>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f1      	bne.n	8002490 <HAL_RCC_OscConfig+0x194>
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80024ae:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d058      	beq.n	800256e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d005      	beq.n	80024ce <HAL_RCC_OscConfig+0x1d2>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d108      	bne.n	80024da <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d105      	bne.n	80024da <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d14b      	bne.n	800256e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e289      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0x204>
 80024fa:	f7ff fc86 	bl	8001e0a <LL_RCC_HSE_Enable>
 80024fe:	e00d      	b.n	800251c <HAL_RCC_OscConfig+0x220>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002508:	d104      	bne.n	8002514 <HAL_RCC_OscConfig+0x218>
 800250a:	f7ff fc51 	bl	8001db0 <LL_RCC_HSE_EnableTcxo>
 800250e:	f7ff fc7c 	bl	8001e0a <LL_RCC_HSE_Enable>
 8002512:	e003      	b.n	800251c <HAL_RCC_OscConfig+0x220>
 8002514:	f7ff fc87 	bl	8001e26 <LL_RCC_HSE_Disable>
 8002518:	f7ff fc58 	bl	8001dcc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff f918 	bl	8001758 <HAL_GetTick>
 8002528:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff f914 	bl	8001758 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	@ 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e257      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800253e:	f7ff fc80 	bl	8001e42 <LL_RCC_HSE_IsReady>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f1      	beq.n	800252c <HAL_RCC_OscConfig+0x230>
 8002548:	e011      	b.n	800256e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff f905 	bl	8001758 <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002552:	f7ff f901 	bl	8001758 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	@ 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e244      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002564:	f7ff fc6d 	bl	8001e42 <LL_RCC_HSE_IsReady>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f1      	bne.n	8002552 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d046      	beq.n	8002608 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x290>
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d10e      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d10b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e22a      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fc8e 	bl	8001ebe <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80025a2:	e031      	b.n	8002608 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d019      	beq.n	80025e0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ac:	f7ff fc5a 	bl	8001e64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7ff f8d2 	bl	8001758 <HAL_GetTick>
 80025b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff f8ce 	bl	8001758 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e211      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80025ca:	f7ff fc67 	bl	8001e9c <LL_RCC_HSI_IsReady>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f1      	beq.n	80025b8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fc70 	bl	8001ebe <LL_RCC_HSI_SetCalibTrimming>
 80025de:	e013      	b.n	8002608 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e0:	f7ff fc4e 	bl	8001e80 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7ff f8b8 	bl	8001758 <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ec:	f7ff f8b4 	bl	8001758 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1f7      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80025fe:	f7ff fc4d 	bl	8001e9c <LL_RCC_HSI_IsReady>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f1      	bne.n	80025ec <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d06e      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d056      	beq.n	80026ca <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002624:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	429a      	cmp	r2, r3
 8002632:	d031      	beq.n	8002698 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e1d0      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d013      	beq.n	800267e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002656:	f7ff fc67 	bl	8001f28 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800265a:	f7ff f87d 	bl	8001758 <HAL_GetTick>
 800265e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002662:	f7ff f879 	bl	8001758 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b11      	cmp	r3, #17
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e1bc      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002674:	f7ff fc68 	bl	8001f48 <LL_RCC_LSI_IsReady>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f1      	bne.n	8002662 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002686:	f023 0210 	bic.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002698:	f7ff fc36 	bl	8001f08 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7ff f85c 	bl	8001758 <HAL_GetTick>
 80026a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80026a2:	e00c      	b.n	80026be <HAL_RCC_OscConfig+0x3c2>
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000038 	.word	0x20000038
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ac:	f7ff f854 	bl	8001758 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b11      	cmp	r3, #17
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e197      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80026be:	f7ff fc43 	bl	8001f48 <LL_RCC_LSI_IsReady>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f1      	beq.n	80026ac <HAL_RCC_OscConfig+0x3b0>
 80026c8:	e013      	b.n	80026f2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ca:	f7ff fc2d 	bl	8001f28 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7ff f843 	bl	8001758 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d6:	f7ff f83f 	bl	8001758 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b11      	cmp	r3, #17
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e182      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80026e8:	f7ff fc2e 	bl	8001f48 <LL_RCC_LSI_IsReady>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f1      	bne.n	80026d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80d8 	beq.w	80028b0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002700:	f7ff fb44 	bl	8001d8c <LL_PWR_IsEnabledBkUpAccess>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d113      	bne.n	8002732 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800270a:	f7ff fb0d 	bl	8001d28 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270e:	f7ff f823 	bl	8001758 <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002716:	f7ff f81f 	bl	8001758 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e162      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002728:	f7ff fb30 	bl	8001d8c <LL_PWR_IsEnabledBkUpAccess>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f1      	beq.n	8002716 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d07b      	beq.n	8002832 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b85      	cmp	r3, #133	@ 0x85
 8002740:	d003      	beq.n	800274a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d109      	bne.n	800275e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002752:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe fffb 	bl	8001758 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe ffed 	bl	8001758 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e12e      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002790:	f7ff fba9 	bl	8001ee6 <LL_RCC_LSE_IsReady>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ef      	beq.n	800277a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b81      	cmp	r3, #129	@ 0x81
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b85      	cmp	r3, #133	@ 0x85
 80027a8:	d121      	bne.n	80027ee <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe ffd5 	bl	8001758 <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7fe ffc7 	bl	8001758 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e108      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80027dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ec      	beq.n	80027c6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80027ec:	e060      	b.n	80028b0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe ffb3 	bl	8001758 <HAL_GetTick>
 80027f2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002800:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe ffa5 	bl	8001758 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0e6      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ec      	bne.n	800280a <HAL_RCC_OscConfig+0x50e>
 8002830:	e03e      	b.n	80028b0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe ff91 	bl	8001758 <HAL_GetTick>
 8002836:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe ff83 	bl	8001758 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0c4      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ec      	bne.n	800284e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7fe ff70 	bl	8001758 <HAL_GetTick>
 8002878:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe ff62 	bl	8001758 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0a3      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80028a6:	f7ff fb1e 	bl	8001ee6 <LL_RCC_LSE_IsReady>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ef      	bne.n	8002890 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8099 	beq.w	80029ec <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d06c      	beq.n	800299a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d14b      	bne.n	8002960 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c8:	f7ff fc74 	bl	80021b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe ff44 	bl	8001758 <HAL_GetTick>
 80028d0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe ff40 	bl	8001758 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b0a      	cmp	r3, #10
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e083      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80028e6:	f7ff fc73 	bl	80021d0 <LL_RCC_PLL_IsReady>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f1      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	4b40      	ldr	r3, [pc, #256]	@ (80029f8 <HAL_RCC_OscConfig+0x6fc>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002908:	0212      	lsls	r2, r2, #8
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002916:	4311      	orrs	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800291c:	430a      	orrs	r2, r1
 800291e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002922:	4313      	orrs	r3, r2
 8002924:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002926:	f7ff fc37 	bl	8002198 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002938:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe ff0d 	bl	8001758 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002942:	f7fe ff09 	bl	8001758 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b0a      	cmp	r3, #10
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e04c      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002954:	f7ff fc3c 	bl	80021d0 <LL_RCC_PLL_IsReady>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f1      	beq.n	8002942 <HAL_RCC_OscConfig+0x646>
 800295e:	e045      	b.n	80029ec <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002960:	f7ff fc28 	bl	80021b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe fef8 	bl	8001758 <HAL_GetTick>
 8002968:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fef4 	bl	8001758 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b0a      	cmp	r3, #10
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e037      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800297e:	f7ff fc27 	bl	80021d0 <LL_RCC_PLL_IsReady>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f1      	bne.n	800296c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002992:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <HAL_RCC_OscConfig+0x700>)
 8002994:	4013      	ands	r3, r2
 8002996:	60cb      	str	r3, [r1, #12]
 8002998:	e028      	b.n	80029ec <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e023      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d115      	bne.n	80029e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d10e      	bne.n	80029e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	11c1808c 	.word	0x11c1808c
 80029fc:	eefefffc 	.word	0xeefefffc

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e12c      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b98      	ldr	r3, [pc, #608]	@ (8002c78 <HAL_RCC_ClockConfig+0x278>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d91b      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b95      	ldr	r3, [pc, #596]	@ (8002c78 <HAL_RCC_ClockConfig+0x278>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4993      	ldr	r1, [pc, #588]	@ (8002c78 <HAL_RCC_ClockConfig+0x278>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a32:	f7fe fe91 	bl	8001758 <HAL_GetTick>
 8002a36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a3a:	f7fe fe8d 	bl	8001758 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e110      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c78 <HAL_RCC_ClockConfig+0x278>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d1ef      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fb02 	bl	8002074 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a70:	f7fe fe72 	bl	8001758 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a78:	f7fe fe6e 	bl	8001758 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0f1      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a8a:	f7ff fbdf 	bl	800224c <LL_RCC_IsActiveFlag_HPRE>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f1      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d016      	beq.n	8002ace <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff faf8 	bl	800209a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aaa:	f7fe fe55 	bl	8001758 <HAL_GetTick>
 8002aae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ab2:	f7fe fe51 	bl	8001758 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0d4      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ac4:	f7ff fbd3 	bl	800226e <LL_RCC_IsActiveFlag_C2HPRE>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f1      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff faf0 	bl	80020c4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fe38 	bl	8001758 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aec:	f7fe fe34 	bl	8001758 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0b7      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002afe:	f7ff fbc8 	bl	8002292 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f1      	beq.n	8002aec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d016      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fae9 	bl	80020f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b1e:	f7fe fe1b 	bl	8001758 <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b26:	f7fe fe17 	bl	8001758 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e09a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b38:	f7ff fbbd 	bl	80022b6 <LL_RCC_IsActiveFlag_PPRE1>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f1      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d017      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fade 	bl	8002116 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b5a:	f7fe fdfd 	bl	8001758 <HAL_GetTick>
 8002b5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b62:	f7fe fdf9 	bl	8001758 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e07c      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b74:	f7ff fbb0 	bl	80022d8 <LL_RCC_IsActiveFlag_PPRE2>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f1      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d043      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b92:	f7ff f956 	bl	8001e42 <LL_RCC_HSE_IsReady>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d11e      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e066      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ba8:	f7ff fb12 	bl	80021d0 <LL_RCC_PLL_IsReady>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d113      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e05b      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002bbe:	f7ff f9f0 	bl	8001fa2 <LL_RCC_MSI_IsReady>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d108      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e050      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002bcc:	f7ff f966 	bl	8001e9c <LL_RCC_HSI_IsReady>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e049      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fa2a 	bl	8002038 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be4:	f7fe fdb8 	bl	8001758 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fe fdb4 	bl	8001758 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e035      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	f7ff fa2c 	bl	800205e <LL_RCC_GetSysClkSource>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d1ec      	bne.n	8002bec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_RCC_ClockConfig+0x278>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d21b      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c20:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <HAL_RCC_ClockConfig+0x278>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 0207 	bic.w	r2, r3, #7
 8002c28:	4913      	ldr	r1, [pc, #76]	@ (8002c78 <HAL_RCC_ClockConfig+0x278>)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c30:	f7fe fd92 	bl	8001758 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c38:	f7fe fd8e 	bl	8001758 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e011      	b.n	8002c6e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_ClockConfig+0x278>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1ef      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c58:	f000 f8b4 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4a07      	ldr	r2, [pc, #28]	@ (8002c7c <HAL_RCC_ClockConfig+0x27c>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002c62:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <HAL_RCC_ClockConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fd2a 	bl	80016c0 <HAL_InitTick>
 8002c6c:	4603      	mov	r3, r0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	58004000 	.word	0x58004000
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000038 	.word	0x20000038

08002c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c92:	f7ff f9e4 	bl	800205e <LL_RCC_GetSysClkSource>
 8002c96:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c98:	f7ff facd 	bl	8002236 <LL_RCC_PLL_GetMainSource>
 8002c9c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x2c>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d139      	bne.n	8002d1e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d136      	bne.n	8002d1e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002cb0:	f7ff f987 	bl	8001fc2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d115      	bne.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x62>
 8002cba:	f7ff f982 	bl	8001fc2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x4e>
 8002cc4:	f7ff f98d 	bl	8001fe2 <LL_RCC_MSI_GetRange>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	e005      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x5a>
 8002cd2:	f7ff f991 	bl	8001ff8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	4a36      	ldr	r2, [pc, #216]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	e014      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x8c>
 8002ce6:	f7ff f96c 	bl	8001fc2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_GetSysClockFreq+0x7a>
 8002cf0:	f7ff f977 	bl	8001fe2 <LL_RCC_MSI_GetRange>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	e005      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x86>
 8002cfe:	f7ff f97b 	bl	8001ff8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002d02:	4603      	mov	r3, r0
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d115      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d1c:	e012      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d102      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d24:	4b25      	ldr	r3, [pc, #148]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x138>)
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e00c      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d109      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d30:	f7ff f85a 	bl	8001de8 <LL_RCC_HSE_IsEnabledDiv2>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002d3a:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x138>)
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e001      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002d40:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d42:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d44:	f7ff f98b 	bl	800205e <LL_RCC_GetSysClkSource>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d12f      	bne.n	8002dae <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002d4e:	f7ff fa72 	bl	8002236 <LL_RCC_PLL_GetMainSource>
 8002d52:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0xde>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d003      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0xe4>
 8002d60:	e00d      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002d62:	4b16      	ldr	r3, [pc, #88]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x138>)
 8002d64:	60fb      	str	r3, [r7, #12]
        break;
 8002d66:	e00d      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d68:	f7ff f83e 	bl	8001de8 <LL_RCC_HSE_IsEnabledDiv2>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d102      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002d72:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x138>)
 8002d74:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002d76:	e005      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002d78:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d7a:	60fb      	str	r3, [r7, #12]
        break;
 8002d7c:	e002      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	60fb      	str	r3, [r7, #12]
        break;
 8002d82:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d84:	f7ff fa35 	bl	80021f2 <LL_RCC_PLL_GetN>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	fb03 f402 	mul.w	r4, r3, r2
 8002d90:	f7ff fa46 	bl	8002220 <LL_RCC_PLL_GetDivider>
 8002d94:	4603      	mov	r3, r0
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	3301      	adds	r3, #1
 8002d9a:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d9e:	f7ff fa34 	bl	800220a <LL_RCC_PLL_GetR>
 8002da2:	4603      	mov	r3, r0
 8002da4:	0f5b      	lsrs	r3, r3, #29
 8002da6:	3301      	adds	r3, #1
 8002da8:	fbb4 f3f3 	udiv	r3, r4, r3
 8002dac:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002dae:	697b      	ldr	r3, [r7, #20]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd90      	pop	{r4, r7, pc}
 8002db8:	08005934 	.word	0x08005934
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	01e84800 	.word	0x01e84800

08002dc4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b598      	push	{r3, r4, r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002dc8:	f7ff ff5c 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	f7ff f9b5 	bl	800213c <LL_RCC_GetAHBPrescaler>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	4a03      	ldr	r2, [pc, #12]	@ (8002de8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd98      	pop	{r3, r4, r7, pc}
 8002de8:	080058d4 	.word	0x080058d4

08002dec <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b598      	push	{r3, r4, r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002df0:	f7ff ffe8 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002df4:	4604      	mov	r4, r0
 8002df6:	f7ff f9b9 	bl	800216c <LL_RCC_GetAPB1Prescaler>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	4a03      	ldr	r2, [pc, #12]	@ (8002e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd98      	pop	{r3, r4, r7, pc}
 8002e0c:	08005914 	.word	0x08005914

08002e10 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b598      	push	{r3, r4, r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002e14:	f7ff ffd6 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002e18:	4604      	mov	r4, r0
 8002e1a:	f7ff f9b2 	bl	8002182 <LL_RCC_GetAPB2Prescaler>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	0adb      	lsrs	r3, r3, #11
 8002e22:	4a03      	ldr	r2, [pc, #12]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd98      	pop	{r3, r4, r7, pc}
 8002e30:	08005914 	.word	0x08005914

08002e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	4a10      	ldr	r2, [pc, #64]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002e4c:	f7ff f981 	bl	8002152 <LL_RCC_GetAHB3Prescaler>
 8002e50:	4603      	mov	r3, r0
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0c9c      	lsrs	r4, r3, #18
 8002e70:	f7fe ff76 	bl	8001d60 <HAL_PWREx_GetVoltageRange>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4619      	mov	r1, r3
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f000 f80b 	bl	8002e94 <RCC_SetFlashLatency>
 8002e7e:	4603      	mov	r3, r0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd90      	pop	{r4, r7, pc}
 8002e88:	08005934 	.word	0x08005934
 8002e8c:	080058d4 	.word	0x080058d4
 8002e90:	431bde83 	.word	0x431bde83

08002e94 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08e      	sub	sp, #56	@ 0x38
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002e9e:	4a3a      	ldr	r2, [pc, #232]	@ (8002f88 <RCC_SetFlashLatency+0xf4>)
 8002ea0:	f107 0320 	add.w	r3, r7, #32
 8002ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ea8:	6018      	str	r0, [r3, #0]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002eae:	4a37      	ldr	r2, [pc, #220]	@ (8002f8c <RCC_SetFlashLatency+0xf8>)
 8002eb0:	f107 0318 	add.w	r3, r7, #24
 8002eb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eb8:	6018      	str	r0, [r3, #0]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002ebe:	4a34      	ldr	r2, [pc, #208]	@ (8002f90 <RCC_SetFlashLatency+0xfc>)
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002eca:	2300      	movs	r3, #0
 8002ecc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed4:	d11b      	bne.n	8002f0e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eda:	e014      	b.n	8002f06 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	3338      	adds	r3, #56	@ 0x38
 8002ee2:	443b      	add	r3, r7
 8002ee4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d807      	bhi.n	8002f00 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	3338      	adds	r3, #56	@ 0x38
 8002ef6:	443b      	add	r3, r7
 8002ef8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002efe:	e021      	b.n	8002f44 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f02:	3301      	adds	r3, #1
 8002f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d9e7      	bls.n	8002edc <RCC_SetFlashLatency+0x48>
 8002f0c:	e01a      	b.n	8002f44 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f12:	e014      	b.n	8002f3e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	3338      	adds	r3, #56	@ 0x38
 8002f1a:	443b      	add	r3, r7
 8002f1c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d807      	bhi.n	8002f38 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	3338      	adds	r3, #56	@ 0x38
 8002f2e:	443b      	add	r3, r7
 8002f30:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f36:	e005      	b.n	8002f44 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d9e7      	bls.n	8002f14 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f44:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <RCC_SetFlashLatency+0x100>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 0207 	bic.w	r2, r3, #7
 8002f4c:	4911      	ldr	r1, [pc, #68]	@ (8002f94 <RCC_SetFlashLatency+0x100>)
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f54:	f7fe fc00 	bl	8001758 <HAL_GetTick>
 8002f58:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f5a:	e008      	b.n	8002f6e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f5c:	f7fe fbfc 	bl	8001758 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e007      	b.n	8002f7e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <RCC_SetFlashLatency+0x100>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1ef      	bne.n	8002f5c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3738      	adds	r7, #56	@ 0x38
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	080058b8 	.word	0x080058b8
 8002f8c:	080058c0 	.word	0x080058c0
 8002f90:	080058c8 	.word	0x080058c8
 8002f94:	58004000 	.word	0x58004000

08002f98 <LL_RCC_LSE_IsReady>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d101      	bne.n	8002fb0 <LL_RCC_LSE_IsReady+0x18>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <LL_RCC_LSE_IsReady+0x1a>
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_SetUSARTClockSource>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <LL_RCC_SetI2SClockSource>:
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ffe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <LL_RCC_SetLPUARTClockSource>:
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003024:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003028:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <LL_RCC_SetI2CClockSource>:
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800304a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003056:	43db      	mvns	r3, r3
 8003058:	401a      	ands	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003062:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <LL_RCC_SetLPTIMClockSource>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003082:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	43db      	mvns	r3, r3
 800308e:	401a      	ands	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <LL_RCC_SetRNGClockSource>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <LL_RCC_SetADCClockSource>:
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_SetRTCClockSource>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003110:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <LL_RCC_GetRTCClockSource>:
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <LL_RCC_ForceBackupDomainReset>:
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800314e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003152:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <LL_RCC_ReleaseBackupDomainReset>:
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800316e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
	...

08003180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800318c:	2300      	movs	r3, #0
 800318e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003190:	2300      	movs	r3, #0
 8003192:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d058      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80031a0:	f7fe fdc2 	bl	8001d28 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031a4:	f7fe fad8 	bl	8001758 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80031aa:	e009      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ac:	f7fe fad4 	bl	8001758 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d902      	bls.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	74fb      	strb	r3, [r7, #19]
        break;
 80031be:	e006      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80031c0:	4b7b      	ldr	r3, [pc, #492]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031cc:	d1ee      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d13c      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80031d4:	f7ff ffa7 	bl	8003126 <LL_RCC_GetRTCClockSource>
 80031d8:	4602      	mov	r2, r0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031de:	429a      	cmp	r2, r3
 80031e0:	d00f      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031f0:	f7ff ffa5 	bl	800313e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031f4:	f7ff ffb3 	bl	800315e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d014      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe faa4 	bl	8001758 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003212:	e00b      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fe faa0 	bl	8001758 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d902      	bls.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	74fb      	strb	r3, [r7, #19]
            break;
 800322a:	e004      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800322c:	f7ff feb4 	bl	8002f98 <LL_RCC_LSE_IsReady>
 8003230:	4603      	mov	r3, r0
 8003232:	2b01      	cmp	r3, #1
 8003234:	d1ee      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003236:	7cfb      	ldrb	r3, [r7, #19]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d105      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff5b 	bl	80030fc <LL_RCC_SetRTCClockSource>
 8003246:	e004      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	74bb      	strb	r3, [r7, #18]
 800324c:	e001      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fea9 	bl	8002fba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d004      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fe9e 	bl	8002fba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fec0 	bl	8003014 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fee6 	bl	8003076 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fedb 	bl	8003076 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fed0 	bl	8003076 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fea9 	bl	800303e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d004      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fe9e 	bl	800303e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fe93 	bl	800303e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d011      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fe5e 	bl	8002fea <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003336:	d107      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003346:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d010      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fea5 	bl	80030a8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003370:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003374:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d011      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fea3 	bl	80030d2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003394:	d107      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80033a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	58000400 	.word	0x58000400

080033b4 <LL_RCC_GetUSARTClockSource>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	401a      	ands	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	041b      	lsls	r3, r3, #16
 80033cc:	4313      	orrs	r3, r2
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <LL_RCC_GetLPUARTClockSource>:
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4013      	ands	r3, r2
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e042      	b.n	800348e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f83b 	bl	8003496 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	@ 0x24
 8003424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f835 	bl	80034a8 <UART_SetConfig>
 800343e:	4603      	mov	r3, r0
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e022      	b.n	800348e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fa9d 	bl	8003990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003464:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003474:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fb23 	bl	8003ad2 <UART_CheckIdleState>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ac:	b08c      	sub	sp, #48	@ 0x30
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b94      	ldr	r3, [pc, #592]	@ (8003728 <UART_SetConfig+0x280>)
 80034d8:	4013      	ands	r3, r2
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a89      	ldr	r2, [pc, #548]	@ (800372c <UART_SetConfig+0x284>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003510:	4313      	orrs	r3, r2
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800351e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003528:	430b      	orrs	r3, r1
 800352a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	f023 010f 	bic.w	r1, r3, #15
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7a      	ldr	r2, [pc, #488]	@ (8003730 <UART_SetConfig+0x288>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d127      	bne.n	800359c <UART_SetConfig+0xf4>
 800354c:	2003      	movs	r0, #3
 800354e:	f7ff ff31 	bl	80033b4 <LL_RCC_GetUSARTClockSource>
 8003552:	4603      	mov	r3, r0
 8003554:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003558:	2b03      	cmp	r3, #3
 800355a:	d81b      	bhi.n	8003594 <UART_SetConfig+0xec>
 800355c:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <UART_SetConfig+0xbc>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003575 	.word	0x08003575
 8003568:	08003585 	.word	0x08003585
 800356c:	0800357d 	.word	0x0800357d
 8003570:	0800358d 	.word	0x0800358d
 8003574:	2301      	movs	r3, #1
 8003576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800357a:	e080      	b.n	800367e <UART_SetConfig+0x1d6>
 800357c:	2302      	movs	r3, #2
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003582:	e07c      	b.n	800367e <UART_SetConfig+0x1d6>
 8003584:	2304      	movs	r3, #4
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358a:	e078      	b.n	800367e <UART_SetConfig+0x1d6>
 800358c:	2308      	movs	r3, #8
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003592:	e074      	b.n	800367e <UART_SetConfig+0x1d6>
 8003594:	2310      	movs	r3, #16
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359a:	e070      	b.n	800367e <UART_SetConfig+0x1d6>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a64      	ldr	r2, [pc, #400]	@ (8003734 <UART_SetConfig+0x28c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d138      	bne.n	8003618 <UART_SetConfig+0x170>
 80035a6:	200c      	movs	r0, #12
 80035a8:	f7ff ff04 	bl	80033b4 <LL_RCC_GetUSARTClockSource>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	d82c      	bhi.n	8003610 <UART_SetConfig+0x168>
 80035b6:	a201      	add	r2, pc, #4	@ (adr r2, 80035bc <UART_SetConfig+0x114>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	080035f1 	.word	0x080035f1
 80035c0:	08003611 	.word	0x08003611
 80035c4:	08003611 	.word	0x08003611
 80035c8:	08003611 	.word	0x08003611
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003611 	.word	0x08003611
 80035d4:	08003611 	.word	0x08003611
 80035d8:	08003611 	.word	0x08003611
 80035dc:	080035f9 	.word	0x080035f9
 80035e0:	08003611 	.word	0x08003611
 80035e4:	08003611 	.word	0x08003611
 80035e8:	08003611 	.word	0x08003611
 80035ec:	08003609 	.word	0x08003609
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f6:	e042      	b.n	800367e <UART_SetConfig+0x1d6>
 80035f8:	2302      	movs	r3, #2
 80035fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035fe:	e03e      	b.n	800367e <UART_SetConfig+0x1d6>
 8003600:	2304      	movs	r3, #4
 8003602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003606:	e03a      	b.n	800367e <UART_SetConfig+0x1d6>
 8003608:	2308      	movs	r3, #8
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800360e:	e036      	b.n	800367e <UART_SetConfig+0x1d6>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003616:	e032      	b.n	800367e <UART_SetConfig+0x1d6>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a43      	ldr	r2, [pc, #268]	@ (800372c <UART_SetConfig+0x284>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d12a      	bne.n	8003678 <UART_SetConfig+0x1d0>
 8003622:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003626:	f7ff fed7 	bl	80033d8 <LL_RCC_GetLPUARTClockSource>
 800362a:	4603      	mov	r3, r0
 800362c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003630:	d01a      	beq.n	8003668 <UART_SetConfig+0x1c0>
 8003632:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003636:	d81b      	bhi.n	8003670 <UART_SetConfig+0x1c8>
 8003638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800363c:	d00c      	beq.n	8003658 <UART_SetConfig+0x1b0>
 800363e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003642:	d815      	bhi.n	8003670 <UART_SetConfig+0x1c8>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <UART_SetConfig+0x1a8>
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364c:	d008      	beq.n	8003660 <UART_SetConfig+0x1b8>
 800364e:	e00f      	b.n	8003670 <UART_SetConfig+0x1c8>
 8003650:	2300      	movs	r3, #0
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003656:	e012      	b.n	800367e <UART_SetConfig+0x1d6>
 8003658:	2302      	movs	r3, #2
 800365a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800365e:	e00e      	b.n	800367e <UART_SetConfig+0x1d6>
 8003660:	2304      	movs	r3, #4
 8003662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003666:	e00a      	b.n	800367e <UART_SetConfig+0x1d6>
 8003668:	2308      	movs	r3, #8
 800366a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800366e:	e006      	b.n	800367e <UART_SetConfig+0x1d6>
 8003670:	2310      	movs	r3, #16
 8003672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003676:	e002      	b.n	800367e <UART_SetConfig+0x1d6>
 8003678:	2310      	movs	r3, #16
 800367a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2a      	ldr	r2, [pc, #168]	@ (800372c <UART_SetConfig+0x284>)
 8003684:	4293      	cmp	r3, r2
 8003686:	f040 80a4 	bne.w	80037d2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800368a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800368e:	2b08      	cmp	r3, #8
 8003690:	d823      	bhi.n	80036da <UART_SetConfig+0x232>
 8003692:	a201      	add	r2, pc, #4	@ (adr r2, 8003698 <UART_SetConfig+0x1f0>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036db 	.word	0x080036db
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036db 	.word	0x080036db
 80036a8:	080036cb 	.word	0x080036cb
 80036ac:	080036db 	.word	0x080036db
 80036b0:	080036db 	.word	0x080036db
 80036b4:	080036db 	.word	0x080036db
 80036b8:	080036d3 	.word	0x080036d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7ff fb96 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 80036c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036c2:	e010      	b.n	80036e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003738 <UART_SetConfig+0x290>)
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036c8:	e00d      	b.n	80036e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ca:	f7ff fadb 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 80036ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036d0:	e009      	b.n	80036e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036d8:	e005      	b.n	80036e6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80036e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8137 	beq.w	800395c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	4a12      	ldr	r2, [pc, #72]	@ (800373c <UART_SetConfig+0x294>)
 80036f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003700:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	429a      	cmp	r2, r3
 8003710:	d305      	bcc.n	800371e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	429a      	cmp	r2, r3
 800371c:	d910      	bls.n	8003740 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003724:	e11a      	b.n	800395c <UART_SetConfig+0x4b4>
 8003726:	bf00      	nop
 8003728:	cfff69f3 	.word	0xcfff69f3
 800372c:	40008000 	.word	0x40008000
 8003730:	40013800 	.word	0x40013800
 8003734:	40004400 	.word	0x40004400
 8003738:	00f42400 	.word	0x00f42400
 800373c:	08005ba4 	.word	0x08005ba4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	2200      	movs	r2, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	60fa      	str	r2, [r7, #12]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	4a8e      	ldr	r2, [pc, #568]	@ (8003988 <UART_SetConfig+0x4e0>)
 800374e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003752:	b29b      	uxth	r3, r3
 8003754:	2200      	movs	r2, #0
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800375e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003762:	f7fc fd5d 	bl	8000220 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	020b      	lsls	r3, r1, #8
 8003778:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800377c:	0202      	lsls	r2, r0, #8
 800377e:	6979      	ldr	r1, [r7, #20]
 8003780:	6849      	ldr	r1, [r1, #4]
 8003782:	0849      	lsrs	r1, r1, #1
 8003784:	2000      	movs	r0, #0
 8003786:	460c      	mov	r4, r1
 8003788:	4605      	mov	r5, r0
 800378a:	eb12 0804 	adds.w	r8, r2, r4
 800378e:	eb43 0905 	adc.w	r9, r3, r5
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	469a      	mov	sl, r3
 800379a:	4693      	mov	fp, r2
 800379c:	4652      	mov	r2, sl
 800379e:	465b      	mov	r3, fp
 80037a0:	4640      	mov	r0, r8
 80037a2:	4649      	mov	r1, r9
 80037a4:	f7fc fd3c 	bl	8000220 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4613      	mov	r3, r2
 80037ae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037b6:	d308      	bcc.n	80037ca <UART_SetConfig+0x322>
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037be:	d204      	bcs.n	80037ca <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a3a      	ldr	r2, [r7, #32]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	e0c8      	b.n	800395c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80037d0:	e0c4      	b.n	800395c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037da:	d167      	bne.n	80038ac <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80037dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d828      	bhi.n	8003836 <UART_SetConfig+0x38e>
 80037e4:	a201      	add	r2, pc, #4	@ (adr r2, 80037ec <UART_SetConfig+0x344>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	08003811 	.word	0x08003811
 80037f0:	08003819 	.word	0x08003819
 80037f4:	08003821 	.word	0x08003821
 80037f8:	08003837 	.word	0x08003837
 80037fc:	08003827 	.word	0x08003827
 8003800:	08003837 	.word	0x08003837
 8003804:	08003837 	.word	0x08003837
 8003808:	08003837 	.word	0x08003837
 800380c:	0800382f 	.word	0x0800382f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003810:	f7ff faec 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8003814:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003816:	e014      	b.n	8003842 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003818:	f7ff fafa 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 800381c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800381e:	e010      	b.n	8003842 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003820:	4b5a      	ldr	r3, [pc, #360]	@ (800398c <UART_SetConfig+0x4e4>)
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003824:	e00d      	b.n	8003842 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003826:	f7ff fa2d 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 800382a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800382c:	e009      	b.n	8003842 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003834:	e005      	b.n	8003842 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003840:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8089 	beq.w	800395c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	4a4e      	ldr	r2, [pc, #312]	@ (8003988 <UART_SetConfig+0x4e0>)
 8003850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003854:	461a      	mov	r2, r3
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	fbb3 f3f2 	udiv	r3, r3, r2
 800385c:	005a      	lsls	r2, r3, #1
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	441a      	add	r2, r3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d916      	bls.n	80038a4 <UART_SetConfig+0x3fc>
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387c:	d212      	bcs.n	80038a4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	b29b      	uxth	r3, r3
 8003882:	f023 030f 	bic.w	r3, r3, #15
 8003886:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	b29a      	uxth	r2, r3
 8003894:	8bfb      	ldrh	r3, [r7, #30]
 8003896:	4313      	orrs	r3, r2
 8003898:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	8bfa      	ldrh	r2, [r7, #30]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	e05b      	b.n	800395c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038aa:	e057      	b.n	800395c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d828      	bhi.n	8003906 <UART_SetConfig+0x45e>
 80038b4:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <UART_SetConfig+0x414>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038e9 	.word	0x080038e9
 80038c4:	080038f1 	.word	0x080038f1
 80038c8:	08003907 	.word	0x08003907
 80038cc:	080038f7 	.word	0x080038f7
 80038d0:	08003907 	.word	0x08003907
 80038d4:	08003907 	.word	0x08003907
 80038d8:	08003907 	.word	0x08003907
 80038dc:	080038ff 	.word	0x080038ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7ff fa84 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 80038e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038e6:	e014      	b.n	8003912 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e8:	f7ff fa92 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 80038ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038ee:	e010      	b.n	8003912 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f0:	4b26      	ldr	r3, [pc, #152]	@ (800398c <UART_SetConfig+0x4e4>)
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038f4:	e00d      	b.n	8003912 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f6:	f7ff f9c5 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 80038fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038fc:	e009      	b.n	8003912 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003904:	e005      	b.n	8003912 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003910:	bf00      	nop
    }

    if (pclk != 0U)
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d021      	beq.n	800395c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	4a1a      	ldr	r2, [pc, #104]	@ (8003988 <UART_SetConfig+0x4e0>)
 800391e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003922:	461a      	mov	r2, r3
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	fbb3 f2f2 	udiv	r2, r3, r2
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	441a      	add	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	fbb2 f3f3 	udiv	r3, r2, r3
 800393a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	2b0f      	cmp	r3, #15
 8003940:	d909      	bls.n	8003956 <UART_SetConfig+0x4ae>
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003948:	d205      	bcs.n	8003956 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	b29a      	uxth	r2, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	e002      	b.n	800395c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2201      	movs	r2, #1
 8003960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2201      	movs	r2, #1
 8003968:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2200      	movs	r2, #0
 8003970:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003978:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800397c:	4618      	mov	r0, r3
 800397e:	3730      	adds	r7, #48	@ 0x30
 8003980:	46bd      	mov	sp, r7
 8003982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003986:	bf00      	nop
 8003988:	08005ba4 	.word	0x08005ba4
 800398c:	00f42400 	.word	0x00f42400

08003990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a8e:	d10a      	bne.n	8003aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af02      	add	r7, sp, #8
 8003ad8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ae2:	f7fd fe39 	bl	8001758 <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d10e      	bne.n	8003b14 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f832 	bl	8003b6e <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e028      	b.n	8003b66 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d10e      	bne.n	8003b40 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f81c 	bl	8003b6e <UART_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e012      	b.n	8003b66 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b09c      	sub	sp, #112	@ 0x70
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7e:	e0a9      	b.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	f000 80a5 	beq.w	8003cd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8a:	f7fd fde5 	bl	8001758 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d140      	bne.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003bb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003bc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e6      	bne.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bf2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003bf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e069      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d051      	beq.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c3e:	d149      	bne.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c6a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e6      	bne.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3308      	adds	r3, #8
 8003c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c9c:	623a      	str	r2, [r7, #32]
 8003c9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	69f9      	ldr	r1, [r7, #28]
 8003ca2:	6a3a      	ldr	r2, [r7, #32]
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e010      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	f43f af46 	beq.w	8003b80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3770      	adds	r7, #112	@ 0x70
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <LL_RCC_GetUSARTClockSource>:
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	401a      	ands	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	4313      	orrs	r3, r2
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e04a      	b.n	8003dcc <HAL_USART_Init+0xa8>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d114      	bne.n	8003d6c <HAL_USART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    USART_InitCallbacksToDefault(husart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f92c 	bl	8003fa8 <USART_InitCallbacksToDefault>

    if (husart->MspInitCallback == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <HAL_USART_Init+0x3e>
    {
      husart->MspInitCallback = HAL_USART_MspInit;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd4 <HAL_USART_Init+0xb0>)
 8003d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f97d 	bl	8004084 <USART_SetConfig>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_USART_Init+0x70>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e01b      	b.n	8003dcc <HAL_USART_Init+0xa8>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003da2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003db2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fc1f 	bl	8004608 <USART_CheckIdleState>
 8003dca:	4603      	mov	r3, r0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	080010b5 	.word	0x080010b5

08003dd8 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	@ 0x28
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 8095 	bne.w	8003f20 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_USART_Transmit+0x2a>
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e08d      	b.n	8003f22 <HAL_USART_Transmit+0x14a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Process Locked */
    __HAL_LOCK(husart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_USART_Transmit+0x3c>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e086      	b.n	8003f22 <HAL_USART_Transmit+0x14a>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	65da      	str	r2, [r3, #92]	@ 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2212      	movs	r2, #18
 8003e26:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e2a:	f7fd fc95 	bl	8001758 <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	859a      	strh	r2, [r3, #44]	@ 0x2c
    husart->TxXferCount = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e44:	d108      	bne.n	8003e58 <HAL_USART_Transmit+0x80>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e003      	b.n	8003e60 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8003e60:	e02a      	b.n	8003eb8 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2180      	movs	r1, #128	@ 0x80
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f8d3 	bl	8004018 <USART_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e052      	b.n	8003f22 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e90:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	3302      	adds	r3, #2
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e007      	b.n	8003eaa <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (husart->TxXferCount > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1cf      	bne.n	8003e62 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2140      	movs	r1, #64	@ 0x40
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f8a3 	bl	8004018 <USART_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e022      	b.n	8003f22 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2240      	movs	r2, #64	@ 0x40
 8003ee2:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2208      	movs	r2, #8
 8003eea:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0208 	orr.w	r2, r2, #8
 8003efa:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0210 	orr.w	r2, r2, #16
 8003f0a:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e000      	b.n	8003f22 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_USART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback can be implemented in the user file.
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_USART_RxHalfCpltCallback>:
  * @brief Rx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_RxHalfCpltCallback can be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <HAL_USART_AbortCpltCallback>:
  * @brief  USART Abort Complete callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <USART_InitCallbacksToDefault>:
  * @param  husart USART handle.
  * @retval none
  */
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
void USART_InitCallbacksToDefault(USART_HandleTypeDef *husart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Init the USART Callback settings */
  husart->TxHalfCpltCallback        = HAL_USART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a10      	ldr	r2, [pc, #64]	@ (8003ff4 <USART_InitCallbacksToDefault+0x4c>)
 8003fb4:	661a      	str	r2, [r3, #96]	@ 0x60
  husart->TxCpltCallback            = HAL_USART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8003ff8 <USART_InitCallbacksToDefault+0x50>)
 8003fba:	665a      	str	r2, [r3, #100]	@ 0x64
  husart->RxHalfCpltCallback        = HAL_USART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8003ffc <USART_InitCallbacksToDefault+0x54>)
 8003fc0:	669a      	str	r2, [r3, #104]	@ 0x68
  husart->RxCpltCallback            = HAL_USART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8004000 <USART_InitCallbacksToDefault+0x58>)
 8003fc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  husart->TxRxCpltCallback          = HAL_USART_TxRxCpltCallback;          /* Legacy weak TxRxCpltCallback          */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a0e      	ldr	r2, [pc, #56]	@ (8004004 <USART_InitCallbacksToDefault+0x5c>)
 8003fcc:	671a      	str	r2, [r3, #112]	@ 0x70
  husart->ErrorCallback             = HAL_USART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004008 <USART_InitCallbacksToDefault+0x60>)
 8003fd2:	675a      	str	r2, [r3, #116]	@ 0x74
  husart->AbortCpltCallback         = HAL_USART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800400c <USART_InitCallbacksToDefault+0x64>)
 8003fd8:	679a      	str	r2, [r3, #120]	@ 0x78
  husart->RxFifoFullCallback        = HAL_USARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8004010 <USART_InitCallbacksToDefault+0x68>)
 8003fde:	67da      	str	r2, [r3, #124]	@ 0x7c
  husart->TxFifoEmptyCallback       = HAL_USARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8004014 <USART_InitCallbacksToDefault+0x6c>)
 8003fe4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	08003f3d 	.word	0x08003f3d
 8003ff8:	08003f2b 	.word	0x08003f2b
 8003ffc:	08003f61 	.word	0x08003f61
 8004000:	08003f4f 	.word	0x08003f4f
 8004004:	08003f73 	.word	0x08003f73
 8004008:	08003f85 	.word	0x08003f85
 800400c:	08003f97 	.word	0x08003f97
 8004010:	0800468f 	.word	0x0800468f
 8004014:	080046a1 	.word	0x080046a1

08004018 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	4613      	mov	r3, r2
 8004026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004028:	e018      	b.n	800405c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d014      	beq.n	800405c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004032:	f7fd fb91 	bl	8001758 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	429a      	cmp	r2, r3
 8004040:	d302      	bcc.n	8004048 <USART_WaitOnFlagUntilTimeout+0x30>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e00f      	b.n	800407c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	429a      	cmp	r2, r3
 8004078:	d0d7      	beq.n	800402a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4ba1      	ldr	r3, [pc, #644]	@ (8004338 <USART_SetConfig+0x2b4>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	6979      	ldr	r1, [r7, #20]
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80040be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80040c2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040f2:	f023 0309 	bic.w	r3, r3, #9
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	6979      	ldr	r1, [r7, #20]
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	f023 010f 	bic.w	r1, r3, #15
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a88      	ldr	r2, [pc, #544]	@ (800433c <USART_SetConfig+0x2b8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d122      	bne.n	8004166 <USART_SetConfig+0xe2>
 8004120:	2003      	movs	r0, #3
 8004122:	f7ff fdec 	bl	8003cfe <LL_RCC_GetUSARTClockSource>
 8004126:	4603      	mov	r3, r0
 8004128:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800412c:	2b03      	cmp	r3, #3
 800412e:	d817      	bhi.n	8004160 <USART_SetConfig+0xdc>
 8004130:	a201      	add	r2, pc, #4	@ (adr r2, 8004138 <USART_SetConfig+0xb4>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	08004149 	.word	0x08004149
 800413c:	08004155 	.word	0x08004155
 8004140:	0800414f 	.word	0x0800414f
 8004144:	0800415b 	.word	0x0800415b
 8004148:	2301      	movs	r3, #1
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e047      	b.n	80041de <USART_SetConfig+0x15a>
 800414e:	2302      	movs	r3, #2
 8004150:	77fb      	strb	r3, [r7, #31]
 8004152:	e044      	b.n	80041de <USART_SetConfig+0x15a>
 8004154:	2304      	movs	r3, #4
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e041      	b.n	80041de <USART_SetConfig+0x15a>
 800415a:	2308      	movs	r3, #8
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e03e      	b.n	80041de <USART_SetConfig+0x15a>
 8004160:	2310      	movs	r3, #16
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e03b      	b.n	80041de <USART_SetConfig+0x15a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a75      	ldr	r2, [pc, #468]	@ (8004340 <USART_SetConfig+0x2bc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d134      	bne.n	80041da <USART_SetConfig+0x156>
 8004170:	200c      	movs	r0, #12
 8004172:	f7ff fdc4 	bl	8003cfe <LL_RCC_GetUSARTClockSource>
 8004176:	4603      	mov	r3, r0
 8004178:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d829      	bhi.n	80041d4 <USART_SetConfig+0x150>
 8004180:	a201      	add	r2, pc, #4	@ (adr r2, 8004188 <USART_SetConfig+0x104>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041bd 	.word	0x080041bd
 800418c:	080041d5 	.word	0x080041d5
 8004190:	080041d5 	.word	0x080041d5
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041c9 	.word	0x080041c9
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041c3 	.word	0x080041c3
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041d5 	.word	0x080041d5
 80041b8:	080041cf 	.word	0x080041cf
 80041bc:	2300      	movs	r3, #0
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e00d      	b.n	80041de <USART_SetConfig+0x15a>
 80041c2:	2302      	movs	r3, #2
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e00a      	b.n	80041de <USART_SetConfig+0x15a>
 80041c8:	2304      	movs	r3, #4
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e007      	b.n	80041de <USART_SetConfig+0x15a>
 80041ce:	2308      	movs	r3, #8
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e004      	b.n	80041de <USART_SetConfig+0x15a>
 80041d4:	2310      	movs	r3, #16
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e001      	b.n	80041de <USART_SetConfig+0x15a>
 80041da:	2310      	movs	r3, #16
 80041dc:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80041de:	7ffb      	ldrb	r3, [r7, #31]
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	f200 81de 	bhi.w	80045a2 <USART_SetConfig+0x51e>
 80041e6:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <USART_SetConfig+0x168>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	08004211 	.word	0x08004211
 80041f0:	080042c7 	.word	0x080042c7
 80041f4:	0800438b 	.word	0x0800438b
 80041f8:	080045a3 	.word	0x080045a3
 80041fc:	0800443b 	.word	0x0800443b
 8004200:	080045a3 	.word	0x080045a3
 8004204:	080045a3 	.word	0x080045a3
 8004208:	080045a3 	.word	0x080045a3
 800420c:	080044f1 	.word	0x080044f1
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7fe fdec 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8004214:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d044      	beq.n	80042a8 <USART_SetConfig+0x224>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	2b01      	cmp	r3, #1
 8004224:	d03e      	beq.n	80042a4 <USART_SetConfig+0x220>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	2b02      	cmp	r3, #2
 800422c:	d038      	beq.n	80042a0 <USART_SetConfig+0x21c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	2b03      	cmp	r3, #3
 8004234:	d032      	beq.n	800429c <USART_SetConfig+0x218>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	2b04      	cmp	r3, #4
 800423c:	d02c      	beq.n	8004298 <USART_SetConfig+0x214>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	2b05      	cmp	r3, #5
 8004244:	d026      	beq.n	8004294 <USART_SetConfig+0x210>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	2b06      	cmp	r3, #6
 800424c:	d020      	beq.n	8004290 <USART_SetConfig+0x20c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	2b07      	cmp	r3, #7
 8004254:	d01a      	beq.n	800428c <USART_SetConfig+0x208>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	2b08      	cmp	r3, #8
 800425c:	d014      	beq.n	8004288 <USART_SetConfig+0x204>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	2b09      	cmp	r3, #9
 8004264:	d00e      	beq.n	8004284 <USART_SetConfig+0x200>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	2b0a      	cmp	r3, #10
 800426c:	d008      	beq.n	8004280 <USART_SetConfig+0x1fc>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	2b0b      	cmp	r3, #11
 8004274:	d102      	bne.n	800427c <USART_SetConfig+0x1f8>
 8004276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800427a:	e016      	b.n	80042aa <USART_SetConfig+0x226>
 800427c:	2301      	movs	r3, #1
 800427e:	e014      	b.n	80042aa <USART_SetConfig+0x226>
 8004280:	2380      	movs	r3, #128	@ 0x80
 8004282:	e012      	b.n	80042aa <USART_SetConfig+0x226>
 8004284:	2340      	movs	r3, #64	@ 0x40
 8004286:	e010      	b.n	80042aa <USART_SetConfig+0x226>
 8004288:	2320      	movs	r3, #32
 800428a:	e00e      	b.n	80042aa <USART_SetConfig+0x226>
 800428c:	2310      	movs	r3, #16
 800428e:	e00c      	b.n	80042aa <USART_SetConfig+0x226>
 8004290:	230c      	movs	r3, #12
 8004292:	e00a      	b.n	80042aa <USART_SetConfig+0x226>
 8004294:	230a      	movs	r3, #10
 8004296:	e008      	b.n	80042aa <USART_SetConfig+0x226>
 8004298:	2308      	movs	r3, #8
 800429a:	e006      	b.n	80042aa <USART_SetConfig+0x226>
 800429c:	2306      	movs	r3, #6
 800429e:	e004      	b.n	80042aa <USART_SetConfig+0x226>
 80042a0:	2304      	movs	r3, #4
 80042a2:	e002      	b.n	80042aa <USART_SetConfig+0x226>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e000      	b.n	80042aa <USART_SetConfig+0x226>
 80042a8:	2301      	movs	r3, #1
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	005a      	lsls	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	441a      	add	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	61bb      	str	r3, [r7, #24]
      break;
 80042c4:	e170      	b.n	80045a8 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80042c6:	f7fe fda3 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 80042ca:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d04b      	beq.n	800436c <USART_SetConfig+0x2e8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d045      	beq.n	8004368 <USART_SetConfig+0x2e4>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d03f      	beq.n	8004364 <USART_SetConfig+0x2e0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d039      	beq.n	8004360 <USART_SetConfig+0x2dc>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d033      	beq.n	800435c <USART_SetConfig+0x2d8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	d02d      	beq.n	8004358 <USART_SetConfig+0x2d4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	2b06      	cmp	r3, #6
 8004302:	d027      	beq.n	8004354 <USART_SetConfig+0x2d0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	2b07      	cmp	r3, #7
 800430a:	d021      	beq.n	8004350 <USART_SetConfig+0x2cc>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	2b08      	cmp	r3, #8
 8004312:	d01b      	beq.n	800434c <USART_SetConfig+0x2c8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	2b09      	cmp	r3, #9
 800431a:	d015      	beq.n	8004348 <USART_SetConfig+0x2c4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	2b0a      	cmp	r3, #10
 8004322:	d00f      	beq.n	8004344 <USART_SetConfig+0x2c0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	2b0b      	cmp	r3, #11
 800432a:	d102      	bne.n	8004332 <USART_SetConfig+0x2ae>
 800432c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004330:	e01d      	b.n	800436e <USART_SetConfig+0x2ea>
 8004332:	2301      	movs	r3, #1
 8004334:	e01b      	b.n	800436e <USART_SetConfig+0x2ea>
 8004336:	bf00      	nop
 8004338:	cfff69f3 	.word	0xcfff69f3
 800433c:	40013800 	.word	0x40013800
 8004340:	40004400 	.word	0x40004400
 8004344:	2380      	movs	r3, #128	@ 0x80
 8004346:	e012      	b.n	800436e <USART_SetConfig+0x2ea>
 8004348:	2340      	movs	r3, #64	@ 0x40
 800434a:	e010      	b.n	800436e <USART_SetConfig+0x2ea>
 800434c:	2320      	movs	r3, #32
 800434e:	e00e      	b.n	800436e <USART_SetConfig+0x2ea>
 8004350:	2310      	movs	r3, #16
 8004352:	e00c      	b.n	800436e <USART_SetConfig+0x2ea>
 8004354:	230c      	movs	r3, #12
 8004356:	e00a      	b.n	800436e <USART_SetConfig+0x2ea>
 8004358:	230a      	movs	r3, #10
 800435a:	e008      	b.n	800436e <USART_SetConfig+0x2ea>
 800435c:	2308      	movs	r3, #8
 800435e:	e006      	b.n	800436e <USART_SetConfig+0x2ea>
 8004360:	2306      	movs	r3, #6
 8004362:	e004      	b.n	800436e <USART_SetConfig+0x2ea>
 8004364:	2304      	movs	r3, #4
 8004366:	e002      	b.n	800436e <USART_SetConfig+0x2ea>
 8004368:	2302      	movs	r3, #2
 800436a:	e000      	b.n	800436e <USART_SetConfig+0x2ea>
 800436c:	2301      	movs	r3, #1
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	005a      	lsls	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	441a      	add	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
      break;
 8004388:	e10e      	b.n	80045a8 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	d044      	beq.n	800441c <USART_SetConfig+0x398>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	2b01      	cmp	r3, #1
 8004398:	d03e      	beq.n	8004418 <USART_SetConfig+0x394>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d038      	beq.n	8004414 <USART_SetConfig+0x390>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d032      	beq.n	8004410 <USART_SetConfig+0x38c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d02c      	beq.n	800440c <USART_SetConfig+0x388>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d026      	beq.n	8004408 <USART_SetConfig+0x384>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d020      	beq.n	8004404 <USART_SetConfig+0x380>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	2b07      	cmp	r3, #7
 80043c8:	d01a      	beq.n	8004400 <USART_SetConfig+0x37c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d014      	beq.n	80043fc <USART_SetConfig+0x378>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	2b09      	cmp	r3, #9
 80043d8:	d00e      	beq.n	80043f8 <USART_SetConfig+0x374>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	2b0a      	cmp	r3, #10
 80043e0:	d008      	beq.n	80043f4 <USART_SetConfig+0x370>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	2b0b      	cmp	r3, #11
 80043e8:	d102      	bne.n	80043f0 <USART_SetConfig+0x36c>
 80043ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043ee:	e016      	b.n	800441e <USART_SetConfig+0x39a>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e014      	b.n	800441e <USART_SetConfig+0x39a>
 80043f4:	2380      	movs	r3, #128	@ 0x80
 80043f6:	e012      	b.n	800441e <USART_SetConfig+0x39a>
 80043f8:	2340      	movs	r3, #64	@ 0x40
 80043fa:	e010      	b.n	800441e <USART_SetConfig+0x39a>
 80043fc:	2320      	movs	r3, #32
 80043fe:	e00e      	b.n	800441e <USART_SetConfig+0x39a>
 8004400:	2310      	movs	r3, #16
 8004402:	e00c      	b.n	800441e <USART_SetConfig+0x39a>
 8004404:	230c      	movs	r3, #12
 8004406:	e00a      	b.n	800441e <USART_SetConfig+0x39a>
 8004408:	230a      	movs	r3, #10
 800440a:	e008      	b.n	800441e <USART_SetConfig+0x39a>
 800440c:	2308      	movs	r3, #8
 800440e:	e006      	b.n	800441e <USART_SetConfig+0x39a>
 8004410:	2306      	movs	r3, #6
 8004412:	e004      	b.n	800441e <USART_SetConfig+0x39a>
 8004414:	2304      	movs	r3, #4
 8004416:	e002      	b.n	800441e <USART_SetConfig+0x39a>
 8004418:	2302      	movs	r3, #2
 800441a:	e000      	b.n	800441e <USART_SetConfig+0x39a>
 800441c:	2301      	movs	r3, #1
 800441e:	4a79      	ldr	r2, [pc, #484]	@ (8004604 <USART_SetConfig+0x580>)
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	005a      	lsls	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	61bb      	str	r3, [r7, #24]
      break;
 8004438:	e0b6      	b.n	80045a8 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7fe fc23 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 800443e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d044      	beq.n	80044d2 <USART_SetConfig+0x44e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	2b01      	cmp	r3, #1
 800444e:	d03e      	beq.n	80044ce <USART_SetConfig+0x44a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	2b02      	cmp	r3, #2
 8004456:	d038      	beq.n	80044ca <USART_SetConfig+0x446>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	2b03      	cmp	r3, #3
 800445e:	d032      	beq.n	80044c6 <USART_SetConfig+0x442>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	2b04      	cmp	r3, #4
 8004466:	d02c      	beq.n	80044c2 <USART_SetConfig+0x43e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	2b05      	cmp	r3, #5
 800446e:	d026      	beq.n	80044be <USART_SetConfig+0x43a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	2b06      	cmp	r3, #6
 8004476:	d020      	beq.n	80044ba <USART_SetConfig+0x436>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	2b07      	cmp	r3, #7
 800447e:	d01a      	beq.n	80044b6 <USART_SetConfig+0x432>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	2b08      	cmp	r3, #8
 8004486:	d014      	beq.n	80044b2 <USART_SetConfig+0x42e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	2b09      	cmp	r3, #9
 800448e:	d00e      	beq.n	80044ae <USART_SetConfig+0x42a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	2b0a      	cmp	r3, #10
 8004496:	d008      	beq.n	80044aa <USART_SetConfig+0x426>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	2b0b      	cmp	r3, #11
 800449e:	d102      	bne.n	80044a6 <USART_SetConfig+0x422>
 80044a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044a4:	e016      	b.n	80044d4 <USART_SetConfig+0x450>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e014      	b.n	80044d4 <USART_SetConfig+0x450>
 80044aa:	2380      	movs	r3, #128	@ 0x80
 80044ac:	e012      	b.n	80044d4 <USART_SetConfig+0x450>
 80044ae:	2340      	movs	r3, #64	@ 0x40
 80044b0:	e010      	b.n	80044d4 <USART_SetConfig+0x450>
 80044b2:	2320      	movs	r3, #32
 80044b4:	e00e      	b.n	80044d4 <USART_SetConfig+0x450>
 80044b6:	2310      	movs	r3, #16
 80044b8:	e00c      	b.n	80044d4 <USART_SetConfig+0x450>
 80044ba:	230c      	movs	r3, #12
 80044bc:	e00a      	b.n	80044d4 <USART_SetConfig+0x450>
 80044be:	230a      	movs	r3, #10
 80044c0:	e008      	b.n	80044d4 <USART_SetConfig+0x450>
 80044c2:	2308      	movs	r3, #8
 80044c4:	e006      	b.n	80044d4 <USART_SetConfig+0x450>
 80044c6:	2306      	movs	r3, #6
 80044c8:	e004      	b.n	80044d4 <USART_SetConfig+0x450>
 80044ca:	2304      	movs	r3, #4
 80044cc:	e002      	b.n	80044d4 <USART_SetConfig+0x450>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e000      	b.n	80044d4 <USART_SetConfig+0x450>
 80044d2:	2301      	movs	r3, #1
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	005a      	lsls	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	441a      	add	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	61bb      	str	r3, [r7, #24]
      break;
 80044ee:	e05b      	b.n	80045a8 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d044      	beq.n	8004582 <USART_SetConfig+0x4fe>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d03e      	beq.n	800457e <USART_SetConfig+0x4fa>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	2b02      	cmp	r3, #2
 8004506:	d038      	beq.n	800457a <USART_SetConfig+0x4f6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	2b03      	cmp	r3, #3
 800450e:	d032      	beq.n	8004576 <USART_SetConfig+0x4f2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	2b04      	cmp	r3, #4
 8004516:	d02c      	beq.n	8004572 <USART_SetConfig+0x4ee>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	2b05      	cmp	r3, #5
 800451e:	d026      	beq.n	800456e <USART_SetConfig+0x4ea>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	2b06      	cmp	r3, #6
 8004526:	d020      	beq.n	800456a <USART_SetConfig+0x4e6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	2b07      	cmp	r3, #7
 800452e:	d01a      	beq.n	8004566 <USART_SetConfig+0x4e2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	2b08      	cmp	r3, #8
 8004536:	d014      	beq.n	8004562 <USART_SetConfig+0x4de>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	2b09      	cmp	r3, #9
 800453e:	d00e      	beq.n	800455e <USART_SetConfig+0x4da>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	2b0a      	cmp	r3, #10
 8004546:	d008      	beq.n	800455a <USART_SetConfig+0x4d6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	2b0b      	cmp	r3, #11
 800454e:	d102      	bne.n	8004556 <USART_SetConfig+0x4d2>
 8004550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004554:	e016      	b.n	8004584 <USART_SetConfig+0x500>
 8004556:	2301      	movs	r3, #1
 8004558:	e014      	b.n	8004584 <USART_SetConfig+0x500>
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	e012      	b.n	8004584 <USART_SetConfig+0x500>
 800455e:	2340      	movs	r3, #64	@ 0x40
 8004560:	e010      	b.n	8004584 <USART_SetConfig+0x500>
 8004562:	2320      	movs	r3, #32
 8004564:	e00e      	b.n	8004584 <USART_SetConfig+0x500>
 8004566:	2310      	movs	r3, #16
 8004568:	e00c      	b.n	8004584 <USART_SetConfig+0x500>
 800456a:	230c      	movs	r3, #12
 800456c:	e00a      	b.n	8004584 <USART_SetConfig+0x500>
 800456e:	230a      	movs	r3, #10
 8004570:	e008      	b.n	8004584 <USART_SetConfig+0x500>
 8004572:	2308      	movs	r3, #8
 8004574:	e006      	b.n	8004584 <USART_SetConfig+0x500>
 8004576:	2306      	movs	r3, #6
 8004578:	e004      	b.n	8004584 <USART_SetConfig+0x500>
 800457a:	2304      	movs	r3, #4
 800457c:	e002      	b.n	8004584 <USART_SetConfig+0x500>
 800457e:	2302      	movs	r3, #2
 8004580:	e000      	b.n	8004584 <USART_SetConfig+0x500>
 8004582:	2301      	movs	r3, #1
 8004584:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	005a      	lsls	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	441a      	add	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	61bb      	str	r3, [r7, #24]
      break;
 80045a0:	e002      	b.n	80045a8 <USART_SetConfig+0x524>
    default:
      ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	77bb      	strb	r3, [r7, #30]
      break;
 80045a6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b0f      	cmp	r3, #15
 80045ac:	d916      	bls.n	80045dc <USART_SetConfig+0x558>
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b4:	d212      	bcs.n	80045dc <USART_SetConfig+0x558>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f023 030f 	bic.w	r3, r3, #15
 80045be:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	89fb      	ldrh	r3, [r7, #14]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	89fa      	ldrh	r2, [r7, #14]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e001      	b.n	80045e0 <USART_SetConfig+0x55c>
  }
  else
  {
    ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 80045f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	00f42400 	.word	0x00f42400

08004608 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af02      	add	r7, sp, #8
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004616:	f7fd f89f 	bl	8001758 <HAL_GetTick>
 800461a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	d10e      	bne.n	8004648 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800462a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff fced 	bl	8004018 <USART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e01e      	b.n	8004686 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d10e      	bne.n	8004674 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fcd7 	bl	8004018 <USART_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e008      	b.n	8004686 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_USARTEx_DisableFifoMode+0x16>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e027      	b.n	8004718 <HAL_USARTEx_DisableFifoMode+0x66>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80046f6:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8004736:	2302      	movs	r3, #2
 8004738:	e02d      	b.n	8004796 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f850 	bl	800481c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e02d      	b.n	8004812 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f812 	bl	800481c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	875a      	strh	r2, [r3, #58]	@ 0x3a
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004838:	e02f      	b.n	800489a <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800483a:	2308      	movs	r3, #8
 800483c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800483e:	2308      	movs	r3, #8
 8004840:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	0e5b      	lsrs	r3, r3, #25
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	0f5b      	lsrs	r3, r3, #29
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	7b3a      	ldrb	r2, [r7, #12]
 8004866:	490f      	ldr	r1, [pc, #60]	@ (80048a4 <USARTEx_SetNbDataToProcess+0x88>)
 8004868:	5c8a      	ldrb	r2, [r1, r2]
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	7b3a      	ldrb	r2, [r7, #12]
 8004870:	490d      	ldr	r1, [pc, #52]	@ (80048a8 <USARTEx_SetNbDataToProcess+0x8c>)
 8004872:	5c8a      	ldrb	r2, [r1, r2]
 8004874:	fb93 f3f2 	sdiv	r3, r3, r2
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	7b7a      	ldrb	r2, [r7, #13]
 8004882:	4908      	ldr	r1, [pc, #32]	@ (80048a4 <USARTEx_SetNbDataToProcess+0x88>)
 8004884:	5c8a      	ldrb	r2, [r1, r2]
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	7b7a      	ldrb	r2, [r7, #13]
 800488c:	4906      	ldr	r1, [pc, #24]	@ (80048a8 <USARTEx_SetNbDataToProcess+0x8c>)
 800488e:	5c8a      	ldrb	r2, [r1, r2]
 8004890:	fb93 f3f2 	sdiv	r3, r3, r2
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	08005bbc 	.word	0x08005bbc
 80048a8:	08005bc4 	.word	0x08005bc4

080048ac <std>:
 80048ac:	2300      	movs	r3, #0
 80048ae:	b510      	push	{r4, lr}
 80048b0:	4604      	mov	r4, r0
 80048b2:	e9c0 3300 	strd	r3, r3, [r0]
 80048b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ba:	6083      	str	r3, [r0, #8]
 80048bc:	8181      	strh	r1, [r0, #12]
 80048be:	6643      	str	r3, [r0, #100]	@ 0x64
 80048c0:	81c2      	strh	r2, [r0, #14]
 80048c2:	6183      	str	r3, [r0, #24]
 80048c4:	4619      	mov	r1, r3
 80048c6:	2208      	movs	r2, #8
 80048c8:	305c      	adds	r0, #92	@ 0x5c
 80048ca:	f000 fa01 	bl	8004cd0 <memset>
 80048ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <std+0x58>)
 80048d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80048d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004908 <std+0x5c>)
 80048d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <std+0x60>)
 80048d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <std+0x64>)
 80048dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <std+0x68>)
 80048e0:	6224      	str	r4, [r4, #32]
 80048e2:	429c      	cmp	r4, r3
 80048e4:	d006      	beq.n	80048f4 <std+0x48>
 80048e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048ea:	4294      	cmp	r4, r2
 80048ec:	d002      	beq.n	80048f4 <std+0x48>
 80048ee:	33d0      	adds	r3, #208	@ 0xd0
 80048f0:	429c      	cmp	r4, r3
 80048f2:	d105      	bne.n	8004900 <std+0x54>
 80048f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048fc:	f000 ba60 	b.w	8004dc0 <__retarget_lock_init_recursive>
 8004900:	bd10      	pop	{r4, pc}
 8004902:	bf00      	nop
 8004904:	08004b21 	.word	0x08004b21
 8004908:	08004b43 	.word	0x08004b43
 800490c:	08004b7b 	.word	0x08004b7b
 8004910:	08004b9f 	.word	0x08004b9f
 8004914:	20000208 	.word	0x20000208

08004918 <stdio_exit_handler>:
 8004918:	4a02      	ldr	r2, [pc, #8]	@ (8004924 <stdio_exit_handler+0xc>)
 800491a:	4903      	ldr	r1, [pc, #12]	@ (8004928 <stdio_exit_handler+0x10>)
 800491c:	4803      	ldr	r0, [pc, #12]	@ (800492c <stdio_exit_handler+0x14>)
 800491e:	f000 b869 	b.w	80049f4 <_fwalk_sglue>
 8004922:	bf00      	nop
 8004924:	20000040 	.word	0x20000040
 8004928:	08005655 	.word	0x08005655
 800492c:	20000050 	.word	0x20000050

08004930 <cleanup_stdio>:
 8004930:	6841      	ldr	r1, [r0, #4]
 8004932:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <cleanup_stdio+0x34>)
 8004934:	4299      	cmp	r1, r3
 8004936:	b510      	push	{r4, lr}
 8004938:	4604      	mov	r4, r0
 800493a:	d001      	beq.n	8004940 <cleanup_stdio+0x10>
 800493c:	f000 fe8a 	bl	8005654 <_fflush_r>
 8004940:	68a1      	ldr	r1, [r4, #8]
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <cleanup_stdio+0x38>)
 8004944:	4299      	cmp	r1, r3
 8004946:	d002      	beq.n	800494e <cleanup_stdio+0x1e>
 8004948:	4620      	mov	r0, r4
 800494a:	f000 fe83 	bl	8005654 <_fflush_r>
 800494e:	68e1      	ldr	r1, [r4, #12]
 8004950:	4b06      	ldr	r3, [pc, #24]	@ (800496c <cleanup_stdio+0x3c>)
 8004952:	4299      	cmp	r1, r3
 8004954:	d004      	beq.n	8004960 <cleanup_stdio+0x30>
 8004956:	4620      	mov	r0, r4
 8004958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800495c:	f000 be7a 	b.w	8005654 <_fflush_r>
 8004960:	bd10      	pop	{r4, pc}
 8004962:	bf00      	nop
 8004964:	20000208 	.word	0x20000208
 8004968:	20000270 	.word	0x20000270
 800496c:	200002d8 	.word	0x200002d8

08004970 <global_stdio_init.part.0>:
 8004970:	b510      	push	{r4, lr}
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <global_stdio_init.part.0+0x30>)
 8004974:	4c0b      	ldr	r4, [pc, #44]	@ (80049a4 <global_stdio_init.part.0+0x34>)
 8004976:	4a0c      	ldr	r2, [pc, #48]	@ (80049a8 <global_stdio_init.part.0+0x38>)
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	4620      	mov	r0, r4
 800497c:	2200      	movs	r2, #0
 800497e:	2104      	movs	r1, #4
 8004980:	f7ff ff94 	bl	80048ac <std>
 8004984:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004988:	2201      	movs	r2, #1
 800498a:	2109      	movs	r1, #9
 800498c:	f7ff ff8e 	bl	80048ac <std>
 8004990:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004994:	2202      	movs	r2, #2
 8004996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800499a:	2112      	movs	r1, #18
 800499c:	f7ff bf86 	b.w	80048ac <std>
 80049a0:	20000340 	.word	0x20000340
 80049a4:	20000208 	.word	0x20000208
 80049a8:	08004919 	.word	0x08004919

080049ac <__sfp_lock_acquire>:
 80049ac:	4801      	ldr	r0, [pc, #4]	@ (80049b4 <__sfp_lock_acquire+0x8>)
 80049ae:	f000 ba08 	b.w	8004dc2 <__retarget_lock_acquire_recursive>
 80049b2:	bf00      	nop
 80049b4:	20000349 	.word	0x20000349

080049b8 <__sfp_lock_release>:
 80049b8:	4801      	ldr	r0, [pc, #4]	@ (80049c0 <__sfp_lock_release+0x8>)
 80049ba:	f000 ba03 	b.w	8004dc4 <__retarget_lock_release_recursive>
 80049be:	bf00      	nop
 80049c0:	20000349 	.word	0x20000349

080049c4 <__sinit>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4604      	mov	r4, r0
 80049c8:	f7ff fff0 	bl	80049ac <__sfp_lock_acquire>
 80049cc:	6a23      	ldr	r3, [r4, #32]
 80049ce:	b11b      	cbz	r3, 80049d8 <__sinit+0x14>
 80049d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d4:	f7ff bff0 	b.w	80049b8 <__sfp_lock_release>
 80049d8:	4b04      	ldr	r3, [pc, #16]	@ (80049ec <__sinit+0x28>)
 80049da:	6223      	str	r3, [r4, #32]
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <__sinit+0x2c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f5      	bne.n	80049d0 <__sinit+0xc>
 80049e4:	f7ff ffc4 	bl	8004970 <global_stdio_init.part.0>
 80049e8:	e7f2      	b.n	80049d0 <__sinit+0xc>
 80049ea:	bf00      	nop
 80049ec:	08004931 	.word	0x08004931
 80049f0:	20000340 	.word	0x20000340

080049f4 <_fwalk_sglue>:
 80049f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f8:	4607      	mov	r7, r0
 80049fa:	4688      	mov	r8, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	2600      	movs	r6, #0
 8004a00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a04:	f1b9 0901 	subs.w	r9, r9, #1
 8004a08:	d505      	bpl.n	8004a16 <_fwalk_sglue+0x22>
 8004a0a:	6824      	ldr	r4, [r4, #0]
 8004a0c:	2c00      	cmp	r4, #0
 8004a0e:	d1f7      	bne.n	8004a00 <_fwalk_sglue+0xc>
 8004a10:	4630      	mov	r0, r6
 8004a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a16:	89ab      	ldrh	r3, [r5, #12]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d907      	bls.n	8004a2c <_fwalk_sglue+0x38>
 8004a1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a20:	3301      	adds	r3, #1
 8004a22:	d003      	beq.n	8004a2c <_fwalk_sglue+0x38>
 8004a24:	4629      	mov	r1, r5
 8004a26:	4638      	mov	r0, r7
 8004a28:	47c0      	blx	r8
 8004a2a:	4306      	orrs	r6, r0
 8004a2c:	3568      	adds	r5, #104	@ 0x68
 8004a2e:	e7e9      	b.n	8004a04 <_fwalk_sglue+0x10>

08004a30 <iprintf>:
 8004a30:	b40f      	push	{r0, r1, r2, r3}
 8004a32:	b507      	push	{r0, r1, r2, lr}
 8004a34:	4906      	ldr	r1, [pc, #24]	@ (8004a50 <iprintf+0x20>)
 8004a36:	ab04      	add	r3, sp, #16
 8004a38:	6808      	ldr	r0, [r1, #0]
 8004a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a3e:	6881      	ldr	r1, [r0, #8]
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	f000 fae1 	bl	8005008 <_vfiprintf_r>
 8004a46:	b003      	add	sp, #12
 8004a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a4c:	b004      	add	sp, #16
 8004a4e:	4770      	bx	lr
 8004a50:	2000004c 	.word	0x2000004c

08004a54 <putchar>:
 8004a54:	4b02      	ldr	r3, [pc, #8]	@ (8004a60 <putchar+0xc>)
 8004a56:	4601      	mov	r1, r0
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	6882      	ldr	r2, [r0, #8]
 8004a5c:	f000 be84 	b.w	8005768 <_putc_r>
 8004a60:	2000004c 	.word	0x2000004c

08004a64 <_puts_r>:
 8004a64:	6a03      	ldr	r3, [r0, #32]
 8004a66:	b570      	push	{r4, r5, r6, lr}
 8004a68:	6884      	ldr	r4, [r0, #8]
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	460e      	mov	r6, r1
 8004a6e:	b90b      	cbnz	r3, 8004a74 <_puts_r+0x10>
 8004a70:	f7ff ffa8 	bl	80049c4 <__sinit>
 8004a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a76:	07db      	lsls	r3, r3, #31
 8004a78:	d405      	bmi.n	8004a86 <_puts_r+0x22>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	0598      	lsls	r0, r3, #22
 8004a7e:	d402      	bmi.n	8004a86 <_puts_r+0x22>
 8004a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a82:	f000 f99e 	bl	8004dc2 <__retarget_lock_acquire_recursive>
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	0719      	lsls	r1, r3, #28
 8004a8a:	d502      	bpl.n	8004a92 <_puts_r+0x2e>
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d135      	bne.n	8004afe <_puts_r+0x9a>
 8004a92:	4621      	mov	r1, r4
 8004a94:	4628      	mov	r0, r5
 8004a96:	f000 f8c5 	bl	8004c24 <__swsetup_r>
 8004a9a:	b380      	cbz	r0, 8004afe <_puts_r+0x9a>
 8004a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8004aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004aa2:	07da      	lsls	r2, r3, #31
 8004aa4:	d405      	bmi.n	8004ab2 <_puts_r+0x4e>
 8004aa6:	89a3      	ldrh	r3, [r4, #12]
 8004aa8:	059b      	lsls	r3, r3, #22
 8004aaa:	d402      	bmi.n	8004ab2 <_puts_r+0x4e>
 8004aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aae:	f000 f989 	bl	8004dc4 <__retarget_lock_release_recursive>
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	bd70      	pop	{r4, r5, r6, pc}
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da04      	bge.n	8004ac4 <_puts_r+0x60>
 8004aba:	69a2      	ldr	r2, [r4, #24]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	dc17      	bgt.n	8004af0 <_puts_r+0x8c>
 8004ac0:	290a      	cmp	r1, #10
 8004ac2:	d015      	beq.n	8004af0 <_puts_r+0x8c>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	6022      	str	r2, [r4, #0]
 8004aca:	7019      	strb	r1, [r3, #0]
 8004acc:	68a3      	ldr	r3, [r4, #8]
 8004ace:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	60a3      	str	r3, [r4, #8]
 8004ad6:	2900      	cmp	r1, #0
 8004ad8:	d1ed      	bne.n	8004ab6 <_puts_r+0x52>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da11      	bge.n	8004b02 <_puts_r+0x9e>
 8004ade:	4622      	mov	r2, r4
 8004ae0:	210a      	movs	r1, #10
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 f85f 	bl	8004ba6 <__swbuf_r>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d0d7      	beq.n	8004a9c <_puts_r+0x38>
 8004aec:	250a      	movs	r5, #10
 8004aee:	e7d7      	b.n	8004aa0 <_puts_r+0x3c>
 8004af0:	4622      	mov	r2, r4
 8004af2:	4628      	mov	r0, r5
 8004af4:	f000 f857 	bl	8004ba6 <__swbuf_r>
 8004af8:	3001      	adds	r0, #1
 8004afa:	d1e7      	bne.n	8004acc <_puts_r+0x68>
 8004afc:	e7ce      	b.n	8004a9c <_puts_r+0x38>
 8004afe:	3e01      	subs	r6, #1
 8004b00:	e7e4      	b.n	8004acc <_puts_r+0x68>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	6022      	str	r2, [r4, #0]
 8004b08:	220a      	movs	r2, #10
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e7ee      	b.n	8004aec <_puts_r+0x88>
	...

08004b10 <puts>:
 8004b10:	4b02      	ldr	r3, [pc, #8]	@ (8004b1c <puts+0xc>)
 8004b12:	4601      	mov	r1, r0
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	f7ff bfa5 	b.w	8004a64 <_puts_r>
 8004b1a:	bf00      	nop
 8004b1c:	2000004c 	.word	0x2000004c

08004b20 <__sread>:
 8004b20:	b510      	push	{r4, lr}
 8004b22:	460c      	mov	r4, r1
 8004b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b28:	f000 f8fc 	bl	8004d24 <_read_r>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	bfab      	itete	ge
 8004b30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b32:	89a3      	ldrhlt	r3, [r4, #12]
 8004b34:	181b      	addge	r3, r3, r0
 8004b36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b3a:	bfac      	ite	ge
 8004b3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b3e:	81a3      	strhlt	r3, [r4, #12]
 8004b40:	bd10      	pop	{r4, pc}

08004b42 <__swrite>:
 8004b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b46:	461f      	mov	r7, r3
 8004b48:	898b      	ldrh	r3, [r1, #12]
 8004b4a:	05db      	lsls	r3, r3, #23
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	4616      	mov	r6, r2
 8004b52:	d505      	bpl.n	8004b60 <__swrite+0x1e>
 8004b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b58:	2302      	movs	r3, #2
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f000 f8d0 	bl	8004d00 <_lseek_r>
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b6a:	81a3      	strh	r3, [r4, #12]
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	463b      	mov	r3, r7
 8004b70:	4628      	mov	r0, r5
 8004b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b76:	f000 b8e7 	b.w	8004d48 <_write_r>

08004b7a <__sseek>:
 8004b7a:	b510      	push	{r4, lr}
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b82:	f000 f8bd 	bl	8004d00 <_lseek_r>
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	bf15      	itete	ne
 8004b8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b96:	81a3      	strheq	r3, [r4, #12]
 8004b98:	bf18      	it	ne
 8004b9a:	81a3      	strhne	r3, [r4, #12]
 8004b9c:	bd10      	pop	{r4, pc}

08004b9e <__sclose>:
 8004b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba2:	f000 b89d 	b.w	8004ce0 <_close_r>

08004ba6 <__swbuf_r>:
 8004ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba8:	460e      	mov	r6, r1
 8004baa:	4614      	mov	r4, r2
 8004bac:	4605      	mov	r5, r0
 8004bae:	b118      	cbz	r0, 8004bb8 <__swbuf_r+0x12>
 8004bb0:	6a03      	ldr	r3, [r0, #32]
 8004bb2:	b90b      	cbnz	r3, 8004bb8 <__swbuf_r+0x12>
 8004bb4:	f7ff ff06 	bl	80049c4 <__sinit>
 8004bb8:	69a3      	ldr	r3, [r4, #24]
 8004bba:	60a3      	str	r3, [r4, #8]
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	071a      	lsls	r2, r3, #28
 8004bc0:	d501      	bpl.n	8004bc6 <__swbuf_r+0x20>
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	b943      	cbnz	r3, 8004bd8 <__swbuf_r+0x32>
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f000 f82b 	bl	8004c24 <__swsetup_r>
 8004bce:	b118      	cbz	r0, 8004bd8 <__swbuf_r+0x32>
 8004bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	6922      	ldr	r2, [r4, #16]
 8004bdc:	1a98      	subs	r0, r3, r2
 8004bde:	6963      	ldr	r3, [r4, #20]
 8004be0:	b2f6      	uxtb	r6, r6
 8004be2:	4283      	cmp	r3, r0
 8004be4:	4637      	mov	r7, r6
 8004be6:	dc05      	bgt.n	8004bf4 <__swbuf_r+0x4e>
 8004be8:	4621      	mov	r1, r4
 8004bea:	4628      	mov	r0, r5
 8004bec:	f000 fd32 	bl	8005654 <_fflush_r>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d1ed      	bne.n	8004bd0 <__swbuf_r+0x2a>
 8004bf4:	68a3      	ldr	r3, [r4, #8]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60a3      	str	r3, [r4, #8]
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	6022      	str	r2, [r4, #0]
 8004c00:	701e      	strb	r6, [r3, #0]
 8004c02:	6962      	ldr	r2, [r4, #20]
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d004      	beq.n	8004c14 <__swbuf_r+0x6e>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	07db      	lsls	r3, r3, #31
 8004c0e:	d5e1      	bpl.n	8004bd4 <__swbuf_r+0x2e>
 8004c10:	2e0a      	cmp	r6, #10
 8004c12:	d1df      	bne.n	8004bd4 <__swbuf_r+0x2e>
 8004c14:	4621      	mov	r1, r4
 8004c16:	4628      	mov	r0, r5
 8004c18:	f000 fd1c 	bl	8005654 <_fflush_r>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d0d9      	beq.n	8004bd4 <__swbuf_r+0x2e>
 8004c20:	e7d6      	b.n	8004bd0 <__swbuf_r+0x2a>
	...

08004c24 <__swsetup_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4b29      	ldr	r3, [pc, #164]	@ (8004ccc <__swsetup_r+0xa8>)
 8004c28:	4605      	mov	r5, r0
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	b118      	cbz	r0, 8004c38 <__swsetup_r+0x14>
 8004c30:	6a03      	ldr	r3, [r0, #32]
 8004c32:	b90b      	cbnz	r3, 8004c38 <__swsetup_r+0x14>
 8004c34:	f7ff fec6 	bl	80049c4 <__sinit>
 8004c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c3c:	0719      	lsls	r1, r3, #28
 8004c3e:	d422      	bmi.n	8004c86 <__swsetup_r+0x62>
 8004c40:	06da      	lsls	r2, r3, #27
 8004c42:	d407      	bmi.n	8004c54 <__swsetup_r+0x30>
 8004c44:	2209      	movs	r2, #9
 8004c46:	602a      	str	r2, [r5, #0]
 8004c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c52:	e033      	b.n	8004cbc <__swsetup_r+0x98>
 8004c54:	0758      	lsls	r0, r3, #29
 8004c56:	d512      	bpl.n	8004c7e <__swsetup_r+0x5a>
 8004c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c5a:	b141      	cbz	r1, 8004c6e <__swsetup_r+0x4a>
 8004c5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c60:	4299      	cmp	r1, r3
 8004c62:	d002      	beq.n	8004c6a <__swsetup_r+0x46>
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f8af 	bl	8004dc8 <_free_r>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	2300      	movs	r3, #0
 8004c78:	6063      	str	r3, [r4, #4]
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f043 0308 	orr.w	r3, r3, #8
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	6923      	ldr	r3, [r4, #16]
 8004c88:	b94b      	cbnz	r3, 8004c9e <__swsetup_r+0x7a>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c94:	d003      	beq.n	8004c9e <__swsetup_r+0x7a>
 8004c96:	4621      	mov	r1, r4
 8004c98:	4628      	mov	r0, r5
 8004c9a:	f000 fd29 	bl	80056f0 <__smakebuf_r>
 8004c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca2:	f013 0201 	ands.w	r2, r3, #1
 8004ca6:	d00a      	beq.n	8004cbe <__swsetup_r+0x9a>
 8004ca8:	2200      	movs	r2, #0
 8004caa:	60a2      	str	r2, [r4, #8]
 8004cac:	6962      	ldr	r2, [r4, #20]
 8004cae:	4252      	negs	r2, r2
 8004cb0:	61a2      	str	r2, [r4, #24]
 8004cb2:	6922      	ldr	r2, [r4, #16]
 8004cb4:	b942      	cbnz	r2, 8004cc8 <__swsetup_r+0xa4>
 8004cb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cba:	d1c5      	bne.n	8004c48 <__swsetup_r+0x24>
 8004cbc:	bd38      	pop	{r3, r4, r5, pc}
 8004cbe:	0799      	lsls	r1, r3, #30
 8004cc0:	bf58      	it	pl
 8004cc2:	6962      	ldrpl	r2, [r4, #20]
 8004cc4:	60a2      	str	r2, [r4, #8]
 8004cc6:	e7f4      	b.n	8004cb2 <__swsetup_r+0x8e>
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e7f7      	b.n	8004cbc <__swsetup_r+0x98>
 8004ccc:	2000004c 	.word	0x2000004c

08004cd0 <memset>:
 8004cd0:	4402      	add	r2, r0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d100      	bne.n	8004cda <memset+0xa>
 8004cd8:	4770      	bx	lr
 8004cda:	f803 1b01 	strb.w	r1, [r3], #1
 8004cde:	e7f9      	b.n	8004cd4 <memset+0x4>

08004ce0 <_close_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d06      	ldr	r5, [pc, #24]	@ (8004cfc <_close_r+0x1c>)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4608      	mov	r0, r1
 8004cea:	602b      	str	r3, [r5, #0]
 8004cec:	f7fc fa86 	bl	80011fc <_close>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d102      	bne.n	8004cfa <_close_r+0x1a>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	b103      	cbz	r3, 8004cfa <_close_r+0x1a>
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	20000344 	.word	0x20000344

08004d00 <_lseek_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4d07      	ldr	r5, [pc, #28]	@ (8004d20 <_lseek_r+0x20>)
 8004d04:	4604      	mov	r4, r0
 8004d06:	4608      	mov	r0, r1
 8004d08:	4611      	mov	r1, r2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	602a      	str	r2, [r5, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7fc fa98 	bl	8001244 <_lseek>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_lseek_r+0x1e>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_lseek_r+0x1e>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	20000344 	.word	0x20000344

08004d24 <_read_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d07      	ldr	r5, [pc, #28]	@ (8004d44 <_read_r+0x20>)
 8004d28:	4604      	mov	r4, r0
 8004d2a:	4608      	mov	r0, r1
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	602a      	str	r2, [r5, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f7fc fa45 	bl	80011c2 <_read>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_read_r+0x1e>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_read_r+0x1e>
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	20000344 	.word	0x20000344

08004d48 <_write_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4d07      	ldr	r5, [pc, #28]	@ (8004d68 <_write_r+0x20>)
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	4608      	mov	r0, r1
 8004d50:	4611      	mov	r1, r2
 8004d52:	2200      	movs	r2, #0
 8004d54:	602a      	str	r2, [r5, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f7fc f960 	bl	800101c <_write>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_write_r+0x1e>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_write_r+0x1e>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20000344 	.word	0x20000344

08004d6c <__errno>:
 8004d6c:	4b01      	ldr	r3, [pc, #4]	@ (8004d74 <__errno+0x8>)
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000004c 	.word	0x2000004c

08004d78 <__libc_init_array>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8004db0 <__libc_init_array+0x38>)
 8004d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8004db4 <__libc_init_array+0x3c>)
 8004d7e:	1b64      	subs	r4, r4, r5
 8004d80:	10a4      	asrs	r4, r4, #2
 8004d82:	2600      	movs	r6, #0
 8004d84:	42a6      	cmp	r6, r4
 8004d86:	d109      	bne.n	8004d9c <__libc_init_array+0x24>
 8004d88:	4d0b      	ldr	r5, [pc, #44]	@ (8004db8 <__libc_init_array+0x40>)
 8004d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8004dbc <__libc_init_array+0x44>)
 8004d8c:	f000 fd52 	bl	8005834 <_init>
 8004d90:	1b64      	subs	r4, r4, r5
 8004d92:	10a4      	asrs	r4, r4, #2
 8004d94:	2600      	movs	r6, #0
 8004d96:	42a6      	cmp	r6, r4
 8004d98:	d105      	bne.n	8004da6 <__libc_init_array+0x2e>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da0:	4798      	blx	r3
 8004da2:	3601      	adds	r6, #1
 8004da4:	e7ee      	b.n	8004d84 <__libc_init_array+0xc>
 8004da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004daa:	4798      	blx	r3
 8004dac:	3601      	adds	r6, #1
 8004dae:	e7f2      	b.n	8004d96 <__libc_init_array+0x1e>
 8004db0:	08005c08 	.word	0x08005c08
 8004db4:	08005c08 	.word	0x08005c08
 8004db8:	08005c08 	.word	0x08005c08
 8004dbc:	08005c0c 	.word	0x08005c0c

08004dc0 <__retarget_lock_init_recursive>:
 8004dc0:	4770      	bx	lr

08004dc2 <__retarget_lock_acquire_recursive>:
 8004dc2:	4770      	bx	lr

08004dc4 <__retarget_lock_release_recursive>:
 8004dc4:	4770      	bx	lr
	...

08004dc8 <_free_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4605      	mov	r5, r0
 8004dcc:	2900      	cmp	r1, #0
 8004dce:	d041      	beq.n	8004e54 <_free_r+0x8c>
 8004dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd4:	1f0c      	subs	r4, r1, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bfb8      	it	lt
 8004dda:	18e4      	addlt	r4, r4, r3
 8004ddc:	f000 f8e0 	bl	8004fa0 <__malloc_lock>
 8004de0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <_free_r+0x90>)
 8004de2:	6813      	ldr	r3, [r2, #0]
 8004de4:	b933      	cbnz	r3, 8004df4 <_free_r+0x2c>
 8004de6:	6063      	str	r3, [r4, #4]
 8004de8:	6014      	str	r4, [r2, #0]
 8004dea:	4628      	mov	r0, r5
 8004dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004df0:	f000 b8dc 	b.w	8004fac <__malloc_unlock>
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	d908      	bls.n	8004e0a <_free_r+0x42>
 8004df8:	6820      	ldr	r0, [r4, #0]
 8004dfa:	1821      	adds	r1, r4, r0
 8004dfc:	428b      	cmp	r3, r1
 8004dfe:	bf01      	itttt	eq
 8004e00:	6819      	ldreq	r1, [r3, #0]
 8004e02:	685b      	ldreq	r3, [r3, #4]
 8004e04:	1809      	addeq	r1, r1, r0
 8004e06:	6021      	streq	r1, [r4, #0]
 8004e08:	e7ed      	b.n	8004de6 <_free_r+0x1e>
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b10b      	cbz	r3, 8004e14 <_free_r+0x4c>
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	d9fa      	bls.n	8004e0a <_free_r+0x42>
 8004e14:	6811      	ldr	r1, [r2, #0]
 8004e16:	1850      	adds	r0, r2, r1
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d10b      	bne.n	8004e34 <_free_r+0x6c>
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	4401      	add	r1, r0
 8004e20:	1850      	adds	r0, r2, r1
 8004e22:	4283      	cmp	r3, r0
 8004e24:	6011      	str	r1, [r2, #0]
 8004e26:	d1e0      	bne.n	8004dea <_free_r+0x22>
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	6053      	str	r3, [r2, #4]
 8004e2e:	4408      	add	r0, r1
 8004e30:	6010      	str	r0, [r2, #0]
 8004e32:	e7da      	b.n	8004dea <_free_r+0x22>
 8004e34:	d902      	bls.n	8004e3c <_free_r+0x74>
 8004e36:	230c      	movs	r3, #12
 8004e38:	602b      	str	r3, [r5, #0]
 8004e3a:	e7d6      	b.n	8004dea <_free_r+0x22>
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	1821      	adds	r1, r4, r0
 8004e40:	428b      	cmp	r3, r1
 8004e42:	bf04      	itt	eq
 8004e44:	6819      	ldreq	r1, [r3, #0]
 8004e46:	685b      	ldreq	r3, [r3, #4]
 8004e48:	6063      	str	r3, [r4, #4]
 8004e4a:	bf04      	itt	eq
 8004e4c:	1809      	addeq	r1, r1, r0
 8004e4e:	6021      	streq	r1, [r4, #0]
 8004e50:	6054      	str	r4, [r2, #4]
 8004e52:	e7ca      	b.n	8004dea <_free_r+0x22>
 8004e54:	bd38      	pop	{r3, r4, r5, pc}
 8004e56:	bf00      	nop
 8004e58:	20000350 	.word	0x20000350

08004e5c <sbrk_aligned>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	4e0f      	ldr	r6, [pc, #60]	@ (8004e9c <sbrk_aligned+0x40>)
 8004e60:	460c      	mov	r4, r1
 8004e62:	6831      	ldr	r1, [r6, #0]
 8004e64:	4605      	mov	r5, r0
 8004e66:	b911      	cbnz	r1, 8004e6e <sbrk_aligned+0x12>
 8004e68:	f000 fcd4 	bl	8005814 <_sbrk_r>
 8004e6c:	6030      	str	r0, [r6, #0]
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4628      	mov	r0, r5
 8004e72:	f000 fccf 	bl	8005814 <_sbrk_r>
 8004e76:	1c43      	adds	r3, r0, #1
 8004e78:	d103      	bne.n	8004e82 <sbrk_aligned+0x26>
 8004e7a:	f04f 34ff 	mov.w	r4, #4294967295
 8004e7e:	4620      	mov	r0, r4
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
 8004e82:	1cc4      	adds	r4, r0, #3
 8004e84:	f024 0403 	bic.w	r4, r4, #3
 8004e88:	42a0      	cmp	r0, r4
 8004e8a:	d0f8      	beq.n	8004e7e <sbrk_aligned+0x22>
 8004e8c:	1a21      	subs	r1, r4, r0
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fcc0 	bl	8005814 <_sbrk_r>
 8004e94:	3001      	adds	r0, #1
 8004e96:	d1f2      	bne.n	8004e7e <sbrk_aligned+0x22>
 8004e98:	e7ef      	b.n	8004e7a <sbrk_aligned+0x1e>
 8004e9a:	bf00      	nop
 8004e9c:	2000034c 	.word	0x2000034c

08004ea0 <_malloc_r>:
 8004ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea4:	1ccd      	adds	r5, r1, #3
 8004ea6:	f025 0503 	bic.w	r5, r5, #3
 8004eaa:	3508      	adds	r5, #8
 8004eac:	2d0c      	cmp	r5, #12
 8004eae:	bf38      	it	cc
 8004eb0:	250c      	movcc	r5, #12
 8004eb2:	2d00      	cmp	r5, #0
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	db01      	blt.n	8004ebc <_malloc_r+0x1c>
 8004eb8:	42a9      	cmp	r1, r5
 8004eba:	d904      	bls.n	8004ec6 <_malloc_r+0x26>
 8004ebc:	230c      	movs	r3, #12
 8004ebe:	6033      	str	r3, [r6, #0]
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ec6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f9c <_malloc_r+0xfc>
 8004eca:	f000 f869 	bl	8004fa0 <__malloc_lock>
 8004ece:	f8d8 3000 	ldr.w	r3, [r8]
 8004ed2:	461c      	mov	r4, r3
 8004ed4:	bb44      	cbnz	r4, 8004f28 <_malloc_r+0x88>
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f7ff ffbf 	bl	8004e5c <sbrk_aligned>
 8004ede:	1c43      	adds	r3, r0, #1
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	d158      	bne.n	8004f96 <_malloc_r+0xf6>
 8004ee4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ee8:	4627      	mov	r7, r4
 8004eea:	2f00      	cmp	r7, #0
 8004eec:	d143      	bne.n	8004f76 <_malloc_r+0xd6>
 8004eee:	2c00      	cmp	r4, #0
 8004ef0:	d04b      	beq.n	8004f8a <_malloc_r+0xea>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	eb04 0903 	add.w	r9, r4, r3
 8004efc:	f000 fc8a 	bl	8005814 <_sbrk_r>
 8004f00:	4581      	cmp	r9, r0
 8004f02:	d142      	bne.n	8004f8a <_malloc_r+0xea>
 8004f04:	6821      	ldr	r1, [r4, #0]
 8004f06:	1a6d      	subs	r5, r5, r1
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f7ff ffa6 	bl	8004e5c <sbrk_aligned>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d03a      	beq.n	8004f8a <_malloc_r+0xea>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	442b      	add	r3, r5
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	bb62      	cbnz	r2, 8004f7c <_malloc_r+0xdc>
 8004f22:	f8c8 7000 	str.w	r7, [r8]
 8004f26:	e00f      	b.n	8004f48 <_malloc_r+0xa8>
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	1b52      	subs	r2, r2, r5
 8004f2c:	d420      	bmi.n	8004f70 <_malloc_r+0xd0>
 8004f2e:	2a0b      	cmp	r2, #11
 8004f30:	d917      	bls.n	8004f62 <_malloc_r+0xc2>
 8004f32:	1961      	adds	r1, r4, r5
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	6025      	str	r5, [r4, #0]
 8004f38:	bf18      	it	ne
 8004f3a:	6059      	strne	r1, [r3, #4]
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	bf08      	it	eq
 8004f40:	f8c8 1000 	streq.w	r1, [r8]
 8004f44:	5162      	str	r2, [r4, r5]
 8004f46:	604b      	str	r3, [r1, #4]
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f000 f82f 	bl	8004fac <__malloc_unlock>
 8004f4e:	f104 000b 	add.w	r0, r4, #11
 8004f52:	1d23      	adds	r3, r4, #4
 8004f54:	f020 0007 	bic.w	r0, r0, #7
 8004f58:	1ac2      	subs	r2, r0, r3
 8004f5a:	bf1c      	itt	ne
 8004f5c:	1a1b      	subne	r3, r3, r0
 8004f5e:	50a3      	strne	r3, [r4, r2]
 8004f60:	e7af      	b.n	8004ec2 <_malloc_r+0x22>
 8004f62:	6862      	ldr	r2, [r4, #4]
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	bf0c      	ite	eq
 8004f68:	f8c8 2000 	streq.w	r2, [r8]
 8004f6c:	605a      	strne	r2, [r3, #4]
 8004f6e:	e7eb      	b.n	8004f48 <_malloc_r+0xa8>
 8004f70:	4623      	mov	r3, r4
 8004f72:	6864      	ldr	r4, [r4, #4]
 8004f74:	e7ae      	b.n	8004ed4 <_malloc_r+0x34>
 8004f76:	463c      	mov	r4, r7
 8004f78:	687f      	ldr	r7, [r7, #4]
 8004f7a:	e7b6      	b.n	8004eea <_malloc_r+0x4a>
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	42a3      	cmp	r3, r4
 8004f82:	d1fb      	bne.n	8004f7c <_malloc_r+0xdc>
 8004f84:	2300      	movs	r3, #0
 8004f86:	6053      	str	r3, [r2, #4]
 8004f88:	e7de      	b.n	8004f48 <_malloc_r+0xa8>
 8004f8a:	230c      	movs	r3, #12
 8004f8c:	6033      	str	r3, [r6, #0]
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f000 f80c 	bl	8004fac <__malloc_unlock>
 8004f94:	e794      	b.n	8004ec0 <_malloc_r+0x20>
 8004f96:	6005      	str	r5, [r0, #0]
 8004f98:	e7d6      	b.n	8004f48 <_malloc_r+0xa8>
 8004f9a:	bf00      	nop
 8004f9c:	20000350 	.word	0x20000350

08004fa0 <__malloc_lock>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	@ (8004fa8 <__malloc_lock+0x8>)
 8004fa2:	f7ff bf0e 	b.w	8004dc2 <__retarget_lock_acquire_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	20000348 	.word	0x20000348

08004fac <__malloc_unlock>:
 8004fac:	4801      	ldr	r0, [pc, #4]	@ (8004fb4 <__malloc_unlock+0x8>)
 8004fae:	f7ff bf09 	b.w	8004dc4 <__retarget_lock_release_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	20000348 	.word	0x20000348

08004fb8 <__sfputc_r>:
 8004fb8:	6893      	ldr	r3, [r2, #8]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	b410      	push	{r4}
 8004fc0:	6093      	str	r3, [r2, #8]
 8004fc2:	da07      	bge.n	8004fd4 <__sfputc_r+0x1c>
 8004fc4:	6994      	ldr	r4, [r2, #24]
 8004fc6:	42a3      	cmp	r3, r4
 8004fc8:	db01      	blt.n	8004fce <__sfputc_r+0x16>
 8004fca:	290a      	cmp	r1, #10
 8004fcc:	d102      	bne.n	8004fd4 <__sfputc_r+0x1c>
 8004fce:	bc10      	pop	{r4}
 8004fd0:	f7ff bde9 	b.w	8004ba6 <__swbuf_r>
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	1c58      	adds	r0, r3, #1
 8004fd8:	6010      	str	r0, [r2, #0]
 8004fda:	7019      	strb	r1, [r3, #0]
 8004fdc:	4608      	mov	r0, r1
 8004fde:	bc10      	pop	{r4}
 8004fe0:	4770      	bx	lr

08004fe2 <__sfputs_r>:
 8004fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	460f      	mov	r7, r1
 8004fe8:	4614      	mov	r4, r2
 8004fea:	18d5      	adds	r5, r2, r3
 8004fec:	42ac      	cmp	r4, r5
 8004fee:	d101      	bne.n	8004ff4 <__sfputs_r+0x12>
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e007      	b.n	8005004 <__sfputs_r+0x22>
 8004ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff8:	463a      	mov	r2, r7
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f7ff ffdc 	bl	8004fb8 <__sfputc_r>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d1f3      	bne.n	8004fec <__sfputs_r+0xa>
 8005004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005008 <_vfiprintf_r>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	460d      	mov	r5, r1
 800500e:	b09d      	sub	sp, #116	@ 0x74
 8005010:	4614      	mov	r4, r2
 8005012:	4698      	mov	r8, r3
 8005014:	4606      	mov	r6, r0
 8005016:	b118      	cbz	r0, 8005020 <_vfiprintf_r+0x18>
 8005018:	6a03      	ldr	r3, [r0, #32]
 800501a:	b90b      	cbnz	r3, 8005020 <_vfiprintf_r+0x18>
 800501c:	f7ff fcd2 	bl	80049c4 <__sinit>
 8005020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005022:	07d9      	lsls	r1, r3, #31
 8005024:	d405      	bmi.n	8005032 <_vfiprintf_r+0x2a>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	059a      	lsls	r2, r3, #22
 800502a:	d402      	bmi.n	8005032 <_vfiprintf_r+0x2a>
 800502c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800502e:	f7ff fec8 	bl	8004dc2 <__retarget_lock_acquire_recursive>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	d501      	bpl.n	800503c <_vfiprintf_r+0x34>
 8005038:	692b      	ldr	r3, [r5, #16]
 800503a:	b99b      	cbnz	r3, 8005064 <_vfiprintf_r+0x5c>
 800503c:	4629      	mov	r1, r5
 800503e:	4630      	mov	r0, r6
 8005040:	f7ff fdf0 	bl	8004c24 <__swsetup_r>
 8005044:	b170      	cbz	r0, 8005064 <_vfiprintf_r+0x5c>
 8005046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005048:	07dc      	lsls	r4, r3, #31
 800504a:	d504      	bpl.n	8005056 <_vfiprintf_r+0x4e>
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	b01d      	add	sp, #116	@ 0x74
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005056:	89ab      	ldrh	r3, [r5, #12]
 8005058:	0598      	lsls	r0, r3, #22
 800505a:	d4f7      	bmi.n	800504c <_vfiprintf_r+0x44>
 800505c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800505e:	f7ff feb1 	bl	8004dc4 <__retarget_lock_release_recursive>
 8005062:	e7f3      	b.n	800504c <_vfiprintf_r+0x44>
 8005064:	2300      	movs	r3, #0
 8005066:	9309      	str	r3, [sp, #36]	@ 0x24
 8005068:	2320      	movs	r3, #32
 800506a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800506e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005072:	2330      	movs	r3, #48	@ 0x30
 8005074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005224 <_vfiprintf_r+0x21c>
 8005078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800507c:	f04f 0901 	mov.w	r9, #1
 8005080:	4623      	mov	r3, r4
 8005082:	469a      	mov	sl, r3
 8005084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005088:	b10a      	cbz	r2, 800508e <_vfiprintf_r+0x86>
 800508a:	2a25      	cmp	r2, #37	@ 0x25
 800508c:	d1f9      	bne.n	8005082 <_vfiprintf_r+0x7a>
 800508e:	ebba 0b04 	subs.w	fp, sl, r4
 8005092:	d00b      	beq.n	80050ac <_vfiprintf_r+0xa4>
 8005094:	465b      	mov	r3, fp
 8005096:	4622      	mov	r2, r4
 8005098:	4629      	mov	r1, r5
 800509a:	4630      	mov	r0, r6
 800509c:	f7ff ffa1 	bl	8004fe2 <__sfputs_r>
 80050a0:	3001      	adds	r0, #1
 80050a2:	f000 80a7 	beq.w	80051f4 <_vfiprintf_r+0x1ec>
 80050a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050a8:	445a      	add	r2, fp
 80050aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80050ac:	f89a 3000 	ldrb.w	r3, [sl]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 809f 	beq.w	80051f4 <_vfiprintf_r+0x1ec>
 80050b6:	2300      	movs	r3, #0
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c0:	f10a 0a01 	add.w	sl, sl, #1
 80050c4:	9304      	str	r3, [sp, #16]
 80050c6:	9307      	str	r3, [sp, #28]
 80050c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80050ce:	4654      	mov	r4, sl
 80050d0:	2205      	movs	r2, #5
 80050d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d6:	4853      	ldr	r0, [pc, #332]	@ (8005224 <_vfiprintf_r+0x21c>)
 80050d8:	f7fb f852 	bl	8000180 <memchr>
 80050dc:	9a04      	ldr	r2, [sp, #16]
 80050de:	b9d8      	cbnz	r0, 8005118 <_vfiprintf_r+0x110>
 80050e0:	06d1      	lsls	r1, r2, #27
 80050e2:	bf44      	itt	mi
 80050e4:	2320      	movmi	r3, #32
 80050e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050ea:	0713      	lsls	r3, r2, #28
 80050ec:	bf44      	itt	mi
 80050ee:	232b      	movmi	r3, #43	@ 0x2b
 80050f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050f4:	f89a 3000 	ldrb.w	r3, [sl]
 80050f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80050fa:	d015      	beq.n	8005128 <_vfiprintf_r+0x120>
 80050fc:	9a07      	ldr	r2, [sp, #28]
 80050fe:	4654      	mov	r4, sl
 8005100:	2000      	movs	r0, #0
 8005102:	f04f 0c0a 	mov.w	ip, #10
 8005106:	4621      	mov	r1, r4
 8005108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800510c:	3b30      	subs	r3, #48	@ 0x30
 800510e:	2b09      	cmp	r3, #9
 8005110:	d94b      	bls.n	80051aa <_vfiprintf_r+0x1a2>
 8005112:	b1b0      	cbz	r0, 8005142 <_vfiprintf_r+0x13a>
 8005114:	9207      	str	r2, [sp, #28]
 8005116:	e014      	b.n	8005142 <_vfiprintf_r+0x13a>
 8005118:	eba0 0308 	sub.w	r3, r0, r8
 800511c:	fa09 f303 	lsl.w	r3, r9, r3
 8005120:	4313      	orrs	r3, r2
 8005122:	9304      	str	r3, [sp, #16]
 8005124:	46a2      	mov	sl, r4
 8005126:	e7d2      	b.n	80050ce <_vfiprintf_r+0xc6>
 8005128:	9b03      	ldr	r3, [sp, #12]
 800512a:	1d19      	adds	r1, r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	9103      	str	r1, [sp, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfbb      	ittet	lt
 8005134:	425b      	neglt	r3, r3
 8005136:	f042 0202 	orrlt.w	r2, r2, #2
 800513a:	9307      	strge	r3, [sp, #28]
 800513c:	9307      	strlt	r3, [sp, #28]
 800513e:	bfb8      	it	lt
 8005140:	9204      	strlt	r2, [sp, #16]
 8005142:	7823      	ldrb	r3, [r4, #0]
 8005144:	2b2e      	cmp	r3, #46	@ 0x2e
 8005146:	d10a      	bne.n	800515e <_vfiprintf_r+0x156>
 8005148:	7863      	ldrb	r3, [r4, #1]
 800514a:	2b2a      	cmp	r3, #42	@ 0x2a
 800514c:	d132      	bne.n	80051b4 <_vfiprintf_r+0x1ac>
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	1d1a      	adds	r2, r3, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	9203      	str	r2, [sp, #12]
 8005156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800515a:	3402      	adds	r4, #2
 800515c:	9305      	str	r3, [sp, #20]
 800515e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005228 <_vfiprintf_r+0x220>
 8005162:	7821      	ldrb	r1, [r4, #0]
 8005164:	2203      	movs	r2, #3
 8005166:	4650      	mov	r0, sl
 8005168:	f7fb f80a 	bl	8000180 <memchr>
 800516c:	b138      	cbz	r0, 800517e <_vfiprintf_r+0x176>
 800516e:	9b04      	ldr	r3, [sp, #16]
 8005170:	eba0 000a 	sub.w	r0, r0, sl
 8005174:	2240      	movs	r2, #64	@ 0x40
 8005176:	4082      	lsls	r2, r0
 8005178:	4313      	orrs	r3, r2
 800517a:	3401      	adds	r4, #1
 800517c:	9304      	str	r3, [sp, #16]
 800517e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005182:	482a      	ldr	r0, [pc, #168]	@ (800522c <_vfiprintf_r+0x224>)
 8005184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005188:	2206      	movs	r2, #6
 800518a:	f7fa fff9 	bl	8000180 <memchr>
 800518e:	2800      	cmp	r0, #0
 8005190:	d03f      	beq.n	8005212 <_vfiprintf_r+0x20a>
 8005192:	4b27      	ldr	r3, [pc, #156]	@ (8005230 <_vfiprintf_r+0x228>)
 8005194:	bb1b      	cbnz	r3, 80051de <_vfiprintf_r+0x1d6>
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	3307      	adds	r3, #7
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	3308      	adds	r3, #8
 80051a0:	9303      	str	r3, [sp, #12]
 80051a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a4:	443b      	add	r3, r7
 80051a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80051a8:	e76a      	b.n	8005080 <_vfiprintf_r+0x78>
 80051aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ae:	460c      	mov	r4, r1
 80051b0:	2001      	movs	r0, #1
 80051b2:	e7a8      	b.n	8005106 <_vfiprintf_r+0xfe>
 80051b4:	2300      	movs	r3, #0
 80051b6:	3401      	adds	r4, #1
 80051b8:	9305      	str	r3, [sp, #20]
 80051ba:	4619      	mov	r1, r3
 80051bc:	f04f 0c0a 	mov.w	ip, #10
 80051c0:	4620      	mov	r0, r4
 80051c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c6:	3a30      	subs	r2, #48	@ 0x30
 80051c8:	2a09      	cmp	r2, #9
 80051ca:	d903      	bls.n	80051d4 <_vfiprintf_r+0x1cc>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0c6      	beq.n	800515e <_vfiprintf_r+0x156>
 80051d0:	9105      	str	r1, [sp, #20]
 80051d2:	e7c4      	b.n	800515e <_vfiprintf_r+0x156>
 80051d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d8:	4604      	mov	r4, r0
 80051da:	2301      	movs	r3, #1
 80051dc:	e7f0      	b.n	80051c0 <_vfiprintf_r+0x1b8>
 80051de:	ab03      	add	r3, sp, #12
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	462a      	mov	r2, r5
 80051e4:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <_vfiprintf_r+0x22c>)
 80051e6:	a904      	add	r1, sp, #16
 80051e8:	4630      	mov	r0, r6
 80051ea:	f3af 8000 	nop.w
 80051ee:	4607      	mov	r7, r0
 80051f0:	1c78      	adds	r0, r7, #1
 80051f2:	d1d6      	bne.n	80051a2 <_vfiprintf_r+0x19a>
 80051f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051f6:	07d9      	lsls	r1, r3, #31
 80051f8:	d405      	bmi.n	8005206 <_vfiprintf_r+0x1fe>
 80051fa:	89ab      	ldrh	r3, [r5, #12]
 80051fc:	059a      	lsls	r2, r3, #22
 80051fe:	d402      	bmi.n	8005206 <_vfiprintf_r+0x1fe>
 8005200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005202:	f7ff fddf 	bl	8004dc4 <__retarget_lock_release_recursive>
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	065b      	lsls	r3, r3, #25
 800520a:	f53f af1f 	bmi.w	800504c <_vfiprintf_r+0x44>
 800520e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005210:	e71e      	b.n	8005050 <_vfiprintf_r+0x48>
 8005212:	ab03      	add	r3, sp, #12
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	462a      	mov	r2, r5
 8005218:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <_vfiprintf_r+0x22c>)
 800521a:	a904      	add	r1, sp, #16
 800521c:	4630      	mov	r0, r6
 800521e:	f000 f879 	bl	8005314 <_printf_i>
 8005222:	e7e4      	b.n	80051ee <_vfiprintf_r+0x1e6>
 8005224:	08005bcc 	.word	0x08005bcc
 8005228:	08005bd2 	.word	0x08005bd2
 800522c:	08005bd6 	.word	0x08005bd6
 8005230:	00000000 	.word	0x00000000
 8005234:	08004fe3 	.word	0x08004fe3

08005238 <_printf_common>:
 8005238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800523c:	4616      	mov	r6, r2
 800523e:	4698      	mov	r8, r3
 8005240:	688a      	ldr	r2, [r1, #8]
 8005242:	690b      	ldr	r3, [r1, #16]
 8005244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005248:	4293      	cmp	r3, r2
 800524a:	bfb8      	it	lt
 800524c:	4613      	movlt	r3, r2
 800524e:	6033      	str	r3, [r6, #0]
 8005250:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005254:	4607      	mov	r7, r0
 8005256:	460c      	mov	r4, r1
 8005258:	b10a      	cbz	r2, 800525e <_printf_common+0x26>
 800525a:	3301      	adds	r3, #1
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	0699      	lsls	r1, r3, #26
 8005262:	bf42      	ittt	mi
 8005264:	6833      	ldrmi	r3, [r6, #0]
 8005266:	3302      	addmi	r3, #2
 8005268:	6033      	strmi	r3, [r6, #0]
 800526a:	6825      	ldr	r5, [r4, #0]
 800526c:	f015 0506 	ands.w	r5, r5, #6
 8005270:	d106      	bne.n	8005280 <_printf_common+0x48>
 8005272:	f104 0a19 	add.w	sl, r4, #25
 8005276:	68e3      	ldr	r3, [r4, #12]
 8005278:	6832      	ldr	r2, [r6, #0]
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	42ab      	cmp	r3, r5
 800527e:	dc26      	bgt.n	80052ce <_printf_common+0x96>
 8005280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	3b00      	subs	r3, #0
 8005288:	bf18      	it	ne
 800528a:	2301      	movne	r3, #1
 800528c:	0692      	lsls	r2, r2, #26
 800528e:	d42b      	bmi.n	80052e8 <_printf_common+0xb0>
 8005290:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005294:	4641      	mov	r1, r8
 8005296:	4638      	mov	r0, r7
 8005298:	47c8      	blx	r9
 800529a:	3001      	adds	r0, #1
 800529c:	d01e      	beq.n	80052dc <_printf_common+0xa4>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	6922      	ldr	r2, [r4, #16]
 80052a2:	f003 0306 	and.w	r3, r3, #6
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	bf02      	ittt	eq
 80052aa:	68e5      	ldreq	r5, [r4, #12]
 80052ac:	6833      	ldreq	r3, [r6, #0]
 80052ae:	1aed      	subeq	r5, r5, r3
 80052b0:	68a3      	ldr	r3, [r4, #8]
 80052b2:	bf0c      	ite	eq
 80052b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b8:	2500      	movne	r5, #0
 80052ba:	4293      	cmp	r3, r2
 80052bc:	bfc4      	itt	gt
 80052be:	1a9b      	subgt	r3, r3, r2
 80052c0:	18ed      	addgt	r5, r5, r3
 80052c2:	2600      	movs	r6, #0
 80052c4:	341a      	adds	r4, #26
 80052c6:	42b5      	cmp	r5, r6
 80052c8:	d11a      	bne.n	8005300 <_printf_common+0xc8>
 80052ca:	2000      	movs	r0, #0
 80052cc:	e008      	b.n	80052e0 <_printf_common+0xa8>
 80052ce:	2301      	movs	r3, #1
 80052d0:	4652      	mov	r2, sl
 80052d2:	4641      	mov	r1, r8
 80052d4:	4638      	mov	r0, r7
 80052d6:	47c8      	blx	r9
 80052d8:	3001      	adds	r0, #1
 80052da:	d103      	bne.n	80052e4 <_printf_common+0xac>
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e4:	3501      	adds	r5, #1
 80052e6:	e7c6      	b.n	8005276 <_printf_common+0x3e>
 80052e8:	18e1      	adds	r1, r4, r3
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	2030      	movs	r0, #48	@ 0x30
 80052ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052f2:	4422      	add	r2, r4
 80052f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052fc:	3302      	adds	r3, #2
 80052fe:	e7c7      	b.n	8005290 <_printf_common+0x58>
 8005300:	2301      	movs	r3, #1
 8005302:	4622      	mov	r2, r4
 8005304:	4641      	mov	r1, r8
 8005306:	4638      	mov	r0, r7
 8005308:	47c8      	blx	r9
 800530a:	3001      	adds	r0, #1
 800530c:	d0e6      	beq.n	80052dc <_printf_common+0xa4>
 800530e:	3601      	adds	r6, #1
 8005310:	e7d9      	b.n	80052c6 <_printf_common+0x8e>
	...

08005314 <_printf_i>:
 8005314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005318:	7e0f      	ldrb	r7, [r1, #24]
 800531a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800531c:	2f78      	cmp	r7, #120	@ 0x78
 800531e:	4691      	mov	r9, r2
 8005320:	4680      	mov	r8, r0
 8005322:	460c      	mov	r4, r1
 8005324:	469a      	mov	sl, r3
 8005326:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800532a:	d807      	bhi.n	800533c <_printf_i+0x28>
 800532c:	2f62      	cmp	r7, #98	@ 0x62
 800532e:	d80a      	bhi.n	8005346 <_printf_i+0x32>
 8005330:	2f00      	cmp	r7, #0
 8005332:	f000 80d2 	beq.w	80054da <_printf_i+0x1c6>
 8005336:	2f58      	cmp	r7, #88	@ 0x58
 8005338:	f000 80b9 	beq.w	80054ae <_printf_i+0x19a>
 800533c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005340:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005344:	e03a      	b.n	80053bc <_printf_i+0xa8>
 8005346:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800534a:	2b15      	cmp	r3, #21
 800534c:	d8f6      	bhi.n	800533c <_printf_i+0x28>
 800534e:	a101      	add	r1, pc, #4	@ (adr r1, 8005354 <_printf_i+0x40>)
 8005350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005354:	080053ad 	.word	0x080053ad
 8005358:	080053c1 	.word	0x080053c1
 800535c:	0800533d 	.word	0x0800533d
 8005360:	0800533d 	.word	0x0800533d
 8005364:	0800533d 	.word	0x0800533d
 8005368:	0800533d 	.word	0x0800533d
 800536c:	080053c1 	.word	0x080053c1
 8005370:	0800533d 	.word	0x0800533d
 8005374:	0800533d 	.word	0x0800533d
 8005378:	0800533d 	.word	0x0800533d
 800537c:	0800533d 	.word	0x0800533d
 8005380:	080054c1 	.word	0x080054c1
 8005384:	080053eb 	.word	0x080053eb
 8005388:	0800547b 	.word	0x0800547b
 800538c:	0800533d 	.word	0x0800533d
 8005390:	0800533d 	.word	0x0800533d
 8005394:	080054e3 	.word	0x080054e3
 8005398:	0800533d 	.word	0x0800533d
 800539c:	080053eb 	.word	0x080053eb
 80053a0:	0800533d 	.word	0x0800533d
 80053a4:	0800533d 	.word	0x0800533d
 80053a8:	08005483 	.word	0x08005483
 80053ac:	6833      	ldr	r3, [r6, #0]
 80053ae:	1d1a      	adds	r2, r3, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6032      	str	r2, [r6, #0]
 80053b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053bc:	2301      	movs	r3, #1
 80053be:	e09d      	b.n	80054fc <_printf_i+0x1e8>
 80053c0:	6833      	ldr	r3, [r6, #0]
 80053c2:	6820      	ldr	r0, [r4, #0]
 80053c4:	1d19      	adds	r1, r3, #4
 80053c6:	6031      	str	r1, [r6, #0]
 80053c8:	0606      	lsls	r6, r0, #24
 80053ca:	d501      	bpl.n	80053d0 <_printf_i+0xbc>
 80053cc:	681d      	ldr	r5, [r3, #0]
 80053ce:	e003      	b.n	80053d8 <_printf_i+0xc4>
 80053d0:	0645      	lsls	r5, r0, #25
 80053d2:	d5fb      	bpl.n	80053cc <_printf_i+0xb8>
 80053d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053d8:	2d00      	cmp	r5, #0
 80053da:	da03      	bge.n	80053e4 <_printf_i+0xd0>
 80053dc:	232d      	movs	r3, #45	@ 0x2d
 80053de:	426d      	negs	r5, r5
 80053e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053e4:	4859      	ldr	r0, [pc, #356]	@ (800554c <_printf_i+0x238>)
 80053e6:	230a      	movs	r3, #10
 80053e8:	e011      	b.n	800540e <_printf_i+0xfa>
 80053ea:	6821      	ldr	r1, [r4, #0]
 80053ec:	6833      	ldr	r3, [r6, #0]
 80053ee:	0608      	lsls	r0, r1, #24
 80053f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80053f4:	d402      	bmi.n	80053fc <_printf_i+0xe8>
 80053f6:	0649      	lsls	r1, r1, #25
 80053f8:	bf48      	it	mi
 80053fa:	b2ad      	uxthmi	r5, r5
 80053fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80053fe:	4853      	ldr	r0, [pc, #332]	@ (800554c <_printf_i+0x238>)
 8005400:	6033      	str	r3, [r6, #0]
 8005402:	bf14      	ite	ne
 8005404:	230a      	movne	r3, #10
 8005406:	2308      	moveq	r3, #8
 8005408:	2100      	movs	r1, #0
 800540a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800540e:	6866      	ldr	r6, [r4, #4]
 8005410:	60a6      	str	r6, [r4, #8]
 8005412:	2e00      	cmp	r6, #0
 8005414:	bfa2      	ittt	ge
 8005416:	6821      	ldrge	r1, [r4, #0]
 8005418:	f021 0104 	bicge.w	r1, r1, #4
 800541c:	6021      	strge	r1, [r4, #0]
 800541e:	b90d      	cbnz	r5, 8005424 <_printf_i+0x110>
 8005420:	2e00      	cmp	r6, #0
 8005422:	d04b      	beq.n	80054bc <_printf_i+0x1a8>
 8005424:	4616      	mov	r6, r2
 8005426:	fbb5 f1f3 	udiv	r1, r5, r3
 800542a:	fb03 5711 	mls	r7, r3, r1, r5
 800542e:	5dc7      	ldrb	r7, [r0, r7]
 8005430:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005434:	462f      	mov	r7, r5
 8005436:	42bb      	cmp	r3, r7
 8005438:	460d      	mov	r5, r1
 800543a:	d9f4      	bls.n	8005426 <_printf_i+0x112>
 800543c:	2b08      	cmp	r3, #8
 800543e:	d10b      	bne.n	8005458 <_printf_i+0x144>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	07df      	lsls	r7, r3, #31
 8005444:	d508      	bpl.n	8005458 <_printf_i+0x144>
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6861      	ldr	r1, [r4, #4]
 800544a:	4299      	cmp	r1, r3
 800544c:	bfde      	ittt	le
 800544e:	2330      	movle	r3, #48	@ 0x30
 8005450:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005454:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005458:	1b92      	subs	r2, r2, r6
 800545a:	6122      	str	r2, [r4, #16]
 800545c:	f8cd a000 	str.w	sl, [sp]
 8005460:	464b      	mov	r3, r9
 8005462:	aa03      	add	r2, sp, #12
 8005464:	4621      	mov	r1, r4
 8005466:	4640      	mov	r0, r8
 8005468:	f7ff fee6 	bl	8005238 <_printf_common>
 800546c:	3001      	adds	r0, #1
 800546e:	d14a      	bne.n	8005506 <_printf_i+0x1f2>
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	b004      	add	sp, #16
 8005476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	f043 0320 	orr.w	r3, r3, #32
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	4833      	ldr	r0, [pc, #204]	@ (8005550 <_printf_i+0x23c>)
 8005484:	2778      	movs	r7, #120	@ 0x78
 8005486:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	6831      	ldr	r1, [r6, #0]
 800548e:	061f      	lsls	r7, r3, #24
 8005490:	f851 5b04 	ldr.w	r5, [r1], #4
 8005494:	d402      	bmi.n	800549c <_printf_i+0x188>
 8005496:	065f      	lsls	r7, r3, #25
 8005498:	bf48      	it	mi
 800549a:	b2ad      	uxthmi	r5, r5
 800549c:	6031      	str	r1, [r6, #0]
 800549e:	07d9      	lsls	r1, r3, #31
 80054a0:	bf44      	itt	mi
 80054a2:	f043 0320 	orrmi.w	r3, r3, #32
 80054a6:	6023      	strmi	r3, [r4, #0]
 80054a8:	b11d      	cbz	r5, 80054b2 <_printf_i+0x19e>
 80054aa:	2310      	movs	r3, #16
 80054ac:	e7ac      	b.n	8005408 <_printf_i+0xf4>
 80054ae:	4827      	ldr	r0, [pc, #156]	@ (800554c <_printf_i+0x238>)
 80054b0:	e7e9      	b.n	8005486 <_printf_i+0x172>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	f023 0320 	bic.w	r3, r3, #32
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	e7f6      	b.n	80054aa <_printf_i+0x196>
 80054bc:	4616      	mov	r6, r2
 80054be:	e7bd      	b.n	800543c <_printf_i+0x128>
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	6825      	ldr	r5, [r4, #0]
 80054c4:	6961      	ldr	r1, [r4, #20]
 80054c6:	1d18      	adds	r0, r3, #4
 80054c8:	6030      	str	r0, [r6, #0]
 80054ca:	062e      	lsls	r6, r5, #24
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	d501      	bpl.n	80054d4 <_printf_i+0x1c0>
 80054d0:	6019      	str	r1, [r3, #0]
 80054d2:	e002      	b.n	80054da <_printf_i+0x1c6>
 80054d4:	0668      	lsls	r0, r5, #25
 80054d6:	d5fb      	bpl.n	80054d0 <_printf_i+0x1bc>
 80054d8:	8019      	strh	r1, [r3, #0]
 80054da:	2300      	movs	r3, #0
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	4616      	mov	r6, r2
 80054e0:	e7bc      	b.n	800545c <_printf_i+0x148>
 80054e2:	6833      	ldr	r3, [r6, #0]
 80054e4:	1d1a      	adds	r2, r3, #4
 80054e6:	6032      	str	r2, [r6, #0]
 80054e8:	681e      	ldr	r6, [r3, #0]
 80054ea:	6862      	ldr	r2, [r4, #4]
 80054ec:	2100      	movs	r1, #0
 80054ee:	4630      	mov	r0, r6
 80054f0:	f7fa fe46 	bl	8000180 <memchr>
 80054f4:	b108      	cbz	r0, 80054fa <_printf_i+0x1e6>
 80054f6:	1b80      	subs	r0, r0, r6
 80054f8:	6060      	str	r0, [r4, #4]
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	2300      	movs	r3, #0
 8005500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005504:	e7aa      	b.n	800545c <_printf_i+0x148>
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	4632      	mov	r2, r6
 800550a:	4649      	mov	r1, r9
 800550c:	4640      	mov	r0, r8
 800550e:	47d0      	blx	sl
 8005510:	3001      	adds	r0, #1
 8005512:	d0ad      	beq.n	8005470 <_printf_i+0x15c>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	079b      	lsls	r3, r3, #30
 8005518:	d413      	bmi.n	8005542 <_printf_i+0x22e>
 800551a:	68e0      	ldr	r0, [r4, #12]
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	4298      	cmp	r0, r3
 8005520:	bfb8      	it	lt
 8005522:	4618      	movlt	r0, r3
 8005524:	e7a6      	b.n	8005474 <_printf_i+0x160>
 8005526:	2301      	movs	r3, #1
 8005528:	4632      	mov	r2, r6
 800552a:	4649      	mov	r1, r9
 800552c:	4640      	mov	r0, r8
 800552e:	47d0      	blx	sl
 8005530:	3001      	adds	r0, #1
 8005532:	d09d      	beq.n	8005470 <_printf_i+0x15c>
 8005534:	3501      	adds	r5, #1
 8005536:	68e3      	ldr	r3, [r4, #12]
 8005538:	9903      	ldr	r1, [sp, #12]
 800553a:	1a5b      	subs	r3, r3, r1
 800553c:	42ab      	cmp	r3, r5
 800553e:	dcf2      	bgt.n	8005526 <_printf_i+0x212>
 8005540:	e7eb      	b.n	800551a <_printf_i+0x206>
 8005542:	2500      	movs	r5, #0
 8005544:	f104 0619 	add.w	r6, r4, #25
 8005548:	e7f5      	b.n	8005536 <_printf_i+0x222>
 800554a:	bf00      	nop
 800554c:	08005bdd 	.word	0x08005bdd
 8005550:	08005bee 	.word	0x08005bee

08005554 <__sflush_r>:
 8005554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	0716      	lsls	r6, r2, #28
 800555c:	4605      	mov	r5, r0
 800555e:	460c      	mov	r4, r1
 8005560:	d454      	bmi.n	800560c <__sflush_r+0xb8>
 8005562:	684b      	ldr	r3, [r1, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	dc02      	bgt.n	800556e <__sflush_r+0x1a>
 8005568:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	dd48      	ble.n	8005600 <__sflush_r+0xac>
 800556e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005570:	2e00      	cmp	r6, #0
 8005572:	d045      	beq.n	8005600 <__sflush_r+0xac>
 8005574:	2300      	movs	r3, #0
 8005576:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800557a:	682f      	ldr	r7, [r5, #0]
 800557c:	6a21      	ldr	r1, [r4, #32]
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	d030      	beq.n	80055e4 <__sflush_r+0x90>
 8005582:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	0759      	lsls	r1, r3, #29
 8005588:	d505      	bpl.n	8005596 <__sflush_r+0x42>
 800558a:	6863      	ldr	r3, [r4, #4]
 800558c:	1ad2      	subs	r2, r2, r3
 800558e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005590:	b10b      	cbz	r3, 8005596 <__sflush_r+0x42>
 8005592:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005594:	1ad2      	subs	r2, r2, r3
 8005596:	2300      	movs	r3, #0
 8005598:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800559a:	6a21      	ldr	r1, [r4, #32]
 800559c:	4628      	mov	r0, r5
 800559e:	47b0      	blx	r6
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	d106      	bne.n	80055b4 <__sflush_r+0x60>
 80055a6:	6829      	ldr	r1, [r5, #0]
 80055a8:	291d      	cmp	r1, #29
 80055aa:	d82b      	bhi.n	8005604 <__sflush_r+0xb0>
 80055ac:	4a28      	ldr	r2, [pc, #160]	@ (8005650 <__sflush_r+0xfc>)
 80055ae:	410a      	asrs	r2, r1
 80055b0:	07d6      	lsls	r6, r2, #31
 80055b2:	d427      	bmi.n	8005604 <__sflush_r+0xb0>
 80055b4:	2200      	movs	r2, #0
 80055b6:	6062      	str	r2, [r4, #4]
 80055b8:	04d9      	lsls	r1, r3, #19
 80055ba:	6922      	ldr	r2, [r4, #16]
 80055bc:	6022      	str	r2, [r4, #0]
 80055be:	d504      	bpl.n	80055ca <__sflush_r+0x76>
 80055c0:	1c42      	adds	r2, r0, #1
 80055c2:	d101      	bne.n	80055c8 <__sflush_r+0x74>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	b903      	cbnz	r3, 80055ca <__sflush_r+0x76>
 80055c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80055ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055cc:	602f      	str	r7, [r5, #0]
 80055ce:	b1b9      	cbz	r1, 8005600 <__sflush_r+0xac>
 80055d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055d4:	4299      	cmp	r1, r3
 80055d6:	d002      	beq.n	80055de <__sflush_r+0x8a>
 80055d8:	4628      	mov	r0, r5
 80055da:	f7ff fbf5 	bl	8004dc8 <_free_r>
 80055de:	2300      	movs	r3, #0
 80055e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80055e2:	e00d      	b.n	8005600 <__sflush_r+0xac>
 80055e4:	2301      	movs	r3, #1
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b0      	blx	r6
 80055ea:	4602      	mov	r2, r0
 80055ec:	1c50      	adds	r0, r2, #1
 80055ee:	d1c9      	bne.n	8005584 <__sflush_r+0x30>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0c6      	beq.n	8005584 <__sflush_r+0x30>
 80055f6:	2b1d      	cmp	r3, #29
 80055f8:	d001      	beq.n	80055fe <__sflush_r+0xaa>
 80055fa:	2b16      	cmp	r3, #22
 80055fc:	d11d      	bne.n	800563a <__sflush_r+0xe6>
 80055fe:	602f      	str	r7, [r5, #0]
 8005600:	2000      	movs	r0, #0
 8005602:	e021      	b.n	8005648 <__sflush_r+0xf4>
 8005604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005608:	b21b      	sxth	r3, r3
 800560a:	e01a      	b.n	8005642 <__sflush_r+0xee>
 800560c:	690f      	ldr	r7, [r1, #16]
 800560e:	2f00      	cmp	r7, #0
 8005610:	d0f6      	beq.n	8005600 <__sflush_r+0xac>
 8005612:	0793      	lsls	r3, r2, #30
 8005614:	680e      	ldr	r6, [r1, #0]
 8005616:	bf08      	it	eq
 8005618:	694b      	ldreq	r3, [r1, #20]
 800561a:	600f      	str	r7, [r1, #0]
 800561c:	bf18      	it	ne
 800561e:	2300      	movne	r3, #0
 8005620:	1bf6      	subs	r6, r6, r7
 8005622:	608b      	str	r3, [r1, #8]
 8005624:	2e00      	cmp	r6, #0
 8005626:	ddeb      	ble.n	8005600 <__sflush_r+0xac>
 8005628:	6a21      	ldr	r1, [r4, #32]
 800562a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800562e:	4633      	mov	r3, r6
 8005630:	463a      	mov	r2, r7
 8005632:	4628      	mov	r0, r5
 8005634:	47e0      	blx	ip
 8005636:	2800      	cmp	r0, #0
 8005638:	dc07      	bgt.n	800564a <__sflush_r+0xf6>
 800563a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564a:	4407      	add	r7, r0
 800564c:	1a36      	subs	r6, r6, r0
 800564e:	e7e9      	b.n	8005624 <__sflush_r+0xd0>
 8005650:	dfbffffe 	.word	0xdfbffffe

08005654 <_fflush_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	4605      	mov	r5, r0
 800565a:	460c      	mov	r4, r1
 800565c:	b913      	cbnz	r3, 8005664 <_fflush_r+0x10>
 800565e:	2500      	movs	r5, #0
 8005660:	4628      	mov	r0, r5
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	b118      	cbz	r0, 800566e <_fflush_r+0x1a>
 8005666:	6a03      	ldr	r3, [r0, #32]
 8005668:	b90b      	cbnz	r3, 800566e <_fflush_r+0x1a>
 800566a:	f7ff f9ab 	bl	80049c4 <__sinit>
 800566e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f3      	beq.n	800565e <_fflush_r+0xa>
 8005676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005678:	07d0      	lsls	r0, r2, #31
 800567a:	d404      	bmi.n	8005686 <_fflush_r+0x32>
 800567c:	0599      	lsls	r1, r3, #22
 800567e:	d402      	bmi.n	8005686 <_fflush_r+0x32>
 8005680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005682:	f7ff fb9e 	bl	8004dc2 <__retarget_lock_acquire_recursive>
 8005686:	4628      	mov	r0, r5
 8005688:	4621      	mov	r1, r4
 800568a:	f7ff ff63 	bl	8005554 <__sflush_r>
 800568e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005690:	07da      	lsls	r2, r3, #31
 8005692:	4605      	mov	r5, r0
 8005694:	d4e4      	bmi.n	8005660 <_fflush_r+0xc>
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	059b      	lsls	r3, r3, #22
 800569a:	d4e1      	bmi.n	8005660 <_fflush_r+0xc>
 800569c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800569e:	f7ff fb91 	bl	8004dc4 <__retarget_lock_release_recursive>
 80056a2:	e7dd      	b.n	8005660 <_fflush_r+0xc>

080056a4 <__swhatbuf_r>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	460c      	mov	r4, r1
 80056a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ac:	2900      	cmp	r1, #0
 80056ae:	b096      	sub	sp, #88	@ 0x58
 80056b0:	4615      	mov	r5, r2
 80056b2:	461e      	mov	r6, r3
 80056b4:	da0d      	bge.n	80056d2 <__swhatbuf_r+0x2e>
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056bc:	f04f 0100 	mov.w	r1, #0
 80056c0:	bf14      	ite	ne
 80056c2:	2340      	movne	r3, #64	@ 0x40
 80056c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80056c8:	2000      	movs	r0, #0
 80056ca:	6031      	str	r1, [r6, #0]
 80056cc:	602b      	str	r3, [r5, #0]
 80056ce:	b016      	add	sp, #88	@ 0x58
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	466a      	mov	r2, sp
 80056d4:	f000 f87c 	bl	80057d0 <_fstat_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	dbec      	blt.n	80056b6 <__swhatbuf_r+0x12>
 80056dc:	9901      	ldr	r1, [sp, #4]
 80056de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056e6:	4259      	negs	r1, r3
 80056e8:	4159      	adcs	r1, r3
 80056ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056ee:	e7eb      	b.n	80056c8 <__swhatbuf_r+0x24>

080056f0 <__smakebuf_r>:
 80056f0:	898b      	ldrh	r3, [r1, #12]
 80056f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f4:	079d      	lsls	r5, r3, #30
 80056f6:	4606      	mov	r6, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	d507      	bpl.n	800570c <__smakebuf_r+0x1c>
 80056fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	2301      	movs	r3, #1
 8005706:	6163      	str	r3, [r4, #20]
 8005708:	b003      	add	sp, #12
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570c:	ab01      	add	r3, sp, #4
 800570e:	466a      	mov	r2, sp
 8005710:	f7ff ffc8 	bl	80056a4 <__swhatbuf_r>
 8005714:	9f00      	ldr	r7, [sp, #0]
 8005716:	4605      	mov	r5, r0
 8005718:	4639      	mov	r1, r7
 800571a:	4630      	mov	r0, r6
 800571c:	f7ff fbc0 	bl	8004ea0 <_malloc_r>
 8005720:	b948      	cbnz	r0, 8005736 <__smakebuf_r+0x46>
 8005722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005726:	059a      	lsls	r2, r3, #22
 8005728:	d4ee      	bmi.n	8005708 <__smakebuf_r+0x18>
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	f043 0302 	orr.w	r3, r3, #2
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	e7e2      	b.n	80056fc <__smakebuf_r+0xc>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	6020      	str	r0, [r4, #0]
 800573a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	9b01      	ldr	r3, [sp, #4]
 8005742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005746:	b15b      	cbz	r3, 8005760 <__smakebuf_r+0x70>
 8005748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800574c:	4630      	mov	r0, r6
 800574e:	f000 f851 	bl	80057f4 <_isatty_r>
 8005752:	b128      	cbz	r0, 8005760 <__smakebuf_r+0x70>
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f023 0303 	bic.w	r3, r3, #3
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	431d      	orrs	r5, r3
 8005764:	81a5      	strh	r5, [r4, #12]
 8005766:	e7cf      	b.n	8005708 <__smakebuf_r+0x18>

08005768 <_putc_r>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	460d      	mov	r5, r1
 800576c:	4614      	mov	r4, r2
 800576e:	4606      	mov	r6, r0
 8005770:	b118      	cbz	r0, 800577a <_putc_r+0x12>
 8005772:	6a03      	ldr	r3, [r0, #32]
 8005774:	b90b      	cbnz	r3, 800577a <_putc_r+0x12>
 8005776:	f7ff f925 	bl	80049c4 <__sinit>
 800577a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800577c:	07d8      	lsls	r0, r3, #31
 800577e:	d405      	bmi.n	800578c <_putc_r+0x24>
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	0599      	lsls	r1, r3, #22
 8005784:	d402      	bmi.n	800578c <_putc_r+0x24>
 8005786:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005788:	f7ff fb1b 	bl	8004dc2 <__retarget_lock_acquire_recursive>
 800578c:	68a3      	ldr	r3, [r4, #8]
 800578e:	3b01      	subs	r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	60a3      	str	r3, [r4, #8]
 8005794:	da05      	bge.n	80057a2 <_putc_r+0x3a>
 8005796:	69a2      	ldr	r2, [r4, #24]
 8005798:	4293      	cmp	r3, r2
 800579a:	db12      	blt.n	80057c2 <_putc_r+0x5a>
 800579c:	b2eb      	uxtb	r3, r5
 800579e:	2b0a      	cmp	r3, #10
 80057a0:	d00f      	beq.n	80057c2 <_putc_r+0x5a>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	6022      	str	r2, [r4, #0]
 80057a8:	701d      	strb	r5, [r3, #0]
 80057aa:	b2ed      	uxtb	r5, r5
 80057ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057ae:	07da      	lsls	r2, r3, #31
 80057b0:	d405      	bmi.n	80057be <_putc_r+0x56>
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	059b      	lsls	r3, r3, #22
 80057b6:	d402      	bmi.n	80057be <_putc_r+0x56>
 80057b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057ba:	f7ff fb03 	bl	8004dc4 <__retarget_lock_release_recursive>
 80057be:	4628      	mov	r0, r5
 80057c0:	bd70      	pop	{r4, r5, r6, pc}
 80057c2:	4629      	mov	r1, r5
 80057c4:	4622      	mov	r2, r4
 80057c6:	4630      	mov	r0, r6
 80057c8:	f7ff f9ed 	bl	8004ba6 <__swbuf_r>
 80057cc:	4605      	mov	r5, r0
 80057ce:	e7ed      	b.n	80057ac <_putc_r+0x44>

080057d0 <_fstat_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d07      	ldr	r5, [pc, #28]	@ (80057f0 <_fstat_r+0x20>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	f7fb fd18 	bl	8001212 <_fstat>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d102      	bne.n	80057ec <_fstat_r+0x1c>
 80057e6:	682b      	ldr	r3, [r5, #0]
 80057e8:	b103      	cbz	r3, 80057ec <_fstat_r+0x1c>
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	bd38      	pop	{r3, r4, r5, pc}
 80057ee:	bf00      	nop
 80057f0:	20000344 	.word	0x20000344

080057f4 <_isatty_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4d06      	ldr	r5, [pc, #24]	@ (8005810 <_isatty_r+0x1c>)
 80057f8:	2300      	movs	r3, #0
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	f7fb fd16 	bl	8001230 <_isatty>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d102      	bne.n	800580e <_isatty_r+0x1a>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	b103      	cbz	r3, 800580e <_isatty_r+0x1a>
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	20000344 	.word	0x20000344

08005814 <_sbrk_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d06      	ldr	r5, [pc, #24]	@ (8005830 <_sbrk_r+0x1c>)
 8005818:	2300      	movs	r3, #0
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	f7fb fd1c 	bl	800125c <_sbrk>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_sbrk_r+0x1a>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	b103      	cbz	r3, 800582e <_sbrk_r+0x1a>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	20000344 	.word	0x20000344

08005834 <_init>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr

08005840 <_fini>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	bf00      	nop
 8005844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005846:	bc08      	pop	{r3}
 8005848:	469e      	mov	lr, r3
 800584a:	4770      	bx	lr
