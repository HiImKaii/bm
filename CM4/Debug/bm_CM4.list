
bm_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003704  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800383c  0800383c  0000483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003918  08003918  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003918  08003918  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003918  08003918  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003918  08003918  00004918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800391c  0800391c  0000491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003920  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  08003988  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003988  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d34f  00000000  00000000  00005092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002661  00000000  00000000  000123e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00014a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bff  00000000  00000000  00015a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db1e  00000000  00000000  0001666f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fef0  00000000  00000000  0003418d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6515  00000000  00000000  0004407d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa592  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004784  00000000  00000000  000fa5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000fed5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000068 	.word	0x20000068
 8000154:	00000000 	.word	0x00000000
 8000158:	08003824 	.word	0x08003824

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000006c 	.word	0x2000006c
 8000174:	08003824 	.word	0x08003824

08000178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800017c:	bf00      	nop
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800018c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000190:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4313      	orrs	r3, r2
 800019a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800019c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	4013      	ands	r3, r2
 80001a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a8:	68fb      	ldr	r3, [r7, #12]
}
 80001aa:	bf00      	nop
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b8:	f000 fa66 	bl	8000688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001bc:	f000 f812 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f8b0 	bl	8000324 <MX_GPIO_Init>
  MX_USART2_Init();
 80001c4:	f000 f862 	bl	800028c <MX_USART2_Init>
//  {
//    Error_Handler();
//  }

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80001c8:	2001      	movs	r0, #1
 80001ca:	f000 fd8f 	bl	8000cec <HAL_PWREx_ReleaseCore>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("Hello World\r\n");
 80001ce:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <main+0x2c>)
 80001d0:	f002 ff98 	bl	8003104 <puts>
//	  HAL_UART_Transmit(&husart2, "hello\n\r",10, 100);
	  HAL_Delay(100);
 80001d4:	2064      	movs	r0, #100	@ 0x64
 80001d6:	f000 facd 	bl	8000774 <HAL_Delay>
	  printf("Hello World\r\n");
 80001da:	bf00      	nop
 80001dc:	e7f7      	b.n	80001ce <main+0x1a>
 80001de:	bf00      	nop
 80001e0:	0800383c 	.word	0x0800383c

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b09a      	sub	sp, #104	@ 0x68
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0320 	add.w	r3, r7, #32
 80001ee:	2248      	movs	r2, #72	@ 0x48
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f003 f866 	bl	80032c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]
 8000206:	615a      	str	r2, [r3, #20]
 8000208:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800020a:	4b1f      	ldr	r3, [pc, #124]	@ (8000288 <SystemClock_Config+0xa4>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000212:	4a1d      	ldr	r2, [pc, #116]	@ (8000288 <SystemClock_Config+0xa4>)
 8000214:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000218:	6013      	str	r3, [r2, #0]
 800021a:	4b1b      	ldr	r3, [pc, #108]	@ (8000288 <SystemClock_Config+0xa4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000226:	2320      	movs	r3, #32
 8000228:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800022e:	2300      	movs	r3, #0
 8000230:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000232:	2360      	movs	r3, #96	@ 0x60
 8000234:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0320 	add.w	r3, r7, #32
 800023e:	4618      	mov	r0, r3
 8000240:	f001 f816 	bl	8001270 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800024a:	f000 f875 	bl	8000338 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 800024e:	236f      	movs	r3, #111	@ 0x6f
 8000250:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fb80 	bl	8001974 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800027a:	f000 f85d 	bl	8000338 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3768      	adds	r7, #104	@ 0x68
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	58000400 	.word	0x58000400

0800028c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000290:	4b22      	ldr	r3, [pc, #136]	@ (800031c <MX_USART2_Init+0x90>)
 8000292:	4a23      	ldr	r2, [pc, #140]	@ (8000320 <MX_USART2_Init+0x94>)
 8000294:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000296:	4b21      	ldr	r3, [pc, #132]	@ (800031c <MX_USART2_Init+0x90>)
 8000298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800029c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800029e:	4b1f      	ldr	r3, [pc, #124]	@ (800031c <MX_USART2_Init+0x90>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80002a4:	4b1d      	ldr	r3, [pc, #116]	@ (800031c <MX_USART2_Init+0x90>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80002aa:	4b1c      	ldr	r3, [pc, #112]	@ (800031c <MX_USART2_Init+0x90>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80002b0:	4b1a      	ldr	r3, [pc, #104]	@ (800031c <MX_USART2_Init+0x90>)
 80002b2:	220c      	movs	r2, #12
 80002b4:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80002b6:	4b19      	ldr	r3, [pc, #100]	@ (800031c <MX_USART2_Init+0x90>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80002bc:	4b17      	ldr	r3, [pc, #92]	@ (800031c <MX_USART2_Init+0x90>)
 80002be:	2200      	movs	r2, #0
 80002c0:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80002c2:	4b16      	ldr	r3, [pc, #88]	@ (800031c <MX_USART2_Init+0x90>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80002c8:	4b14      	ldr	r3, [pc, #80]	@ (800031c <MX_USART2_Init+0x90>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_DISABLE;
 80002ce:	4b13      	ldr	r3, [pc, #76]	@ (800031c <MX_USART2_Init+0x90>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80002d4:	4811      	ldr	r0, [pc, #68]	@ (800031c <MX_USART2_Init+0x90>)
 80002d6:	f002 f839 	bl	800234c <HAL_USART_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 80002e0:	f000 f82a 	bl	8000338 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80002e4:	2100      	movs	r1, #0
 80002e6:	480d      	ldr	r0, [pc, #52]	@ (800031c <MX_USART2_Init+0x90>)
 80002e8:	f002 fd2f 	bl	8002d4a <HAL_USARTEx_SetTxFifoThreshold>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 80002f2:	f000 f821 	bl	8000338 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80002f6:	2100      	movs	r1, #0
 80002f8:	4808      	ldr	r0, [pc, #32]	@ (800031c <MX_USART2_Init+0x90>)
 80002fa:	f002 fd64 	bl	8002dc6 <HAL_USARTEx_SetRxFifoThreshold>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8000304:	f000 f818 	bl	8000338 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <MX_USART2_Init+0x90>)
 800030a:	f002 fce6 	bl	8002cda <HAL_USARTEx_DisableFifoMode>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_USART2_Init+0x8c>
  {
    Error_Handler();
 8000314:	f000 f810 	bl	8000338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000084 	.word	0x20000084
 8000320:	40004400 	.word	0x40004400

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000328:	2004      	movs	r0, #4
 800032a:	f7ff ff2b 	bl	8000184 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff28 	bl	8000184 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}

08000338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033c:	b672      	cpsid	i
}
 800033e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <Error_Handler+0x8>

08000344 <_write>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

#if defined(__GNUC__)
int _write(int fd, char * ptr, int len) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  HAL_USART_Transmit( & husart2, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	b29a      	uxth	r2, r3
 8000354:	f04f 33ff 	mov.w	r3, #4294967295
 8000358:	68b9      	ldr	r1, [r7, #8]
 800035a:	4804      	ldr	r0, [pc, #16]	@ (800036c <_write+0x28>)
 800035c:	f002 f850 	bl	8002400 <HAL_USART_Transmit>
  return len;
 8000360:	687b      	ldr	r3, [r7, #4]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000084 	.word	0x20000084

08000370 <LL_AHB2_GRP1_EnableClock>:
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800037c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800037e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800038c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4013      	ands	r3, r2
 8000392:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000394:	68fb      	ldr	r3, [r7, #12]
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80003a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80003ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4013      	ands	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c4:	68fb      	ldr	r3, [r7, #12]
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b096      	sub	sp, #88	@ 0x58
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	2238      	movs	r2, #56	@ 0x38
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f002 ff61 	bl	80032c4 <memset>
  if(husart->Instance==USART2)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a1f      	ldr	r2, [pc, #124]	@ (8000484 <HAL_USART_MspInit+0xa8>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d137      	bne.n	800047c <HAL_USART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800040c:	2302      	movs	r3, #2
 800040e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000410:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000414:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000416:	f107 030c 	add.w	r3, r7, #12
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fe6a 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8000426:	f7ff ff87 	bl	8000338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800042a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800042e:	f7ff ffb7 	bl	80003a0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff ff9c 	bl	8000370 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000438:	230c      	movs	r3, #12
 800043a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043c:	2302      	movs	r3, #2
 800043e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2300      	movs	r3, #0
 8000446:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000448:	2307      	movs	r3, #7
 800044a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000450:	4619      	mov	r1, r3
 8000452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000456:	f000 fac1 	bl	80009dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800045a:	2310      	movs	r3, #16
 800045c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045e:	2302      	movs	r3, #2
 8000460:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000462:	2301      	movs	r3, #1
 8000464:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	2300      	movs	r3, #0
 8000468:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800046a:	2307      	movs	r3, #7
 800046c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000472:	4619      	mov	r1, r3
 8000474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000478:	f000 fab0 	bl	80009dc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800047c:	bf00      	nop
 800047e:	3758      	adds	r7, #88	@ 0x58
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40004400 	.word	0x40004400

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <NMI_Handler+0x4>

08000490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <MemManage_Handler+0x4>

080004a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <BusFault_Handler+0x4>

080004a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <UsageFault_Handler+0x4>

080004b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d8:	f000 f930 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW1);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 f8bd 	bl	8000664 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}

080004ee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW2);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f000 f8b6 	bl	8000664 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW3);
 8000500:	2002      	movs	r0, #2
 8000502:	f000 f8af 	bl	8000664 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}

0800050a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e00a      	b.n	8000532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051c:	f3af 8000 	nop.w
 8000520:	4601      	mov	r1, r0
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	60ba      	str	r2, [r7, #8]
 8000528:	b2ca      	uxtb	r2, r1
 800052a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	3301      	adds	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	429a      	cmp	r2, r3
 8000538:	dbf0      	blt.n	800051c <_read+0x12>
  }

  return len;
 800053a:	687b      	ldr	r3, [r7, #4]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800054c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800056a:	605a      	str	r2, [r3, #4]
  return 0;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <_isatty>:

int _isatty(int file)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000580:	2301      	movs	r3, #1
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ac:	4a14      	ldr	r2, [pc, #80]	@ (8000600 <_sbrk+0x5c>)
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <_sbrk+0x60>)
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <_sbrk+0x64>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <_sbrk+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d207      	bcs.n	80005e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d4:	f002 fec4 	bl	8003360 <__errno>
 80005d8:	4603      	mov	r3, r0
 80005da:	220c      	movs	r2, #12
 80005dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	e009      	b.n	80005f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <_sbrk+0x64>)
 80005f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20008000 	.word	0x20008000
 8000604:	00000400 	.word	0x00000400
 8000608:	20000110 	.word	0x20000110
 800060c:	20000280 	.word	0x20000280

08000610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000612:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000614:	f7ff fdb0 	bl	8000178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480c      	ldr	r0, [pc, #48]	@ (800064c <LoopForever+0x6>)
  ldr r1, =_edata
 800061a:	490d      	ldr	r1, [pc, #52]	@ (8000650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <LoopForever+0xe>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000630:	4c0a      	ldr	r4, [pc, #40]	@ (800065c <LoopForever+0x16>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800063e:	f002 fe95 	bl	800336c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000642:	f7ff fdb7 	bl	80001b4 <main>

08000646 <LoopForever>:

LoopForever:
    b LoopForever
 8000646:	e7fe      	b.n	8000646 <LoopForever>
  ldr   r0, =_estack
 8000648:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000654:	08003920 	.word	0x08003920
  ldr r2, =_sbss
 8000658:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800065c:	2000027c 	.word	0x2000027c

08000660 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC_IRQHandler>
	...

08000664 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <BSP_PB_IRQHandler+0x20>)
 8000674:	4413      	add	r3, r2
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f981 	bl	800097e <HAL_EXTI_IRQHandler>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000114 	.word	0x20000114

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000692:	2003      	movs	r0, #3
 8000694:	f000 f942 	bl	800091c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000698:	f001 fb4e 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 800069c:	4603      	mov	r3, r0
 800069e:	4a09      	ldr	r2, [pc, #36]	@ (80006c4 <HAL_Init+0x3c>)
 80006a0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f810 	bl	80006c8 <HAL_InitTick>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	e001      	b.n	80006b8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006b4:	f7ff fe8c 	bl	80003d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000

080006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <HAL_InitTick+0x6c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d024      	beq.n	8000726 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006dc:	f001 fb2c 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <HAL_InitTick+0x6c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f936 	bl	8000966 <HAL_SYSTICK_Config>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10f      	bne.n	8000720 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b0f      	cmp	r3, #15
 8000704:	d809      	bhi.n	800071a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000706:	2200      	movs	r2, #0
 8000708:	6879      	ldr	r1, [r7, #4]
 800070a:	f04f 30ff 	mov.w	r0, #4294967295
 800070e:	f000 f910 	bl	8000932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000712:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <HAL_InitTick+0x70>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	e007      	b.n	800072a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e004      	b.n	800072a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e001      	b.n	800072a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000008 	.word	0x20000008
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <HAL_IncTick+0x1c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HAL_IncTick+0x20>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a03      	ldr	r2, [pc, #12]	@ (800075c <HAL_IncTick+0x20>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000008 	.word	0x20000008
 800075c:	2000012c 	.word	0x2000012c

08000760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b02      	ldr	r3, [pc, #8]	@ (8000770 <HAL_GetTick+0x10>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	2000012c 	.word	0x2000012c

08000774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800077c:	f7ff fff0 	bl	8000760 <HAL_GetTick>
 8000780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078c:	d005      	beq.n	800079a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_Delay+0x44>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4413      	add	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800079a:	bf00      	nop
 800079c:	f7ff ffe0 	bl	8000760 <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d8f7      	bhi.n	800079c <HAL_Delay+0x28>
  {
  }
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000008 	.word	0x20000008

080007bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ee:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	60d3      	str	r3, [r2, #12]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000808:	4b04      	ldr	r3, [pc, #16]	@ (800081c <__NVIC_GetPriorityGrouping+0x18>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	f003 0307 	and.w	r3, r3, #7
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	db0a      	blt.n	800084a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	490c      	ldr	r1, [pc, #48]	@ (800086c <__NVIC_SetPriority+0x4c>)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	0112      	lsls	r2, r2, #4
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	440b      	add	r3, r1
 8000844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000848:	e00a      	b.n	8000860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4908      	ldr	r1, [pc, #32]	@ (8000870 <__NVIC_SetPriority+0x50>)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	3b04      	subs	r3, #4
 8000858:	0112      	lsls	r2, r2, #4
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	440b      	add	r3, r1
 800085e:	761a      	strb	r2, [r3, #24]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000e100 	.word	0xe000e100
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000874:	b480      	push	{r7}
 8000876:	b089      	sub	sp, #36	@ 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	f1c3 0307 	rsb	r3, r3, #7
 800088e:	2b04      	cmp	r3, #4
 8000890:	bf28      	it	cs
 8000892:	2304      	movcs	r3, #4
 8000894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3304      	adds	r3, #4
 800089a:	2b06      	cmp	r3, #6
 800089c:	d902      	bls.n	80008a4 <NVIC_EncodePriority+0x30>
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3b03      	subs	r3, #3
 80008a2:	e000      	b.n	80008a6 <NVIC_EncodePriority+0x32>
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43da      	mvns	r2, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa01 f303 	lsl.w	r3, r1, r3
 80008c6:	43d9      	mvns	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	4313      	orrs	r3, r2
         );
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3724      	adds	r7, #36	@ 0x24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008e8:	d301      	bcc.n	80008ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00f      	b.n	800090e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <SysTick_Config+0x40>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f6:	210f      	movs	r1, #15
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f7ff ff90 	bl	8000820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <SysTick_Config+0x40>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <SysTick_Config+0x40>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff49 	bl	80007bc <__NVIC_SetPriorityGrouping>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff60 	bl	8000804 <__NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ff92 	bl	8000874 <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff61 	bl	8000820 <__NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffb2 	bl	80008d8 <SysTick_Config>
 8000974:	4603      	mov	r3, r0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	0c1b      	lsrs	r3, r3, #16
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f003 031f 	and.w	r3, r3, #31
 800099a:	2201      	movs	r2, #1
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	015b      	lsls	r3, r3, #5
 80009a6:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 80009aa:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 80009ae:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d009      	beq.n	80009d4 <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4798      	blx	r3
    }
  }
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ea:	e140      	b.n	8000c6e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2101      	movs	r1, #1
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 8132 	beq.w	8000c68 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d005      	beq.n	8000a1c <HAL_GPIO_Init+0x40>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d130      	bne.n	8000a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	2203      	movs	r2, #3
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a52:	2201      	movs	r2, #1
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	091b      	lsrs	r3, r3, #4
 8000a68:	f003 0201 	and.w	r2, r3, #1
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d017      	beq.n	8000aba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2203      	movs	r2, #3
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 0303 	and.w	r3, r3, #3
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d123      	bne.n	8000b0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	08da      	lsrs	r2, r3, #3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3208      	adds	r2, #8
 8000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	220f      	movs	r2, #15
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	691a      	ldr	r2, [r3, #16]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	f003 0307 	and.w	r3, r3, #7
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	08da      	lsrs	r2, r3, #3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3208      	adds	r2, #8
 8000b08:	6939      	ldr	r1, [r7, #16]
 8000b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2203      	movs	r2, #3
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0203 	and.w	r2, r3, #3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 808c 	beq.w	8000c68 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b50:	4a4e      	ldr	r2, [pc, #312]	@ (8000c8c <HAL_GPIO_Init+0x2b0>)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	089b      	lsrs	r3, r3, #2
 8000b56:	3302      	adds	r3, #2
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	2207      	movs	r2, #7
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b7a:	d00d      	beq.n	8000b98 <HAL_GPIO_Init+0x1bc>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a44      	ldr	r2, [pc, #272]	@ (8000c90 <HAL_GPIO_Init+0x2b4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d007      	beq.n	8000b94 <HAL_GPIO_Init+0x1b8>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a43      	ldr	r2, [pc, #268]	@ (8000c94 <HAL_GPIO_Init+0x2b8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d101      	bne.n	8000b90 <HAL_GPIO_Init+0x1b4>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e004      	b.n	8000b9a <HAL_GPIO_Init+0x1be>
 8000b90:	2307      	movs	r3, #7
 8000b92:	e002      	b.n	8000b9a <HAL_GPIO_Init+0x1be>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <HAL_GPIO_Init+0x1be>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	f002 0203 	and.w	r2, r2, #3
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	4093      	lsls	r3, r2
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000baa:	4938      	ldr	r1, [pc, #224]	@ (8000c8c <HAL_GPIO_Init+0x2b0>)
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bb8:	4b37      	ldr	r3, [pc, #220]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c06:	4a24      	ldr	r2, [pc, #144]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c12:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000c32:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000c40:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa22 f303 	lsr.w	r3, r2, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f47f aeb7 	bne.w	80009ec <HAL_GPIO_Init+0x10>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	48000400 	.word	0x48000400
 8000c94:	48000800 	.word	0x48000800
 8000c98:	58000800 	.word	0x58000800

08000c9c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a03      	ldr	r2, [pc, #12]	@ (8000cb4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	58000400 	.word	0x58000400

08000cb8 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <LL_PWR_EnableBootC2+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4a03      	ldr	r2, [pc, #12]	@ (8000cd0 <LL_PWR_EnableBootC2+0x18>)
 8000cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	58000400 	.word	0x58000400

08000cd4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000cd8:	4b03      	ldr	r3, [pc, #12]	@ (8000ce8 <HAL_PWREx_GetVoltageRange+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	58000400 	.word	0x58000400

08000cec <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8000cf4:	f7ff ffe0 	bl	8000cb8 <LL_PWR_EnableBootC2>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <LL_PWR_IsEnabledBkUpAccess>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d10:	d101      	bne.n	8000d16 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	58000400 	.word	0x58000400

08000d24 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000d6e:	d101      	bne.n	8000d74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000dc8:	d101      	bne.n	8000dce <LL_RCC_HSE_IsReady+0x18>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <LL_RCC_HSE_IsReady+0x1a>
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e22:	d101      	bne.n	8000e28 <LL_RCC_HSI_IsReady+0x18>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <LL_RCC_HSI_IsReady+0x1a>
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	061b      	lsls	r3, r3, #24
 8000e48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d101      	bne.n	8000e72 <LL_RCC_LSE_IsReady+0x18>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <LL_RCC_LSE_IsReady+0x1a>
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ea8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d101      	bne.n	8000ed4 <LL_RCC_LSI_IsReady+0x18>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <LL_RCC_LSI_IsReady+0x1a>
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	6013      	str	r3, [r2, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d101      	bne.n	8000f2c <LL_RCC_MSI_IsReady+0x16>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <LL_RCC_MSI_IsReady+0x18>
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d101      	bne.n	8000f4c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	604b      	str	r3, [r1, #4]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f023 0203 	bic.w	r2, r3, #3
 8000fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	608b      	str	r3, [r1, #8]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ffa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	608b      	str	r3, [r1, #8]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800101a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800101e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001022:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4313      	orrs	r3, r2
 800102a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001044:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001048:	f023 020f 	bic.w	r2, r3, #15
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001054:	4313      	orrs	r3, r2
 8001056:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	608b      	str	r3, [r1, #8]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800109c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80010ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80010e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80010fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800111a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800112c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001156:	d101      	bne.n	800115c <LL_RCC_PLL_IsReady+0x18>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <LL_RCC_PLL_IsReady+0x1a>
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80011ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0303 	and.w	r3, r3, #3
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80011c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d2:	d101      	bne.n	80011d8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80011f6:	d101      	bne.n	80011fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800120e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800121a:	d101      	bne.n	8001220 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800122e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800123c:	d101      	bne.n	8001242 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800125a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800125e:	d101      	bne.n	8001264 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
	...

08001270 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e36f      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001282:	f7ff fea6 	bl	8000fd2 <LL_RCC_GetSysClkSource>
 8001286:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001288:	f7ff ff8f 	bl	80011aa <LL_RCC_PLL_GetMainSource>
 800128c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0320 	and.w	r3, r3, #32
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80c4 	beq.w	8001424 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x3e>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d176      	bne.n	8001396 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d173      	bne.n	8001396 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e353      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_RCC_OscConfig+0x68>
 80012cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012d6:	e006      	b.n	80012e6 <HAL_RCC_OscConfig+0x76>
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d222      	bcs.n	8001330 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fd5a 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e331      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe2b 	bl	8000f84 <LL_RCC_MSI_SetCalibTrimming>
 800132e:	e021      	b.n	8001374 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe12 	bl	8000f84 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fd1f 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e2f6      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001374:	f000 fce0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001378:	4603      	mov	r3, r0
 800137a:	4aa7      	ldr	r2, [pc, #668]	@ (8001618 <HAL_RCC_OscConfig+0x3a8>)
 800137c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800137e:	4ba7      	ldr	r3, [pc, #668]	@ (800161c <HAL_RCC_OscConfig+0x3ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f9a0 	bl	80006c8 <HAL_InitTick>
 8001388:	4603      	mov	r3, r0
 800138a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800138c:	7cfb      	ldrb	r3, [r7, #19]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d047      	beq.n	8001422 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001392:	7cfb      	ldrb	r3, [r7, #19]
 8001394:	e2e5      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d02c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800139e:	f7ff fd9e 	bl	8000ede <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a2:	f7ff f9dd 	bl	8000760 <HAL_GetTick>
 80013a6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013aa:	f7ff f9d9 	bl	8000760 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e2d2      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80013bc:	f7ff fdab 	bl	8000f16 <LL_RCC_MSI_IsReady>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f1      	beq.n	80013aa <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fdc7 	bl	8000f84 <LL_RCC_MSI_SetCalibTrimming>
 80013f6:	e015      	b.n	8001424 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f8:	f7ff fd7f 	bl	8000efa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fc:	f7ff f9b0 	bl	8000760 <HAL_GetTick>
 8001400:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001404:	f7ff f9ac 	bl	8000760 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e2a5      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001416:	f7ff fd7e 	bl	8000f16 <LL_RCC_MSI_IsReady>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f1      	bne.n	8001404 <HAL_RCC_OscConfig+0x194>
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001422:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d058      	beq.n	80014e2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x1d2>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d108      	bne.n	800144e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d105      	bne.n	800144e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d14b      	bne.n	80014e2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e289      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800144e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146c:	d102      	bne.n	8001474 <HAL_RCC_OscConfig+0x204>
 800146e:	f7ff fc86 	bl	8000d7e <LL_RCC_HSE_Enable>
 8001472:	e00d      	b.n	8001490 <HAL_RCC_OscConfig+0x220>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800147c:	d104      	bne.n	8001488 <HAL_RCC_OscConfig+0x218>
 800147e:	f7ff fc51 	bl	8000d24 <LL_RCC_HSE_EnableTcxo>
 8001482:	f7ff fc7c 	bl	8000d7e <LL_RCC_HSE_Enable>
 8001486:	e003      	b.n	8001490 <HAL_RCC_OscConfig+0x220>
 8001488:	f7ff fc87 	bl	8000d9a <LL_RCC_HSE_Disable>
 800148c:	f7ff fc58 	bl	8000d40 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d012      	beq.n	80014be <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff f962 	bl	8000760 <HAL_GetTick>
 800149c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff f95e 	bl	8000760 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	@ 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e257      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80014b2:	f7ff fc80 	bl	8000db6 <LL_RCC_HSE_IsReady>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f1      	beq.n	80014a0 <HAL_RCC_OscConfig+0x230>
 80014bc:	e011      	b.n	80014e2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff f94f 	bl	8000760 <HAL_GetTick>
 80014c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c6:	f7ff f94b 	bl	8000760 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b64      	cmp	r3, #100	@ 0x64
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e244      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80014d8:	f7ff fc6d 	bl	8000db6 <LL_RCC_HSE_IsReady>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f1      	bne.n	80014c6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d046      	beq.n	800157c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x290>
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d10e      	bne.n	8001518 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d10b      	bne.n	8001518 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e22a      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fc8e 	bl	8000e32 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001516:	e031      	b.n	800157c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d019      	beq.n	8001554 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001520:	f7ff fc5a 	bl	8000dd8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff f91c 	bl	8000760 <HAL_GetTick>
 8001528:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff f918 	bl	8000760 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e211      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800153e:	f7ff fc67 	bl	8000e10 <LL_RCC_HSI_IsReady>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f1      	beq.n	800152c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fc70 	bl	8000e32 <LL_RCC_HSI_SetCalibTrimming>
 8001552:	e013      	b.n	800157c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001554:	f7ff fc4e 	bl	8000df4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff f902 	bl	8000760 <HAL_GetTick>
 800155c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff f8fe 	bl	8000760 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1f7      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001572:	f7ff fc4d 	bl	8000e10 <LL_RCC_HSI_IsReady>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f1      	bne.n	8001560 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d06e      	beq.n	8001666 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d056      	beq.n	800163e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001598:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69da      	ldr	r2, [r3, #28]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d031      	beq.n	800160c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e1d0      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d013      	beq.n	80015f2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80015ca:	f7ff fc67 	bl	8000e9c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015ce:	f7ff f8c7 	bl	8000760 <HAL_GetTick>
 80015d2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff f8c3 	bl	8000760 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b11      	cmp	r3, #17
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1bc      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80015e8:	f7ff fc68 	bl	8000ebc <LL_RCC_LSI_IsReady>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f1      	bne.n	80015d6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fa:	f023 0210 	bic.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001606:	4313      	orrs	r3, r2
 8001608:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160c:	f7ff fc36 	bl	8000e7c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff f8a6 	bl	8000760 <HAL_GetTick>
 8001614:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001616:	e00c      	b.n	8001632 <HAL_RCC_OscConfig+0x3c2>
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff f89e 	bl	8000760 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b11      	cmp	r3, #17
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e197      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001632:	f7ff fc43 	bl	8000ebc <LL_RCC_LSI_IsReady>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f1      	beq.n	8001620 <HAL_RCC_OscConfig+0x3b0>
 800163c:	e013      	b.n	8001666 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	f7ff fc2d 	bl	8000e9c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff f88d 	bl	8000760 <HAL_GetTick>
 8001646:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff f889 	bl	8000760 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b11      	cmp	r3, #17
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e182      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800165c:	f7ff fc2e 	bl	8000ebc <LL_RCC_LSI_IsReady>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f1      	bne.n	800164a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80d8 	beq.w	8001824 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001674:	f7ff fb44 	bl	8000d00 <LL_PWR_IsEnabledBkUpAccess>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d113      	bne.n	80016a6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800167e:	f7ff fb0d 	bl	8000c9c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff f86d 	bl	8000760 <HAL_GetTick>
 8001686:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff f869 	bl	8000760 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e162      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800169c:	f7ff fb30 	bl	8000d00 <LL_PWR_IsEnabledBkUpAccess>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f1      	beq.n	800168a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d07b      	beq.n	80017a6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b85      	cmp	r3, #133	@ 0x85
 80016b4:	d003      	beq.n	80016be <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff f845 	bl	8000760 <HAL_GetTick>
 80016d6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff f837 	bl	8000760 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e12e      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001704:	f7ff fba9 	bl	8000e5a <LL_RCC_LSE_IsReady>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0ef      	beq.n	80016ee <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b81      	cmp	r3, #129	@ 0x81
 8001714:	d003      	beq.n	800171e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b85      	cmp	r3, #133	@ 0x85
 800171c:	d121      	bne.n	8001762 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff f81f 	bl	8000760 <HAL_GetTick>
 8001722:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff f811 	bl	8000760 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e108      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ec      	beq.n	800173a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001760:	e060      	b.n	8001824 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7fe fffd 	bl	8000760 <HAL_GetTick>
 8001766:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001774:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7fe ffef 	bl	8000760 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0e6      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ec      	bne.n	800177e <HAL_RCC_OscConfig+0x50e>
 80017a4:	e03e      	b.n	8001824 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a6:	f7fe ffdb 	bl	8000760 <HAL_GetTick>
 80017aa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7fe ffcd 	bl	8000760 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0c4      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ec      	bne.n	80017c2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7fe ffba 	bl	8000760 <HAL_GetTick>
 80017ec:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001802:	e00a      	b.n	800181a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7fe ffac 	bl	8000760 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0a3      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800181a:	f7ff fb1e 	bl	8000e5a <LL_RCC_LSE_IsReady>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ef      	bne.n	8001804 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8099 	beq.w	8001960 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d06c      	beq.n	800190e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	2b02      	cmp	r3, #2
 800183a:	d14b      	bne.n	80018d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183c:	f7ff fc74 	bl	8001128 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7fe ff8e 	bl	8000760 <HAL_GetTick>
 8001844:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7fe ff8a 	bl	8000760 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b0a      	cmp	r3, #10
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e083      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800185a:	f7ff fc73 	bl	8001144 <LL_RCC_PLL_IsReady>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f1      	bne.n	8001848 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	4b40      	ldr	r3, [pc, #256]	@ (800196c <HAL_RCC_OscConfig+0x6fc>)
 800186c:	4013      	ands	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001876:	4311      	orrs	r1, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800187c:	0212      	lsls	r2, r2, #8
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001884:	4311      	orrs	r1, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800188a:	4311      	orrs	r1, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001890:	430a      	orrs	r2, r1
 8001892:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001896:	4313      	orrs	r3, r2
 8001898:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189a:	f7ff fc37 	bl	800110c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7fe ff57 	bl	8000760 <HAL_GetTick>
 80018b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7fe ff53 	bl	8000760 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b0a      	cmp	r3, #10
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e04c      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80018c8:	f7ff fc3c 	bl	8001144 <LL_RCC_PLL_IsReady>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f1      	beq.n	80018b6 <HAL_RCC_OscConfig+0x646>
 80018d2:	e045      	b.n	8001960 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d4:	f7ff fc28 	bl	8001128 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7fe ff42 	bl	8000760 <HAL_GetTick>
 80018dc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7fe ff3e 	bl	8000760 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e037      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80018f2:	f7ff fc27 	bl	8001144 <LL_RCC_PLL_IsReady>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f1      	bne.n	80018e0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001906:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <HAL_RCC_OscConfig+0x700>)
 8001908:	4013      	ands	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e028      	b.n	8001960 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e023      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192c:	429a      	cmp	r2, r3
 800192e:	d115      	bne.n	800195c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193a:	429a      	cmp	r2, r3
 800193c:	d10e      	bne.n	800195c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	429a      	cmp	r2, r3
 800194c:	d106      	bne.n	800195c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	11c1808c 	.word	0x11c1808c
 8001970:	eefefffc 	.word	0xeefefffc

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e12c      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b98      	ldr	r3, [pc, #608]	@ (8001bec <HAL_RCC_ClockConfig+0x278>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d91b      	bls.n	80019ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b95      	ldr	r3, [pc, #596]	@ (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4993      	ldr	r1, [pc, #588]	@ (8001bec <HAL_RCC_ClockConfig+0x278>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a6:	f7fe fedb 	bl	8000760 <HAL_GetTick>
 80019aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80019ae:	f7fe fed7 	bl	8000760 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e110      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c0:	4b8a      	ldr	r3, [pc, #552]	@ (8001bec <HAL_RCC_ClockConfig+0x278>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d1ef      	bne.n	80019ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d016      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb02 	bl	8000fe8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019e4:	f7fe febc 	bl	8000760 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019ec:	f7fe feb8 	bl	8000760 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e0f1      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019fe:	f7ff fbdf 	bl	80011c0 <LL_RCC_IsActiveFlag_HPRE>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f1      	beq.n	80019ec <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d016      	beq.n	8001a42 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff faf8 	bl	800100e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a1e:	f7fe fe9f 	bl	8000760 <HAL_GetTick>
 8001a22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a26:	f7fe fe9b 	bl	8000760 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0d4      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a38:	f7ff fbd3 	bl	80011e2 <LL_RCC_IsActiveFlag_C2HPRE>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f1      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d016      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff faf0 	bl	8001038 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a58:	f7fe fe82 	bl	8000760 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a60:	f7fe fe7e 	bl	8000760 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e0b7      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a72:	f7ff fbc8 	bl	8001206 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f1      	beq.n	8001a60 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d016      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fae9 	bl	8001064 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a92:	f7fe fe65 	bl	8000760 <HAL_GetTick>
 8001a96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a9a:	f7fe fe61 	bl	8000760 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e09a      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001aac:	f7ff fbbd 	bl	800122a <LL_RCC_IsActiveFlag_PPRE1>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f1      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d017      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fade 	bl	800108a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ace:	f7fe fe47 	bl	8000760 <HAL_GetTick>
 8001ad2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ad6:	f7fe fe43 	bl	8000760 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e07c      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ae8:	f7ff fbb0 	bl	800124c <LL_RCC_IsActiveFlag_PPRE2>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f1      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d043      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d106      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b06:	f7ff f956 	bl	8000db6 <LL_RCC_HSE_IsReady>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d11e      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e066      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b1c:	f7ff fb12 	bl	8001144 <LL_RCC_PLL_IsReady>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d113      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e05b      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b32:	f7ff f9f0 	bl	8000f16 <LL_RCC_MSI_IsReady>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d108      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e050      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b40:	f7ff f966 	bl	8000e10 <LL_RCC_HSI_IsReady>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e049      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fa2a 	bl	8000fac <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b58:	f7fe fe02 	bl	8000760 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7fe fdfe 	bl	8000760 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e035      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	f7ff fa2c 	bl	8000fd2 <LL_RCC_GetSysClkSource>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d1ec      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b86:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d21b      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 0207 	bic.w	r2, r3, #7
 8001b9c:	4913      	ldr	r1, [pc, #76]	@ (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba4:	f7fe fddc 	bl	8000760 <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001bac:	f7fe fdd8 	bl	8000760 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e011      	b.n	8001be2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1ef      	bne.n	8001bac <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bcc:	f000 f8b4 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <HAL_RCC_ClockConfig+0x27c>)
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <HAL_RCC_ClockConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fd74 	bl	80006c8 <HAL_InitTick>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	58004000 	.word	0x58004000
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	f7ff f9e4 	bl	8000fd2 <LL_RCC_GetSysClkSource>
 8001c0a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c0c:	f7ff facd 	bl	80011aa <LL_RCC_PLL_GetMainSource>
 8001c10:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x2c>
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d139      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d136      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001c24:	f7ff f987 	bl	8000f36 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d115      	bne.n	8001c5a <HAL_RCC_GetSysClockFreq+0x62>
 8001c2e:	f7ff f982 	bl	8000f36 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0x4e>
 8001c38:	f7ff f98d 	bl	8000f56 <LL_RCC_MSI_GetRange>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	e005      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x5a>
 8001c46:	f7ff f991 	bl	8000f6c <LL_RCC_MSI_GetRangeAfterStandby>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a36      	ldr	r2, [pc, #216]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x134>)
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	e014      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x8c>
 8001c5a:	f7ff f96c 	bl	8000f36 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x7a>
 8001c64:	f7ff f977 	bl	8000f56 <LL_RCC_MSI_GetRange>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	e005      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x86>
 8001c72:	f7ff f97b 	bl	8000f6c <LL_RCC_MSI_GetRangeAfterStandby>
 8001c76:	4603      	mov	r3, r0
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x134>)
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d115      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c90:	e012      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c98:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e00c      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d109      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001ca4:	f7ff f85a 	bl	8000d5c <LL_RCC_HSE_IsEnabledDiv2>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d102      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e001      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cb6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb8:	f7ff f98b 	bl	8000fd2 <LL_RCC_GetSysClkSource>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d12f      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001cc2:	f7ff fa72 	bl	80011aa <LL_RCC_PLL_GetMainSource>
 8001cc6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0xde>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d003      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0xe4>
 8001cd4:	e00d      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd8:	60fb      	str	r3, [r7, #12]
        break;
 8001cda:	e00d      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001cdc:	f7ff f83e 	bl	8000d5c <LL_RCC_HSE_IsEnabledDiv2>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ce8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001cea:	e005      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cee:	60fb      	str	r3, [r7, #12]
        break;
 8001cf0:	e002      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	60fb      	str	r3, [r7, #12]
        break;
 8001cf6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001cf8:	f7ff fa35 	bl	8001166 <LL_RCC_PLL_GetN>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	fb03 f402 	mul.w	r4, r3, r2
 8001d04:	f7ff fa46 	bl	8001194 <LL_RCC_PLL_GetDivider>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	fbb4 f4f3 	udiv	r4, r4, r3
 8001d12:	f7ff fa34 	bl	800117e <LL_RCC_PLL_GetR>
 8001d16:	4603      	mov	r3, r0
 8001d18:	0f5b      	lsrs	r3, r3, #29
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d20:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001d22:	697b      	ldr	r3, [r7, #20]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	080038c8 	.word	0x080038c8
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	01e84800 	.word	0x01e84800

08001d38 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b598      	push	{r3, r4, r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001d3c:	f7ff ff5c 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001d40:	4604      	mov	r4, r0
 8001d42:	f7ff f9b5 	bl	80010b0 <LL_RCC_GetAHBPrescaler>
 8001d46:	4603      	mov	r3, r0
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	4a03      	ldr	r2, [pc, #12]	@ (8001d5c <HAL_RCC_GetHCLKFreq+0x24>)
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd98      	pop	{r3, r4, r7, pc}
 8001d5c:	08003868 	.word	0x08003868

08001d60 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b598      	push	{r3, r4, r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d64:	f7ff ffe8 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d68:	4604      	mov	r4, r0
 8001d6a:	f7ff f9b9 	bl	80010e0 <LL_RCC_GetAPB1Prescaler>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	4a03      	ldr	r2, [pc, #12]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd98      	pop	{r3, r4, r7, pc}
 8001d80:	080038a8 	.word	0x080038a8

08001d84 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d84:	b598      	push	{r3, r4, r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001d88:	f7ff ffd6 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	f7ff f9b2 	bl	80010f6 <LL_RCC_GetAPB2Prescaler>
 8001d92:	4603      	mov	r3, r0
 8001d94:	0adb      	lsrs	r3, r3, #11
 8001d96:	4a03      	ldr	r2, [pc, #12]	@ (8001da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd98      	pop	{r3, r4, r7, pc}
 8001da4:	080038a8 	.word	0x080038a8

08001da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	4a10      	ldr	r2, [pc, #64]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001dc0:	f7ff f981 	bl	80010c6 <LL_RCC_GetAHB3Prescaler>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4a09      	ldr	r2, [pc, #36]	@ (8001e04 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9c      	lsrs	r4, r3, #18
 8001de4:	f7fe ff76 	bl	8000cd4 <HAL_PWREx_GetVoltageRange>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4620      	mov	r0, r4
 8001dee:	f000 f80b 	bl	8001e08 <RCC_SetFlashLatency>
 8001df2:	4603      	mov	r3, r0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd90      	pop	{r4, r7, pc}
 8001dfc:	080038c8 	.word	0x080038c8
 8001e00:	08003868 	.word	0x08003868
 8001e04:	431bde83 	.word	0x431bde83

08001e08 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	@ 0x38
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001e12:	4a3a      	ldr	r2, [pc, #232]	@ (8001efc <RCC_SetFlashLatency+0xf4>)
 8001e14:	f107 0320 	add.w	r3, r7, #32
 8001e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e1c:	6018      	str	r0, [r3, #0]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001e22:	4a37      	ldr	r2, [pc, #220]	@ (8001f00 <RCC_SetFlashLatency+0xf8>)
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e2c:	6018      	str	r0, [r3, #0]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001e32:	4a34      	ldr	r2, [pc, #208]	@ (8001f04 <RCC_SetFlashLatency+0xfc>)
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e48:	d11b      	bne.n	8001e82 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e4e:	e014      	b.n	8001e7a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	3338      	adds	r3, #56	@ 0x38
 8001e56:	443b      	add	r3, r7
 8001e58:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d807      	bhi.n	8001e74 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	3338      	adds	r3, #56	@ 0x38
 8001e6a:	443b      	add	r3, r7
 8001e6c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001e72:	e021      	b.n	8001eb8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e76:	3301      	adds	r3, #1
 8001e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d9e7      	bls.n	8001e50 <RCC_SetFlashLatency+0x48>
 8001e80:	e01a      	b.n	8001eb8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e86:	e014      	b.n	8001eb2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	3338      	adds	r3, #56	@ 0x38
 8001e8e:	443b      	add	r3, r7
 8001e90:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d807      	bhi.n	8001eac <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	3338      	adds	r3, #56	@ 0x38
 8001ea2:	443b      	add	r3, r7
 8001ea4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ea8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001eaa:	e005      	b.n	8001eb8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eae:	3301      	adds	r3, #1
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d9e7      	bls.n	8001e88 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <RCC_SetFlashLatency+0x100>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0207 	bic.w	r2, r3, #7
 8001ec0:	4911      	ldr	r1, [pc, #68]	@ (8001f08 <RCC_SetFlashLatency+0x100>)
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ec8:	f7fe fc4a 	bl	8000760 <HAL_GetTick>
 8001ecc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001ece:	e008      	b.n	8001ee2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ed0:	f7fe fc46 	bl	8000760 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e007      	b.n	8001ef2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <RCC_SetFlashLatency+0x100>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1ef      	bne.n	8001ed0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3738      	adds	r7, #56	@ 0x38
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0800384c 	.word	0x0800384c
 8001f00:	08003854 	.word	0x08003854
 8001f04:	0800385c 	.word	0x0800385c
 8001f08:	58004000 	.word	0x58004000

08001f0c <LL_RCC_LSE_IsReady>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d101      	bne.n	8001f24 <LL_RCC_LSE_IsReady+0x18>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <LL_RCC_LSE_IsReady+0x1a>
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_SetUSARTClockSource>:
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	43db      	mvns	r3, r3
 8001f44:	401a      	ands	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <LL_RCC_SetI2SClockSource>:
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <LL_RCC_SetLPUARTClockSource>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f98:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <LL_RCC_SetI2CClockSource>:
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	401a      	ands	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8001fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <LL_RCC_SetLPTIMClockSource>:
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <LL_RCC_SetRNGClockSource>:
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002030:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <LL_RCC_SetADCClockSource>:
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002056:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800205a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <LL_RCC_SetRTCClockSource>:
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002084:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <LL_RCC_GetRTCClockSource>:
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <LL_RCC_ForceBackupDomainReset>:
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002100:	2300      	movs	r3, #0
 8002102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002104:	2300      	movs	r3, #0
 8002106:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d058      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002114:	f7fe fdc2 	bl	8000c9c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002118:	f7fe fb22 	bl	8000760 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800211e:	e009      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7fe fb1e 	bl	8000760 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d902      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	74fb      	strb	r3, [r7, #19]
        break;
 8002132:	e006      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002134:	4b7b      	ldr	r3, [pc, #492]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002140:	d1ee      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d13c      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002148:	f7ff ffa7 	bl	800209a <LL_RCC_GetRTCClockSource>
 800214c:	4602      	mov	r2, r0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002152:	429a      	cmp	r2, r3
 8002154:	d00f      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002162:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002164:	f7ff ffa5 	bl	80020b2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002168:	f7ff ffb3 	bl	80020d2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800216c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d014      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe faee 	bl	8000760 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002186:	e00b      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe faea 	bl	8000760 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d902      	bls.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	74fb      	strb	r3, [r7, #19]
            break;
 800219e:	e004      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80021a0:	f7ff feb4 	bl	8001f0c <LL_RCC_LSE_IsReady>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d1ee      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5b 	bl	8002070 <LL_RCC_SetRTCClockSource>
 80021ba:	e004      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	74bb      	strb	r3, [r7, #18]
 80021c0:	e001      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fea9 	bl	8001f2e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fe9e 	bl	8001f2e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fec0 	bl	8001f88 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fee6 	bl	8001fea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fedb 	bl	8001fea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800223c:	2b00      	cmp	r3, #0
 800223e:	d004      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fed0 	bl	8001fea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fea9 	bl	8001fb2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fe9e 	bl	8001fb2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fe93 	bl	8001fb2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d011      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe5e 	bl	8001f5e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022aa:	d107      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d010      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fea5 	bl	800201c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d107      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80022da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d011      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fea3 	bl	8002046 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002308:	d107      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002318:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800231a:	7cbb      	ldrb	r3, [r7, #18]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	58000400 	.word	0x58000400

08002328 <LL_RCC_GetUSARTClockSource>:
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002334:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	401a      	ands	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	041b      	lsls	r3, r3, #16
 8002340:	4313      	orrs	r3, r2
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e04a      	b.n	80023f4 <HAL_USART_Init+0xa8>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d114      	bne.n	8002394 <HAL_USART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    USART_InitCallbacksToDefault(husart);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f92c 	bl	80025d0 <USART_InitCallbacksToDefault>

    if (husart->MspInitCallback == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_USART_Init+0x3e>
    {
      husart->MspInitCallback = HAL_USART_MspInit;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1d      	ldr	r2, [pc, #116]	@ (80023fc <HAL_USART_Init+0xb0>)
 8002386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f97d 	bl	80026ac <USART_SetConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_USART_Init+0x70>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e01b      	b.n	80023f4 <HAL_USART_Init+0xa8>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80023ca:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023da:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fc1f 	bl	8002c30 <USART_CheckIdleState>
 80023f2:	4603      	mov	r3, r0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	080003dd 	.word	0x080003dd

08002400 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	f040 8095 	bne.w	8002548 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_USART_Transmit+0x2a>
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e08d      	b.n	800254a <HAL_USART_Transmit+0x14a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Process Locked */
    __HAL_LOCK(husart);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_USART_Transmit+0x3c>
 8002438:	2302      	movs	r3, #2
 800243a:	e086      	b.n	800254a <HAL_USART_Transmit+0x14a>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	65da      	str	r2, [r3, #92]	@ 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2212      	movs	r2, #18
 800244e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002452:	f7fe f985 	bl	8000760 <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    husart->TxXferCount = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800246c:	d108      	bne.n	8002480 <HAL_USART_Transmit+0x80>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d104      	bne.n	8002480 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	e003      	b.n	8002488 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002488:	e02a      	b.n	80024e0 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2200      	movs	r2, #0
 8002492:	2180      	movs	r1, #128	@ 0x80
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f8d3 	bl	8002640 <USART_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e052      	b.n	800254a <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10b      	bne.n	80024c2 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b8:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	3302      	adds	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e007      	b.n	80024d2 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	3301      	adds	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (husart->TxXferCount > 0U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1cf      	bne.n	800248a <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2200      	movs	r2, #0
 80024f2:	2140      	movs	r1, #64	@ 0x40
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f8a3 	bl	8002640 <USART_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e022      	b.n	800254a <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2240      	movs	r2, #64	@ 0x40
 800250a:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2208      	movs	r2, #8
 8002512:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0208 	orr.w	r2, r2, #8
 8002522:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0210 	orr.w	r2, r2, #16
 8002532:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_USART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback can be implemented in the user file.
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_USART_RxHalfCpltCallback>:
  * @brief Rx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_RxHalfCpltCallback can be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_USART_AbortCpltCallback>:
  * @brief  USART Abort Complete callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_AbortCpltCallback can be implemented in the user file.
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <USART_InitCallbacksToDefault>:
  * @param  husart USART handle.
  * @retval none
  */
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
void USART_InitCallbacksToDefault(USART_HandleTypeDef *husart)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Init the USART Callback settings */
  husart->TxHalfCpltCallback        = HAL_USART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a10      	ldr	r2, [pc, #64]	@ (800261c <USART_InitCallbacksToDefault+0x4c>)
 80025dc:	661a      	str	r2, [r3, #96]	@ 0x60
  husart->TxCpltCallback            = HAL_USART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002620 <USART_InitCallbacksToDefault+0x50>)
 80025e2:	665a      	str	r2, [r3, #100]	@ 0x64
  husart->RxHalfCpltCallback        = HAL_USART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002624 <USART_InitCallbacksToDefault+0x54>)
 80025e8:	669a      	str	r2, [r3, #104]	@ 0x68
  husart->RxCpltCallback            = HAL_USART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002628 <USART_InitCallbacksToDefault+0x58>)
 80025ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  husart->TxRxCpltCallback          = HAL_USART_TxRxCpltCallback;          /* Legacy weak TxRxCpltCallback          */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a0e      	ldr	r2, [pc, #56]	@ (800262c <USART_InitCallbacksToDefault+0x5c>)
 80025f4:	671a      	str	r2, [r3, #112]	@ 0x70
  husart->ErrorCallback             = HAL_USART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002630 <USART_InitCallbacksToDefault+0x60>)
 80025fa:	675a      	str	r2, [r3, #116]	@ 0x74
  husart->AbortCpltCallback         = HAL_USART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <USART_InitCallbacksToDefault+0x64>)
 8002600:	679a      	str	r2, [r3, #120]	@ 0x78
  husart->RxFifoFullCallback        = HAL_USARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a0c      	ldr	r2, [pc, #48]	@ (8002638 <USART_InitCallbacksToDefault+0x68>)
 8002606:	67da      	str	r2, [r3, #124]	@ 0x7c
  husart->TxFifoEmptyCallback       = HAL_USARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0c      	ldr	r2, [pc, #48]	@ (800263c <USART_InitCallbacksToDefault+0x6c>)
 800260c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	08002565 	.word	0x08002565
 8002620:	08002553 	.word	0x08002553
 8002624:	08002589 	.word	0x08002589
 8002628:	08002577 	.word	0x08002577
 800262c:	0800259b 	.word	0x0800259b
 8002630:	080025ad 	.word	0x080025ad
 8002634:	080025bf 	.word	0x080025bf
 8002638:	08002cb7 	.word	0x08002cb7
 800263c:	08002cc9 	.word	0x08002cc9

08002640 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002650:	e018      	b.n	8002684 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d014      	beq.n	8002684 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265a:	f7fe f881 	bl	8000760 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	429a      	cmp	r2, r3
 8002668:	d302      	bcc.n	8002670 <USART_WaitOnFlagUntilTimeout+0x30>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e00f      	b.n	80026a4 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4013      	ands	r3, r2
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	429a      	cmp	r2, r3
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d0d7      	beq.n	8002652 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4ba1      	ldr	r3, [pc, #644]	@ (8002960 <USART_SetConfig+0x2b4>)
 80026da:	4013      	ands	r3, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	6979      	ldr	r1, [r7, #20]
 80026e2:	430b      	orrs	r3, r1
 80026e4:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80026e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026ea:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4313      	orrs	r3, r2
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800271a:	f023 0309 	bic.w	r3, r3, #9
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	6979      	ldr	r1, [r7, #20]
 8002724:	430b      	orrs	r3, r1
 8002726:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	f023 010f 	bic.w	r1, r3, #15
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a88      	ldr	r2, [pc, #544]	@ (8002964 <USART_SetConfig+0x2b8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d122      	bne.n	800278e <USART_SetConfig+0xe2>
 8002748:	2003      	movs	r0, #3
 800274a:	f7ff fded 	bl	8002328 <LL_RCC_GetUSARTClockSource>
 800274e:	4603      	mov	r3, r0
 8002750:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002754:	2b03      	cmp	r3, #3
 8002756:	d817      	bhi.n	8002788 <USART_SetConfig+0xdc>
 8002758:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <USART_SetConfig+0xb4>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002771 	.word	0x08002771
 8002764:	0800277d 	.word	0x0800277d
 8002768:	08002777 	.word	0x08002777
 800276c:	08002783 	.word	0x08002783
 8002770:	2301      	movs	r3, #1
 8002772:	77fb      	strb	r3, [r7, #31]
 8002774:	e047      	b.n	8002806 <USART_SetConfig+0x15a>
 8002776:	2302      	movs	r3, #2
 8002778:	77fb      	strb	r3, [r7, #31]
 800277a:	e044      	b.n	8002806 <USART_SetConfig+0x15a>
 800277c:	2304      	movs	r3, #4
 800277e:	77fb      	strb	r3, [r7, #31]
 8002780:	e041      	b.n	8002806 <USART_SetConfig+0x15a>
 8002782:	2308      	movs	r3, #8
 8002784:	77fb      	strb	r3, [r7, #31]
 8002786:	e03e      	b.n	8002806 <USART_SetConfig+0x15a>
 8002788:	2310      	movs	r3, #16
 800278a:	77fb      	strb	r3, [r7, #31]
 800278c:	e03b      	b.n	8002806 <USART_SetConfig+0x15a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a75      	ldr	r2, [pc, #468]	@ (8002968 <USART_SetConfig+0x2bc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d134      	bne.n	8002802 <USART_SetConfig+0x156>
 8002798:	200c      	movs	r0, #12
 800279a:	f7ff fdc5 	bl	8002328 <LL_RCC_GetUSARTClockSource>
 800279e:	4603      	mov	r3, r0
 80027a0:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	d829      	bhi.n	80027fc <USART_SetConfig+0x150>
 80027a8:	a201      	add	r2, pc, #4	@ (adr r2, 80027b0 <USART_SetConfig+0x104>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027e5 	.word	0x080027e5
 80027b4:	080027fd 	.word	0x080027fd
 80027b8:	080027fd 	.word	0x080027fd
 80027bc:	080027fd 	.word	0x080027fd
 80027c0:	080027f1 	.word	0x080027f1
 80027c4:	080027fd 	.word	0x080027fd
 80027c8:	080027fd 	.word	0x080027fd
 80027cc:	080027fd 	.word	0x080027fd
 80027d0:	080027eb 	.word	0x080027eb
 80027d4:	080027fd 	.word	0x080027fd
 80027d8:	080027fd 	.word	0x080027fd
 80027dc:	080027fd 	.word	0x080027fd
 80027e0:	080027f7 	.word	0x080027f7
 80027e4:	2300      	movs	r3, #0
 80027e6:	77fb      	strb	r3, [r7, #31]
 80027e8:	e00d      	b.n	8002806 <USART_SetConfig+0x15a>
 80027ea:	2302      	movs	r3, #2
 80027ec:	77fb      	strb	r3, [r7, #31]
 80027ee:	e00a      	b.n	8002806 <USART_SetConfig+0x15a>
 80027f0:	2304      	movs	r3, #4
 80027f2:	77fb      	strb	r3, [r7, #31]
 80027f4:	e007      	b.n	8002806 <USART_SetConfig+0x15a>
 80027f6:	2308      	movs	r3, #8
 80027f8:	77fb      	strb	r3, [r7, #31]
 80027fa:	e004      	b.n	8002806 <USART_SetConfig+0x15a>
 80027fc:	2310      	movs	r3, #16
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e001      	b.n	8002806 <USART_SetConfig+0x15a>
 8002802:	2310      	movs	r3, #16
 8002804:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8002806:	7ffb      	ldrb	r3, [r7, #31]
 8002808:	2b08      	cmp	r3, #8
 800280a:	f200 81de 	bhi.w	8002bca <USART_SetConfig+0x51e>
 800280e:	a201      	add	r2, pc, #4	@ (adr r2, 8002814 <USART_SetConfig+0x168>)
 8002810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002814:	08002839 	.word	0x08002839
 8002818:	080028ef 	.word	0x080028ef
 800281c:	080029b3 	.word	0x080029b3
 8002820:	08002bcb 	.word	0x08002bcb
 8002824:	08002a63 	.word	0x08002a63
 8002828:	08002bcb 	.word	0x08002bcb
 800282c:	08002bcb 	.word	0x08002bcb
 8002830:	08002bcb 	.word	0x08002bcb
 8002834:	08002b19 	.word	0x08002b19
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8002838:	f7ff fa92 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 800283c:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d044      	beq.n	80028d0 <USART_SetConfig+0x224>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	2b01      	cmp	r3, #1
 800284c:	d03e      	beq.n	80028cc <USART_SetConfig+0x220>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	2b02      	cmp	r3, #2
 8002854:	d038      	beq.n	80028c8 <USART_SetConfig+0x21c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	2b03      	cmp	r3, #3
 800285c:	d032      	beq.n	80028c4 <USART_SetConfig+0x218>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	2b04      	cmp	r3, #4
 8002864:	d02c      	beq.n	80028c0 <USART_SetConfig+0x214>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	2b05      	cmp	r3, #5
 800286c:	d026      	beq.n	80028bc <USART_SetConfig+0x210>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	2b06      	cmp	r3, #6
 8002874:	d020      	beq.n	80028b8 <USART_SetConfig+0x20c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	2b07      	cmp	r3, #7
 800287c:	d01a      	beq.n	80028b4 <USART_SetConfig+0x208>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	2b08      	cmp	r3, #8
 8002884:	d014      	beq.n	80028b0 <USART_SetConfig+0x204>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	2b09      	cmp	r3, #9
 800288c:	d00e      	beq.n	80028ac <USART_SetConfig+0x200>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d008      	beq.n	80028a8 <USART_SetConfig+0x1fc>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	2b0b      	cmp	r3, #11
 800289c:	d102      	bne.n	80028a4 <USART_SetConfig+0x1f8>
 800289e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028a2:	e016      	b.n	80028d2 <USART_SetConfig+0x226>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e014      	b.n	80028d2 <USART_SetConfig+0x226>
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	e012      	b.n	80028d2 <USART_SetConfig+0x226>
 80028ac:	2340      	movs	r3, #64	@ 0x40
 80028ae:	e010      	b.n	80028d2 <USART_SetConfig+0x226>
 80028b0:	2320      	movs	r3, #32
 80028b2:	e00e      	b.n	80028d2 <USART_SetConfig+0x226>
 80028b4:	2310      	movs	r3, #16
 80028b6:	e00c      	b.n	80028d2 <USART_SetConfig+0x226>
 80028b8:	230c      	movs	r3, #12
 80028ba:	e00a      	b.n	80028d2 <USART_SetConfig+0x226>
 80028bc:	230a      	movs	r3, #10
 80028be:	e008      	b.n	80028d2 <USART_SetConfig+0x226>
 80028c0:	2308      	movs	r3, #8
 80028c2:	e006      	b.n	80028d2 <USART_SetConfig+0x226>
 80028c4:	2306      	movs	r3, #6
 80028c6:	e004      	b.n	80028d2 <USART_SetConfig+0x226>
 80028c8:	2304      	movs	r3, #4
 80028ca:	e002      	b.n	80028d2 <USART_SetConfig+0x226>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e000      	b.n	80028d2 <USART_SetConfig+0x226>
 80028d0:	2301      	movs	r3, #1
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	005a      	lsls	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	61bb      	str	r3, [r7, #24]
      break;
 80028ec:	e170      	b.n	8002bd0 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80028ee:	f7ff fa49 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80028f2:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d04b      	beq.n	8002994 <USART_SetConfig+0x2e8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	2b01      	cmp	r3, #1
 8002902:	d045      	beq.n	8002990 <USART_SetConfig+0x2e4>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	2b02      	cmp	r3, #2
 800290a:	d03f      	beq.n	800298c <USART_SetConfig+0x2e0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	2b03      	cmp	r3, #3
 8002912:	d039      	beq.n	8002988 <USART_SetConfig+0x2dc>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	2b04      	cmp	r3, #4
 800291a:	d033      	beq.n	8002984 <USART_SetConfig+0x2d8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	2b05      	cmp	r3, #5
 8002922:	d02d      	beq.n	8002980 <USART_SetConfig+0x2d4>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	2b06      	cmp	r3, #6
 800292a:	d027      	beq.n	800297c <USART_SetConfig+0x2d0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	2b07      	cmp	r3, #7
 8002932:	d021      	beq.n	8002978 <USART_SetConfig+0x2cc>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	2b08      	cmp	r3, #8
 800293a:	d01b      	beq.n	8002974 <USART_SetConfig+0x2c8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	2b09      	cmp	r3, #9
 8002942:	d015      	beq.n	8002970 <USART_SetConfig+0x2c4>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	2b0a      	cmp	r3, #10
 800294a:	d00f      	beq.n	800296c <USART_SetConfig+0x2c0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	2b0b      	cmp	r3, #11
 8002952:	d102      	bne.n	800295a <USART_SetConfig+0x2ae>
 8002954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002958:	e01d      	b.n	8002996 <USART_SetConfig+0x2ea>
 800295a:	2301      	movs	r3, #1
 800295c:	e01b      	b.n	8002996 <USART_SetConfig+0x2ea>
 800295e:	bf00      	nop
 8002960:	cfff69f3 	.word	0xcfff69f3
 8002964:	40013800 	.word	0x40013800
 8002968:	40004400 	.word	0x40004400
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	e012      	b.n	8002996 <USART_SetConfig+0x2ea>
 8002970:	2340      	movs	r3, #64	@ 0x40
 8002972:	e010      	b.n	8002996 <USART_SetConfig+0x2ea>
 8002974:	2320      	movs	r3, #32
 8002976:	e00e      	b.n	8002996 <USART_SetConfig+0x2ea>
 8002978:	2310      	movs	r3, #16
 800297a:	e00c      	b.n	8002996 <USART_SetConfig+0x2ea>
 800297c:	230c      	movs	r3, #12
 800297e:	e00a      	b.n	8002996 <USART_SetConfig+0x2ea>
 8002980:	230a      	movs	r3, #10
 8002982:	e008      	b.n	8002996 <USART_SetConfig+0x2ea>
 8002984:	2308      	movs	r3, #8
 8002986:	e006      	b.n	8002996 <USART_SetConfig+0x2ea>
 8002988:	2306      	movs	r3, #6
 800298a:	e004      	b.n	8002996 <USART_SetConfig+0x2ea>
 800298c:	2304      	movs	r3, #4
 800298e:	e002      	b.n	8002996 <USART_SetConfig+0x2ea>
 8002990:	2302      	movs	r3, #2
 8002992:	e000      	b.n	8002996 <USART_SetConfig+0x2ea>
 8002994:	2301      	movs	r3, #1
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	005a      	lsls	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	441a      	add	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	61bb      	str	r3, [r7, #24]
      break;
 80029b0:	e10e      	b.n	8002bd0 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d044      	beq.n	8002a44 <USART_SetConfig+0x398>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d03e      	beq.n	8002a40 <USART_SetConfig+0x394>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d038      	beq.n	8002a3c <USART_SetConfig+0x390>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d032      	beq.n	8002a38 <USART_SetConfig+0x38c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d02c      	beq.n	8002a34 <USART_SetConfig+0x388>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d026      	beq.n	8002a30 <USART_SetConfig+0x384>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d020      	beq.n	8002a2c <USART_SetConfig+0x380>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	2b07      	cmp	r3, #7
 80029f0:	d01a      	beq.n	8002a28 <USART_SetConfig+0x37c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d014      	beq.n	8002a24 <USART_SetConfig+0x378>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	d00e      	beq.n	8002a20 <USART_SetConfig+0x374>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	2b0a      	cmp	r3, #10
 8002a08:	d008      	beq.n	8002a1c <USART_SetConfig+0x370>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	2b0b      	cmp	r3, #11
 8002a10:	d102      	bne.n	8002a18 <USART_SetConfig+0x36c>
 8002a12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a16:	e016      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e014      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	e012      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a20:	2340      	movs	r3, #64	@ 0x40
 8002a22:	e010      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a24:	2320      	movs	r3, #32
 8002a26:	e00e      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a28:	2310      	movs	r3, #16
 8002a2a:	e00c      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	e00a      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a30:	230a      	movs	r3, #10
 8002a32:	e008      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a34:	2308      	movs	r3, #8
 8002a36:	e006      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a38:	2306      	movs	r3, #6
 8002a3a:	e004      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e002      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e000      	b.n	8002a46 <USART_SetConfig+0x39a>
 8002a44:	2301      	movs	r3, #1
 8002a46:	4a79      	ldr	r2, [pc, #484]	@ (8002c2c <USART_SetConfig+0x580>)
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	005a      	lsls	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	441a      	add	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	61bb      	str	r3, [r7, #24]
      break;
 8002a60:	e0b6      	b.n	8002bd0 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8002a62:	f7ff f8c9 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8002a66:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d044      	beq.n	8002afa <USART_SetConfig+0x44e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d03e      	beq.n	8002af6 <USART_SetConfig+0x44a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d038      	beq.n	8002af2 <USART_SetConfig+0x446>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d032      	beq.n	8002aee <USART_SetConfig+0x442>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d02c      	beq.n	8002aea <USART_SetConfig+0x43e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d026      	beq.n	8002ae6 <USART_SetConfig+0x43a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	2b06      	cmp	r3, #6
 8002a9e:	d020      	beq.n	8002ae2 <USART_SetConfig+0x436>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	2b07      	cmp	r3, #7
 8002aa6:	d01a      	beq.n	8002ade <USART_SetConfig+0x432>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d014      	beq.n	8002ada <USART_SetConfig+0x42e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	d00e      	beq.n	8002ad6 <USART_SetConfig+0x42a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	2b0a      	cmp	r3, #10
 8002abe:	d008      	beq.n	8002ad2 <USART_SetConfig+0x426>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	2b0b      	cmp	r3, #11
 8002ac6:	d102      	bne.n	8002ace <USART_SetConfig+0x422>
 8002ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002acc:	e016      	b.n	8002afc <USART_SetConfig+0x450>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e014      	b.n	8002afc <USART_SetConfig+0x450>
 8002ad2:	2380      	movs	r3, #128	@ 0x80
 8002ad4:	e012      	b.n	8002afc <USART_SetConfig+0x450>
 8002ad6:	2340      	movs	r3, #64	@ 0x40
 8002ad8:	e010      	b.n	8002afc <USART_SetConfig+0x450>
 8002ada:	2320      	movs	r3, #32
 8002adc:	e00e      	b.n	8002afc <USART_SetConfig+0x450>
 8002ade:	2310      	movs	r3, #16
 8002ae0:	e00c      	b.n	8002afc <USART_SetConfig+0x450>
 8002ae2:	230c      	movs	r3, #12
 8002ae4:	e00a      	b.n	8002afc <USART_SetConfig+0x450>
 8002ae6:	230a      	movs	r3, #10
 8002ae8:	e008      	b.n	8002afc <USART_SetConfig+0x450>
 8002aea:	2308      	movs	r3, #8
 8002aec:	e006      	b.n	8002afc <USART_SetConfig+0x450>
 8002aee:	2306      	movs	r3, #6
 8002af0:	e004      	b.n	8002afc <USART_SetConfig+0x450>
 8002af2:	2304      	movs	r3, #4
 8002af4:	e002      	b.n	8002afc <USART_SetConfig+0x450>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e000      	b.n	8002afc <USART_SetConfig+0x450>
 8002afa:	2301      	movs	r3, #1
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	005a      	lsls	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	441a      	add	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	61bb      	str	r3, [r7, #24]
      break;
 8002b16:	e05b      	b.n	8002bd0 <USART_SetConfig+0x524>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d044      	beq.n	8002baa <USART_SetConfig+0x4fe>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d03e      	beq.n	8002ba6 <USART_SetConfig+0x4fa>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d038      	beq.n	8002ba2 <USART_SetConfig+0x4f6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d032      	beq.n	8002b9e <USART_SetConfig+0x4f2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d02c      	beq.n	8002b9a <USART_SetConfig+0x4ee>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d026      	beq.n	8002b96 <USART_SetConfig+0x4ea>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	d020      	beq.n	8002b92 <USART_SetConfig+0x4e6>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	2b07      	cmp	r3, #7
 8002b56:	d01a      	beq.n	8002b8e <USART_SetConfig+0x4e2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d014      	beq.n	8002b8a <USART_SetConfig+0x4de>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	2b09      	cmp	r3, #9
 8002b66:	d00e      	beq.n	8002b86 <USART_SetConfig+0x4da>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	2b0a      	cmp	r3, #10
 8002b6e:	d008      	beq.n	8002b82 <USART_SetConfig+0x4d6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	2b0b      	cmp	r3, #11
 8002b76:	d102      	bne.n	8002b7e <USART_SetConfig+0x4d2>
 8002b78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b7c:	e016      	b.n	8002bac <USART_SetConfig+0x500>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e014      	b.n	8002bac <USART_SetConfig+0x500>
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	e012      	b.n	8002bac <USART_SetConfig+0x500>
 8002b86:	2340      	movs	r3, #64	@ 0x40
 8002b88:	e010      	b.n	8002bac <USART_SetConfig+0x500>
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e00e      	b.n	8002bac <USART_SetConfig+0x500>
 8002b8e:	2310      	movs	r3, #16
 8002b90:	e00c      	b.n	8002bac <USART_SetConfig+0x500>
 8002b92:	230c      	movs	r3, #12
 8002b94:	e00a      	b.n	8002bac <USART_SetConfig+0x500>
 8002b96:	230a      	movs	r3, #10
 8002b98:	e008      	b.n	8002bac <USART_SetConfig+0x500>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	e006      	b.n	8002bac <USART_SetConfig+0x500>
 8002b9e:	2306      	movs	r3, #6
 8002ba0:	e004      	b.n	8002bac <USART_SetConfig+0x500>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e002      	b.n	8002bac <USART_SetConfig+0x500>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e000      	b.n	8002bac <USART_SetConfig+0x500>
 8002baa:	2301      	movs	r3, #1
 8002bac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	005a      	lsls	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	441a      	add	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	61bb      	str	r3, [r7, #24]
      break;
 8002bc8:	e002      	b.n	8002bd0 <USART_SetConfig+0x524>
    default:
      ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	77bb      	strb	r3, [r7, #30]
      break;
 8002bce:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	d916      	bls.n	8002c04 <USART_SetConfig+0x558>
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bdc:	d212      	bcs.n	8002c04 <USART_SetConfig+0x558>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f023 030f 	bic.w	r3, r3, #15
 8002be6:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	89fa      	ldrh	r2, [r7, #14]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	e001      	b.n	8002c08 <USART_SetConfig+0x55c>
  }
  else
  {
    ret = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8002c20:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	00f42400 	.word	0x00f42400

08002c30 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c3e:	f7fd fd8f 	bl	8000760 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d10e      	bne.n	8002c70 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fced 	bl	8002640 <USART_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e01e      	b.n	8002cae <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d10e      	bne.n	8002c9c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff fcd7 	bl	8002640 <USART_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e008      	b.n	8002cae <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_USARTEx_DisableFifoMode+0x16>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e027      	b.n	8002d40 <HAL_USARTEx_DisableFifoMode+0x66>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002d1e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e02d      	b.n	8002dbe <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f850 	bl	8002e44 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e02d      	b.n	8002e3a <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f812 	bl	8002e44 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002e60:	e02f      	b.n	8002ec2 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002e62:	2308      	movs	r3, #8
 8002e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002e66:	2308      	movs	r3, #8
 8002e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	0e5b      	lsrs	r3, r3, #25
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	0f5b      	lsrs	r3, r3, #29
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002e8a:	7bbb      	ldrb	r3, [r7, #14]
 8002e8c:	7b3a      	ldrb	r2, [r7, #12]
 8002e8e:	490f      	ldr	r1, [pc, #60]	@ (8002ecc <USARTEx_SetNbDataToProcess+0x88>)
 8002e90:	5c8a      	ldrb	r2, [r1, r2]
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	7b3a      	ldrb	r2, [r7, #12]
 8002e98:	490d      	ldr	r1, [pc, #52]	@ (8002ed0 <USARTEx_SetNbDataToProcess+0x8c>)
 8002e9a:	5c8a      	ldrb	r2, [r1, r2]
 8002e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	7b7a      	ldrb	r2, [r7, #13]
 8002eaa:	4908      	ldr	r1, [pc, #32]	@ (8002ecc <USARTEx_SetNbDataToProcess+0x88>)
 8002eac:	5c8a      	ldrb	r2, [r1, r2]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	7b7a      	ldrb	r2, [r7, #13]
 8002eb4:	4906      	ldr	r1, [pc, #24]	@ (8002ed0 <USARTEx_SetNbDataToProcess+0x8c>)
 8002eb6:	5c8a      	ldrb	r2, [r1, r2]
 8002eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	08003908 	.word	0x08003908
 8002ed0:	08003910 	.word	0x08003910

08002ed4 <std>:
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	4604      	mov	r4, r0
 8002eda:	e9c0 3300 	strd	r3, r3, [r0]
 8002ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ee2:	6083      	str	r3, [r0, #8]
 8002ee4:	8181      	strh	r1, [r0, #12]
 8002ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ee8:	81c2      	strh	r2, [r0, #14]
 8002eea:	6183      	str	r3, [r0, #24]
 8002eec:	4619      	mov	r1, r3
 8002eee:	2208      	movs	r2, #8
 8002ef0:	305c      	adds	r0, #92	@ 0x5c
 8002ef2:	f000 f9e7 	bl	80032c4 <memset>
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <std+0x58>)
 8002ef8:	6263      	str	r3, [r4, #36]	@ 0x24
 8002efa:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <std+0x5c>)
 8002efc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002efe:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <std+0x60>)
 8002f00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f02:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <std+0x64>)
 8002f04:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <std+0x68>)
 8002f08:	6224      	str	r4, [r4, #32]
 8002f0a:	429c      	cmp	r4, r3
 8002f0c:	d006      	beq.n	8002f1c <std+0x48>
 8002f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f12:	4294      	cmp	r4, r2
 8002f14:	d002      	beq.n	8002f1c <std+0x48>
 8002f16:	33d0      	adds	r3, #208	@ 0xd0
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	d105      	bne.n	8002f28 <std+0x54>
 8002f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f24:	f000 ba46 	b.w	80033b4 <__retarget_lock_init_recursive>
 8002f28:	bd10      	pop	{r4, pc}
 8002f2a:	bf00      	nop
 8002f2c:	08003115 	.word	0x08003115
 8002f30:	08003137 	.word	0x08003137
 8002f34:	0800316f 	.word	0x0800316f
 8002f38:	08003193 	.word	0x08003193
 8002f3c:	20000130 	.word	0x20000130

08002f40 <stdio_exit_handler>:
 8002f40:	4a02      	ldr	r2, [pc, #8]	@ (8002f4c <stdio_exit_handler+0xc>)
 8002f42:	4903      	ldr	r1, [pc, #12]	@ (8002f50 <stdio_exit_handler+0x10>)
 8002f44:	4803      	ldr	r0, [pc, #12]	@ (8002f54 <stdio_exit_handler+0x14>)
 8002f46:	f000 b869 	b.w	800301c <_fwalk_sglue>
 8002f4a:	bf00      	nop
 8002f4c:	2000000c 	.word	0x2000000c
 8002f50:	080036ad 	.word	0x080036ad
 8002f54:	2000001c 	.word	0x2000001c

08002f58 <cleanup_stdio>:
 8002f58:	6841      	ldr	r1, [r0, #4]
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <cleanup_stdio+0x34>)
 8002f5c:	4299      	cmp	r1, r3
 8002f5e:	b510      	push	{r4, lr}
 8002f60:	4604      	mov	r4, r0
 8002f62:	d001      	beq.n	8002f68 <cleanup_stdio+0x10>
 8002f64:	f000 fba2 	bl	80036ac <_fflush_r>
 8002f68:	68a1      	ldr	r1, [r4, #8]
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <cleanup_stdio+0x38>)
 8002f6c:	4299      	cmp	r1, r3
 8002f6e:	d002      	beq.n	8002f76 <cleanup_stdio+0x1e>
 8002f70:	4620      	mov	r0, r4
 8002f72:	f000 fb9b 	bl	80036ac <_fflush_r>
 8002f76:	68e1      	ldr	r1, [r4, #12]
 8002f78:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <cleanup_stdio+0x3c>)
 8002f7a:	4299      	cmp	r1, r3
 8002f7c:	d004      	beq.n	8002f88 <cleanup_stdio+0x30>
 8002f7e:	4620      	mov	r0, r4
 8002f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f84:	f000 bb92 	b.w	80036ac <_fflush_r>
 8002f88:	bd10      	pop	{r4, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000130 	.word	0x20000130
 8002f90:	20000198 	.word	0x20000198
 8002f94:	20000200 	.word	0x20000200

08002f98 <global_stdio_init.part.0>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <global_stdio_init.part.0+0x30>)
 8002f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8002fcc <global_stdio_init.part.0+0x34>)
 8002f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd0 <global_stdio_init.part.0+0x38>)
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2104      	movs	r1, #4
 8002fa8:	f7ff ff94 	bl	8002ed4 <std>
 8002fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	2109      	movs	r1, #9
 8002fb4:	f7ff ff8e 	bl	8002ed4 <std>
 8002fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc2:	2112      	movs	r1, #18
 8002fc4:	f7ff bf86 	b.w	8002ed4 <std>
 8002fc8:	20000268 	.word	0x20000268
 8002fcc:	20000130 	.word	0x20000130
 8002fd0:	08002f41 	.word	0x08002f41

08002fd4 <__sfp_lock_acquire>:
 8002fd4:	4801      	ldr	r0, [pc, #4]	@ (8002fdc <__sfp_lock_acquire+0x8>)
 8002fd6:	f000 b9ee 	b.w	80033b6 <__retarget_lock_acquire_recursive>
 8002fda:	bf00      	nop
 8002fdc:	20000271 	.word	0x20000271

08002fe0 <__sfp_lock_release>:
 8002fe0:	4801      	ldr	r0, [pc, #4]	@ (8002fe8 <__sfp_lock_release+0x8>)
 8002fe2:	f000 b9e9 	b.w	80033b8 <__retarget_lock_release_recursive>
 8002fe6:	bf00      	nop
 8002fe8:	20000271 	.word	0x20000271

08002fec <__sinit>:
 8002fec:	b510      	push	{r4, lr}
 8002fee:	4604      	mov	r4, r0
 8002ff0:	f7ff fff0 	bl	8002fd4 <__sfp_lock_acquire>
 8002ff4:	6a23      	ldr	r3, [r4, #32]
 8002ff6:	b11b      	cbz	r3, 8003000 <__sinit+0x14>
 8002ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ffc:	f7ff bff0 	b.w	8002fe0 <__sfp_lock_release>
 8003000:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <__sinit+0x28>)
 8003002:	6223      	str	r3, [r4, #32]
 8003004:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <__sinit+0x2c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f5      	bne.n	8002ff8 <__sinit+0xc>
 800300c:	f7ff ffc4 	bl	8002f98 <global_stdio_init.part.0>
 8003010:	e7f2      	b.n	8002ff8 <__sinit+0xc>
 8003012:	bf00      	nop
 8003014:	08002f59 	.word	0x08002f59
 8003018:	20000268 	.word	0x20000268

0800301c <_fwalk_sglue>:
 800301c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003020:	4607      	mov	r7, r0
 8003022:	4688      	mov	r8, r1
 8003024:	4614      	mov	r4, r2
 8003026:	2600      	movs	r6, #0
 8003028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800302c:	f1b9 0901 	subs.w	r9, r9, #1
 8003030:	d505      	bpl.n	800303e <_fwalk_sglue+0x22>
 8003032:	6824      	ldr	r4, [r4, #0]
 8003034:	2c00      	cmp	r4, #0
 8003036:	d1f7      	bne.n	8003028 <_fwalk_sglue+0xc>
 8003038:	4630      	mov	r0, r6
 800303a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800303e:	89ab      	ldrh	r3, [r5, #12]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d907      	bls.n	8003054 <_fwalk_sglue+0x38>
 8003044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003048:	3301      	adds	r3, #1
 800304a:	d003      	beq.n	8003054 <_fwalk_sglue+0x38>
 800304c:	4629      	mov	r1, r5
 800304e:	4638      	mov	r0, r7
 8003050:	47c0      	blx	r8
 8003052:	4306      	orrs	r6, r0
 8003054:	3568      	adds	r5, #104	@ 0x68
 8003056:	e7e9      	b.n	800302c <_fwalk_sglue+0x10>

08003058 <_puts_r>:
 8003058:	6a03      	ldr	r3, [r0, #32]
 800305a:	b570      	push	{r4, r5, r6, lr}
 800305c:	6884      	ldr	r4, [r0, #8]
 800305e:	4605      	mov	r5, r0
 8003060:	460e      	mov	r6, r1
 8003062:	b90b      	cbnz	r3, 8003068 <_puts_r+0x10>
 8003064:	f7ff ffc2 	bl	8002fec <__sinit>
 8003068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800306a:	07db      	lsls	r3, r3, #31
 800306c:	d405      	bmi.n	800307a <_puts_r+0x22>
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	0598      	lsls	r0, r3, #22
 8003072:	d402      	bmi.n	800307a <_puts_r+0x22>
 8003074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003076:	f000 f99e 	bl	80033b6 <__retarget_lock_acquire_recursive>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	0719      	lsls	r1, r3, #28
 800307e:	d502      	bpl.n	8003086 <_puts_r+0x2e>
 8003080:	6923      	ldr	r3, [r4, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d135      	bne.n	80030f2 <_puts_r+0x9a>
 8003086:	4621      	mov	r1, r4
 8003088:	4628      	mov	r0, r5
 800308a:	f000 f8c5 	bl	8003218 <__swsetup_r>
 800308e:	b380      	cbz	r0, 80030f2 <_puts_r+0x9a>
 8003090:	f04f 35ff 	mov.w	r5, #4294967295
 8003094:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003096:	07da      	lsls	r2, r3, #31
 8003098:	d405      	bmi.n	80030a6 <_puts_r+0x4e>
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	059b      	lsls	r3, r3, #22
 800309e:	d402      	bmi.n	80030a6 <_puts_r+0x4e>
 80030a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030a2:	f000 f989 	bl	80033b8 <__retarget_lock_release_recursive>
 80030a6:	4628      	mov	r0, r5
 80030a8:	bd70      	pop	{r4, r5, r6, pc}
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da04      	bge.n	80030b8 <_puts_r+0x60>
 80030ae:	69a2      	ldr	r2, [r4, #24]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	dc17      	bgt.n	80030e4 <_puts_r+0x8c>
 80030b4:	290a      	cmp	r1, #10
 80030b6:	d015      	beq.n	80030e4 <_puts_r+0x8c>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	6022      	str	r2, [r4, #0]
 80030be:	7019      	strb	r1, [r3, #0]
 80030c0:	68a3      	ldr	r3, [r4, #8]
 80030c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030c6:	3b01      	subs	r3, #1
 80030c8:	60a3      	str	r3, [r4, #8]
 80030ca:	2900      	cmp	r1, #0
 80030cc:	d1ed      	bne.n	80030aa <_puts_r+0x52>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	da11      	bge.n	80030f6 <_puts_r+0x9e>
 80030d2:	4622      	mov	r2, r4
 80030d4:	210a      	movs	r1, #10
 80030d6:	4628      	mov	r0, r5
 80030d8:	f000 f85f 	bl	800319a <__swbuf_r>
 80030dc:	3001      	adds	r0, #1
 80030de:	d0d7      	beq.n	8003090 <_puts_r+0x38>
 80030e0:	250a      	movs	r5, #10
 80030e2:	e7d7      	b.n	8003094 <_puts_r+0x3c>
 80030e4:	4622      	mov	r2, r4
 80030e6:	4628      	mov	r0, r5
 80030e8:	f000 f857 	bl	800319a <__swbuf_r>
 80030ec:	3001      	adds	r0, #1
 80030ee:	d1e7      	bne.n	80030c0 <_puts_r+0x68>
 80030f0:	e7ce      	b.n	8003090 <_puts_r+0x38>
 80030f2:	3e01      	subs	r6, #1
 80030f4:	e7e4      	b.n	80030c0 <_puts_r+0x68>
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	6022      	str	r2, [r4, #0]
 80030fc:	220a      	movs	r2, #10
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e7ee      	b.n	80030e0 <_puts_r+0x88>
	...

08003104 <puts>:
 8003104:	4b02      	ldr	r3, [pc, #8]	@ (8003110 <puts+0xc>)
 8003106:	4601      	mov	r1, r0
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	f7ff bfa5 	b.w	8003058 <_puts_r>
 800310e:	bf00      	nop
 8003110:	20000018 	.word	0x20000018

08003114 <__sread>:
 8003114:	b510      	push	{r4, lr}
 8003116:	460c      	mov	r4, r1
 8003118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311c:	f000 f8fc 	bl	8003318 <_read_r>
 8003120:	2800      	cmp	r0, #0
 8003122:	bfab      	itete	ge
 8003124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003126:	89a3      	ldrhlt	r3, [r4, #12]
 8003128:	181b      	addge	r3, r3, r0
 800312a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800312e:	bfac      	ite	ge
 8003130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003132:	81a3      	strhlt	r3, [r4, #12]
 8003134:	bd10      	pop	{r4, pc}

08003136 <__swrite>:
 8003136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800313a:	461f      	mov	r7, r3
 800313c:	898b      	ldrh	r3, [r1, #12]
 800313e:	05db      	lsls	r3, r3, #23
 8003140:	4605      	mov	r5, r0
 8003142:	460c      	mov	r4, r1
 8003144:	4616      	mov	r6, r2
 8003146:	d505      	bpl.n	8003154 <__swrite+0x1e>
 8003148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800314c:	2302      	movs	r3, #2
 800314e:	2200      	movs	r2, #0
 8003150:	f000 f8d0 	bl	80032f4 <_lseek_r>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800315a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	4632      	mov	r2, r6
 8003162:	463b      	mov	r3, r7
 8003164:	4628      	mov	r0, r5
 8003166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800316a:	f000 b8e7 	b.w	800333c <_write_r>

0800316e <__sseek>:
 800316e:	b510      	push	{r4, lr}
 8003170:	460c      	mov	r4, r1
 8003172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003176:	f000 f8bd 	bl	80032f4 <_lseek_r>
 800317a:	1c43      	adds	r3, r0, #1
 800317c:	89a3      	ldrh	r3, [r4, #12]
 800317e:	bf15      	itete	ne
 8003180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800318a:	81a3      	strheq	r3, [r4, #12]
 800318c:	bf18      	it	ne
 800318e:	81a3      	strhne	r3, [r4, #12]
 8003190:	bd10      	pop	{r4, pc}

08003192 <__sclose>:
 8003192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003196:	f000 b89d 	b.w	80032d4 <_close_r>

0800319a <__swbuf_r>:
 800319a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319c:	460e      	mov	r6, r1
 800319e:	4614      	mov	r4, r2
 80031a0:	4605      	mov	r5, r0
 80031a2:	b118      	cbz	r0, 80031ac <__swbuf_r+0x12>
 80031a4:	6a03      	ldr	r3, [r0, #32]
 80031a6:	b90b      	cbnz	r3, 80031ac <__swbuf_r+0x12>
 80031a8:	f7ff ff20 	bl	8002fec <__sinit>
 80031ac:	69a3      	ldr	r3, [r4, #24]
 80031ae:	60a3      	str	r3, [r4, #8]
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	071a      	lsls	r2, r3, #28
 80031b4:	d501      	bpl.n	80031ba <__swbuf_r+0x20>
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	b943      	cbnz	r3, 80031cc <__swbuf_r+0x32>
 80031ba:	4621      	mov	r1, r4
 80031bc:	4628      	mov	r0, r5
 80031be:	f000 f82b 	bl	8003218 <__swsetup_r>
 80031c2:	b118      	cbz	r0, 80031cc <__swbuf_r+0x32>
 80031c4:	f04f 37ff 	mov.w	r7, #4294967295
 80031c8:	4638      	mov	r0, r7
 80031ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	6922      	ldr	r2, [r4, #16]
 80031d0:	1a98      	subs	r0, r3, r2
 80031d2:	6963      	ldr	r3, [r4, #20]
 80031d4:	b2f6      	uxtb	r6, r6
 80031d6:	4283      	cmp	r3, r0
 80031d8:	4637      	mov	r7, r6
 80031da:	dc05      	bgt.n	80031e8 <__swbuf_r+0x4e>
 80031dc:	4621      	mov	r1, r4
 80031de:	4628      	mov	r0, r5
 80031e0:	f000 fa64 	bl	80036ac <_fflush_r>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d1ed      	bne.n	80031c4 <__swbuf_r+0x2a>
 80031e8:	68a3      	ldr	r3, [r4, #8]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	60a3      	str	r3, [r4, #8]
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	6022      	str	r2, [r4, #0]
 80031f4:	701e      	strb	r6, [r3, #0]
 80031f6:	6962      	ldr	r2, [r4, #20]
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d004      	beq.n	8003208 <__swbuf_r+0x6e>
 80031fe:	89a3      	ldrh	r3, [r4, #12]
 8003200:	07db      	lsls	r3, r3, #31
 8003202:	d5e1      	bpl.n	80031c8 <__swbuf_r+0x2e>
 8003204:	2e0a      	cmp	r6, #10
 8003206:	d1df      	bne.n	80031c8 <__swbuf_r+0x2e>
 8003208:	4621      	mov	r1, r4
 800320a:	4628      	mov	r0, r5
 800320c:	f000 fa4e 	bl	80036ac <_fflush_r>
 8003210:	2800      	cmp	r0, #0
 8003212:	d0d9      	beq.n	80031c8 <__swbuf_r+0x2e>
 8003214:	e7d6      	b.n	80031c4 <__swbuf_r+0x2a>
	...

08003218 <__swsetup_r>:
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4b29      	ldr	r3, [pc, #164]	@ (80032c0 <__swsetup_r+0xa8>)
 800321c:	4605      	mov	r5, r0
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	460c      	mov	r4, r1
 8003222:	b118      	cbz	r0, 800322c <__swsetup_r+0x14>
 8003224:	6a03      	ldr	r3, [r0, #32]
 8003226:	b90b      	cbnz	r3, 800322c <__swsetup_r+0x14>
 8003228:	f7ff fee0 	bl	8002fec <__sinit>
 800322c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003230:	0719      	lsls	r1, r3, #28
 8003232:	d422      	bmi.n	800327a <__swsetup_r+0x62>
 8003234:	06da      	lsls	r2, r3, #27
 8003236:	d407      	bmi.n	8003248 <__swsetup_r+0x30>
 8003238:	2209      	movs	r2, #9
 800323a:	602a      	str	r2, [r5, #0]
 800323c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003240:	81a3      	strh	r3, [r4, #12]
 8003242:	f04f 30ff 	mov.w	r0, #4294967295
 8003246:	e033      	b.n	80032b0 <__swsetup_r+0x98>
 8003248:	0758      	lsls	r0, r3, #29
 800324a:	d512      	bpl.n	8003272 <__swsetup_r+0x5a>
 800324c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800324e:	b141      	cbz	r1, 8003262 <__swsetup_r+0x4a>
 8003250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003254:	4299      	cmp	r1, r3
 8003256:	d002      	beq.n	800325e <__swsetup_r+0x46>
 8003258:	4628      	mov	r0, r5
 800325a:	f000 f8af 	bl	80033bc <_free_r>
 800325e:	2300      	movs	r3, #0
 8003260:	6363      	str	r3, [r4, #52]	@ 0x34
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	2300      	movs	r3, #0
 800326c:	6063      	str	r3, [r4, #4]
 800326e:	6923      	ldr	r3, [r4, #16]
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	f043 0308 	orr.w	r3, r3, #8
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	6923      	ldr	r3, [r4, #16]
 800327c:	b94b      	cbnz	r3, 8003292 <__swsetup_r+0x7a>
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003288:	d003      	beq.n	8003292 <__swsetup_r+0x7a>
 800328a:	4621      	mov	r1, r4
 800328c:	4628      	mov	r0, r5
 800328e:	f000 fa5b 	bl	8003748 <__smakebuf_r>
 8003292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003296:	f013 0201 	ands.w	r2, r3, #1
 800329a:	d00a      	beq.n	80032b2 <__swsetup_r+0x9a>
 800329c:	2200      	movs	r2, #0
 800329e:	60a2      	str	r2, [r4, #8]
 80032a0:	6962      	ldr	r2, [r4, #20]
 80032a2:	4252      	negs	r2, r2
 80032a4:	61a2      	str	r2, [r4, #24]
 80032a6:	6922      	ldr	r2, [r4, #16]
 80032a8:	b942      	cbnz	r2, 80032bc <__swsetup_r+0xa4>
 80032aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80032ae:	d1c5      	bne.n	800323c <__swsetup_r+0x24>
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
 80032b2:	0799      	lsls	r1, r3, #30
 80032b4:	bf58      	it	pl
 80032b6:	6962      	ldrpl	r2, [r4, #20]
 80032b8:	60a2      	str	r2, [r4, #8]
 80032ba:	e7f4      	b.n	80032a6 <__swsetup_r+0x8e>
 80032bc:	2000      	movs	r0, #0
 80032be:	e7f7      	b.n	80032b0 <__swsetup_r+0x98>
 80032c0:	20000018 	.word	0x20000018

080032c4 <memset>:
 80032c4:	4402      	add	r2, r0
 80032c6:	4603      	mov	r3, r0
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d100      	bne.n	80032ce <memset+0xa>
 80032cc:	4770      	bx	lr
 80032ce:	f803 1b01 	strb.w	r1, [r3], #1
 80032d2:	e7f9      	b.n	80032c8 <memset+0x4>

080032d4 <_close_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4d06      	ldr	r5, [pc, #24]	@ (80032f0 <_close_r+0x1c>)
 80032d8:	2300      	movs	r3, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	f7fd f930 	bl	8000544 <_close>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_close_r+0x1a>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_close_r+0x1a>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	2000026c 	.word	0x2000026c

080032f4 <_lseek_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4d07      	ldr	r5, [pc, #28]	@ (8003314 <_lseek_r+0x20>)
 80032f8:	4604      	mov	r4, r0
 80032fa:	4608      	mov	r0, r1
 80032fc:	4611      	mov	r1, r2
 80032fe:	2200      	movs	r2, #0
 8003300:	602a      	str	r2, [r5, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	f7fd f942 	bl	800058c <_lseek>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_lseek_r+0x1e>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_lseek_r+0x1e>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	2000026c 	.word	0x2000026c

08003318 <_read_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4d07      	ldr	r5, [pc, #28]	@ (8003338 <_read_r+0x20>)
 800331c:	4604      	mov	r4, r0
 800331e:	4608      	mov	r0, r1
 8003320:	4611      	mov	r1, r2
 8003322:	2200      	movs	r2, #0
 8003324:	602a      	str	r2, [r5, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f7fd f8ef 	bl	800050a <_read>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d102      	bne.n	8003336 <_read_r+0x1e>
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	b103      	cbz	r3, 8003336 <_read_r+0x1e>
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	2000026c 	.word	0x2000026c

0800333c <_write_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4d07      	ldr	r5, [pc, #28]	@ (800335c <_write_r+0x20>)
 8003340:	4604      	mov	r4, r0
 8003342:	4608      	mov	r0, r1
 8003344:	4611      	mov	r1, r2
 8003346:	2200      	movs	r2, #0
 8003348:	602a      	str	r2, [r5, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f7fc fffa 	bl	8000344 <_write>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_write_r+0x1e>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_write_r+0x1e>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	2000026c 	.word	0x2000026c

08003360 <__errno>:
 8003360:	4b01      	ldr	r3, [pc, #4]	@ (8003368 <__errno+0x8>)
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000018 	.word	0x20000018

0800336c <__libc_init_array>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	4d0d      	ldr	r5, [pc, #52]	@ (80033a4 <__libc_init_array+0x38>)
 8003370:	4c0d      	ldr	r4, [pc, #52]	@ (80033a8 <__libc_init_array+0x3c>)
 8003372:	1b64      	subs	r4, r4, r5
 8003374:	10a4      	asrs	r4, r4, #2
 8003376:	2600      	movs	r6, #0
 8003378:	42a6      	cmp	r6, r4
 800337a:	d109      	bne.n	8003390 <__libc_init_array+0x24>
 800337c:	4d0b      	ldr	r5, [pc, #44]	@ (80033ac <__libc_init_array+0x40>)
 800337e:	4c0c      	ldr	r4, [pc, #48]	@ (80033b0 <__libc_init_array+0x44>)
 8003380:	f000 fa50 	bl	8003824 <_init>
 8003384:	1b64      	subs	r4, r4, r5
 8003386:	10a4      	asrs	r4, r4, #2
 8003388:	2600      	movs	r6, #0
 800338a:	42a6      	cmp	r6, r4
 800338c:	d105      	bne.n	800339a <__libc_init_array+0x2e>
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	f855 3b04 	ldr.w	r3, [r5], #4
 8003394:	4798      	blx	r3
 8003396:	3601      	adds	r6, #1
 8003398:	e7ee      	b.n	8003378 <__libc_init_array+0xc>
 800339a:	f855 3b04 	ldr.w	r3, [r5], #4
 800339e:	4798      	blx	r3
 80033a0:	3601      	adds	r6, #1
 80033a2:	e7f2      	b.n	800338a <__libc_init_array+0x1e>
 80033a4:	08003918 	.word	0x08003918
 80033a8:	08003918 	.word	0x08003918
 80033ac:	08003918 	.word	0x08003918
 80033b0:	0800391c 	.word	0x0800391c

080033b4 <__retarget_lock_init_recursive>:
 80033b4:	4770      	bx	lr

080033b6 <__retarget_lock_acquire_recursive>:
 80033b6:	4770      	bx	lr

080033b8 <__retarget_lock_release_recursive>:
 80033b8:	4770      	bx	lr
	...

080033bc <_free_r>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	4605      	mov	r5, r0
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d041      	beq.n	8003448 <_free_r+0x8c>
 80033c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c8:	1f0c      	subs	r4, r1, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bfb8      	it	lt
 80033ce:	18e4      	addlt	r4, r4, r3
 80033d0:	f000 f8e0 	bl	8003594 <__malloc_lock>
 80033d4:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <_free_r+0x90>)
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	b933      	cbnz	r3, 80033e8 <_free_r+0x2c>
 80033da:	6063      	str	r3, [r4, #4]
 80033dc:	6014      	str	r4, [r2, #0]
 80033de:	4628      	mov	r0, r5
 80033e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033e4:	f000 b8dc 	b.w	80035a0 <__malloc_unlock>
 80033e8:	42a3      	cmp	r3, r4
 80033ea:	d908      	bls.n	80033fe <_free_r+0x42>
 80033ec:	6820      	ldr	r0, [r4, #0]
 80033ee:	1821      	adds	r1, r4, r0
 80033f0:	428b      	cmp	r3, r1
 80033f2:	bf01      	itttt	eq
 80033f4:	6819      	ldreq	r1, [r3, #0]
 80033f6:	685b      	ldreq	r3, [r3, #4]
 80033f8:	1809      	addeq	r1, r1, r0
 80033fa:	6021      	streq	r1, [r4, #0]
 80033fc:	e7ed      	b.n	80033da <_free_r+0x1e>
 80033fe:	461a      	mov	r2, r3
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	b10b      	cbz	r3, 8003408 <_free_r+0x4c>
 8003404:	42a3      	cmp	r3, r4
 8003406:	d9fa      	bls.n	80033fe <_free_r+0x42>
 8003408:	6811      	ldr	r1, [r2, #0]
 800340a:	1850      	adds	r0, r2, r1
 800340c:	42a0      	cmp	r0, r4
 800340e:	d10b      	bne.n	8003428 <_free_r+0x6c>
 8003410:	6820      	ldr	r0, [r4, #0]
 8003412:	4401      	add	r1, r0
 8003414:	1850      	adds	r0, r2, r1
 8003416:	4283      	cmp	r3, r0
 8003418:	6011      	str	r1, [r2, #0]
 800341a:	d1e0      	bne.n	80033de <_free_r+0x22>
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	6053      	str	r3, [r2, #4]
 8003422:	4408      	add	r0, r1
 8003424:	6010      	str	r0, [r2, #0]
 8003426:	e7da      	b.n	80033de <_free_r+0x22>
 8003428:	d902      	bls.n	8003430 <_free_r+0x74>
 800342a:	230c      	movs	r3, #12
 800342c:	602b      	str	r3, [r5, #0]
 800342e:	e7d6      	b.n	80033de <_free_r+0x22>
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	1821      	adds	r1, r4, r0
 8003434:	428b      	cmp	r3, r1
 8003436:	bf04      	itt	eq
 8003438:	6819      	ldreq	r1, [r3, #0]
 800343a:	685b      	ldreq	r3, [r3, #4]
 800343c:	6063      	str	r3, [r4, #4]
 800343e:	bf04      	itt	eq
 8003440:	1809      	addeq	r1, r1, r0
 8003442:	6021      	streq	r1, [r4, #0]
 8003444:	6054      	str	r4, [r2, #4]
 8003446:	e7ca      	b.n	80033de <_free_r+0x22>
 8003448:	bd38      	pop	{r3, r4, r5, pc}
 800344a:	bf00      	nop
 800344c:	20000278 	.word	0x20000278

08003450 <sbrk_aligned>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	4e0f      	ldr	r6, [pc, #60]	@ (8003490 <sbrk_aligned+0x40>)
 8003454:	460c      	mov	r4, r1
 8003456:	6831      	ldr	r1, [r6, #0]
 8003458:	4605      	mov	r5, r0
 800345a:	b911      	cbnz	r1, 8003462 <sbrk_aligned+0x12>
 800345c:	f000 f9d2 	bl	8003804 <_sbrk_r>
 8003460:	6030      	str	r0, [r6, #0]
 8003462:	4621      	mov	r1, r4
 8003464:	4628      	mov	r0, r5
 8003466:	f000 f9cd 	bl	8003804 <_sbrk_r>
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	d103      	bne.n	8003476 <sbrk_aligned+0x26>
 800346e:	f04f 34ff 	mov.w	r4, #4294967295
 8003472:	4620      	mov	r0, r4
 8003474:	bd70      	pop	{r4, r5, r6, pc}
 8003476:	1cc4      	adds	r4, r0, #3
 8003478:	f024 0403 	bic.w	r4, r4, #3
 800347c:	42a0      	cmp	r0, r4
 800347e:	d0f8      	beq.n	8003472 <sbrk_aligned+0x22>
 8003480:	1a21      	subs	r1, r4, r0
 8003482:	4628      	mov	r0, r5
 8003484:	f000 f9be 	bl	8003804 <_sbrk_r>
 8003488:	3001      	adds	r0, #1
 800348a:	d1f2      	bne.n	8003472 <sbrk_aligned+0x22>
 800348c:	e7ef      	b.n	800346e <sbrk_aligned+0x1e>
 800348e:	bf00      	nop
 8003490:	20000274 	.word	0x20000274

08003494 <_malloc_r>:
 8003494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003498:	1ccd      	adds	r5, r1, #3
 800349a:	f025 0503 	bic.w	r5, r5, #3
 800349e:	3508      	adds	r5, #8
 80034a0:	2d0c      	cmp	r5, #12
 80034a2:	bf38      	it	cc
 80034a4:	250c      	movcc	r5, #12
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	4606      	mov	r6, r0
 80034aa:	db01      	blt.n	80034b0 <_malloc_r+0x1c>
 80034ac:	42a9      	cmp	r1, r5
 80034ae:	d904      	bls.n	80034ba <_malloc_r+0x26>
 80034b0:	230c      	movs	r3, #12
 80034b2:	6033      	str	r3, [r6, #0]
 80034b4:	2000      	movs	r0, #0
 80034b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003590 <_malloc_r+0xfc>
 80034be:	f000 f869 	bl	8003594 <__malloc_lock>
 80034c2:	f8d8 3000 	ldr.w	r3, [r8]
 80034c6:	461c      	mov	r4, r3
 80034c8:	bb44      	cbnz	r4, 800351c <_malloc_r+0x88>
 80034ca:	4629      	mov	r1, r5
 80034cc:	4630      	mov	r0, r6
 80034ce:	f7ff ffbf 	bl	8003450 <sbrk_aligned>
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	4604      	mov	r4, r0
 80034d6:	d158      	bne.n	800358a <_malloc_r+0xf6>
 80034d8:	f8d8 4000 	ldr.w	r4, [r8]
 80034dc:	4627      	mov	r7, r4
 80034de:	2f00      	cmp	r7, #0
 80034e0:	d143      	bne.n	800356a <_malloc_r+0xd6>
 80034e2:	2c00      	cmp	r4, #0
 80034e4:	d04b      	beq.n	800357e <_malloc_r+0xea>
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	4639      	mov	r1, r7
 80034ea:	4630      	mov	r0, r6
 80034ec:	eb04 0903 	add.w	r9, r4, r3
 80034f0:	f000 f988 	bl	8003804 <_sbrk_r>
 80034f4:	4581      	cmp	r9, r0
 80034f6:	d142      	bne.n	800357e <_malloc_r+0xea>
 80034f8:	6821      	ldr	r1, [r4, #0]
 80034fa:	1a6d      	subs	r5, r5, r1
 80034fc:	4629      	mov	r1, r5
 80034fe:	4630      	mov	r0, r6
 8003500:	f7ff ffa6 	bl	8003450 <sbrk_aligned>
 8003504:	3001      	adds	r0, #1
 8003506:	d03a      	beq.n	800357e <_malloc_r+0xea>
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	442b      	add	r3, r5
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	f8d8 3000 	ldr.w	r3, [r8]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	bb62      	cbnz	r2, 8003570 <_malloc_r+0xdc>
 8003516:	f8c8 7000 	str.w	r7, [r8]
 800351a:	e00f      	b.n	800353c <_malloc_r+0xa8>
 800351c:	6822      	ldr	r2, [r4, #0]
 800351e:	1b52      	subs	r2, r2, r5
 8003520:	d420      	bmi.n	8003564 <_malloc_r+0xd0>
 8003522:	2a0b      	cmp	r2, #11
 8003524:	d917      	bls.n	8003556 <_malloc_r+0xc2>
 8003526:	1961      	adds	r1, r4, r5
 8003528:	42a3      	cmp	r3, r4
 800352a:	6025      	str	r5, [r4, #0]
 800352c:	bf18      	it	ne
 800352e:	6059      	strne	r1, [r3, #4]
 8003530:	6863      	ldr	r3, [r4, #4]
 8003532:	bf08      	it	eq
 8003534:	f8c8 1000 	streq.w	r1, [r8]
 8003538:	5162      	str	r2, [r4, r5]
 800353a:	604b      	str	r3, [r1, #4]
 800353c:	4630      	mov	r0, r6
 800353e:	f000 f82f 	bl	80035a0 <__malloc_unlock>
 8003542:	f104 000b 	add.w	r0, r4, #11
 8003546:	1d23      	adds	r3, r4, #4
 8003548:	f020 0007 	bic.w	r0, r0, #7
 800354c:	1ac2      	subs	r2, r0, r3
 800354e:	bf1c      	itt	ne
 8003550:	1a1b      	subne	r3, r3, r0
 8003552:	50a3      	strne	r3, [r4, r2]
 8003554:	e7af      	b.n	80034b6 <_malloc_r+0x22>
 8003556:	6862      	ldr	r2, [r4, #4]
 8003558:	42a3      	cmp	r3, r4
 800355a:	bf0c      	ite	eq
 800355c:	f8c8 2000 	streq.w	r2, [r8]
 8003560:	605a      	strne	r2, [r3, #4]
 8003562:	e7eb      	b.n	800353c <_malloc_r+0xa8>
 8003564:	4623      	mov	r3, r4
 8003566:	6864      	ldr	r4, [r4, #4]
 8003568:	e7ae      	b.n	80034c8 <_malloc_r+0x34>
 800356a:	463c      	mov	r4, r7
 800356c:	687f      	ldr	r7, [r7, #4]
 800356e:	e7b6      	b.n	80034de <_malloc_r+0x4a>
 8003570:	461a      	mov	r2, r3
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	42a3      	cmp	r3, r4
 8003576:	d1fb      	bne.n	8003570 <_malloc_r+0xdc>
 8003578:	2300      	movs	r3, #0
 800357a:	6053      	str	r3, [r2, #4]
 800357c:	e7de      	b.n	800353c <_malloc_r+0xa8>
 800357e:	230c      	movs	r3, #12
 8003580:	6033      	str	r3, [r6, #0]
 8003582:	4630      	mov	r0, r6
 8003584:	f000 f80c 	bl	80035a0 <__malloc_unlock>
 8003588:	e794      	b.n	80034b4 <_malloc_r+0x20>
 800358a:	6005      	str	r5, [r0, #0]
 800358c:	e7d6      	b.n	800353c <_malloc_r+0xa8>
 800358e:	bf00      	nop
 8003590:	20000278 	.word	0x20000278

08003594 <__malloc_lock>:
 8003594:	4801      	ldr	r0, [pc, #4]	@ (800359c <__malloc_lock+0x8>)
 8003596:	f7ff bf0e 	b.w	80033b6 <__retarget_lock_acquire_recursive>
 800359a:	bf00      	nop
 800359c:	20000270 	.word	0x20000270

080035a0 <__malloc_unlock>:
 80035a0:	4801      	ldr	r0, [pc, #4]	@ (80035a8 <__malloc_unlock+0x8>)
 80035a2:	f7ff bf09 	b.w	80033b8 <__retarget_lock_release_recursive>
 80035a6:	bf00      	nop
 80035a8:	20000270 	.word	0x20000270

080035ac <__sflush_r>:
 80035ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	0716      	lsls	r6, r2, #28
 80035b4:	4605      	mov	r5, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	d454      	bmi.n	8003664 <__sflush_r+0xb8>
 80035ba:	684b      	ldr	r3, [r1, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	dc02      	bgt.n	80035c6 <__sflush_r+0x1a>
 80035c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	dd48      	ble.n	8003658 <__sflush_r+0xac>
 80035c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035c8:	2e00      	cmp	r6, #0
 80035ca:	d045      	beq.n	8003658 <__sflush_r+0xac>
 80035cc:	2300      	movs	r3, #0
 80035ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80035d2:	682f      	ldr	r7, [r5, #0]
 80035d4:	6a21      	ldr	r1, [r4, #32]
 80035d6:	602b      	str	r3, [r5, #0]
 80035d8:	d030      	beq.n	800363c <__sflush_r+0x90>
 80035da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	0759      	lsls	r1, r3, #29
 80035e0:	d505      	bpl.n	80035ee <__sflush_r+0x42>
 80035e2:	6863      	ldr	r3, [r4, #4]
 80035e4:	1ad2      	subs	r2, r2, r3
 80035e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80035e8:	b10b      	cbz	r3, 80035ee <__sflush_r+0x42>
 80035ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035ec:	1ad2      	subs	r2, r2, r3
 80035ee:	2300      	movs	r3, #0
 80035f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035f2:	6a21      	ldr	r1, [r4, #32]
 80035f4:	4628      	mov	r0, r5
 80035f6:	47b0      	blx	r6
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	89a3      	ldrh	r3, [r4, #12]
 80035fc:	d106      	bne.n	800360c <__sflush_r+0x60>
 80035fe:	6829      	ldr	r1, [r5, #0]
 8003600:	291d      	cmp	r1, #29
 8003602:	d82b      	bhi.n	800365c <__sflush_r+0xb0>
 8003604:	4a28      	ldr	r2, [pc, #160]	@ (80036a8 <__sflush_r+0xfc>)
 8003606:	410a      	asrs	r2, r1
 8003608:	07d6      	lsls	r6, r2, #31
 800360a:	d427      	bmi.n	800365c <__sflush_r+0xb0>
 800360c:	2200      	movs	r2, #0
 800360e:	6062      	str	r2, [r4, #4]
 8003610:	04d9      	lsls	r1, r3, #19
 8003612:	6922      	ldr	r2, [r4, #16]
 8003614:	6022      	str	r2, [r4, #0]
 8003616:	d504      	bpl.n	8003622 <__sflush_r+0x76>
 8003618:	1c42      	adds	r2, r0, #1
 800361a:	d101      	bne.n	8003620 <__sflush_r+0x74>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b903      	cbnz	r3, 8003622 <__sflush_r+0x76>
 8003620:	6560      	str	r0, [r4, #84]	@ 0x54
 8003622:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003624:	602f      	str	r7, [r5, #0]
 8003626:	b1b9      	cbz	r1, 8003658 <__sflush_r+0xac>
 8003628:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800362c:	4299      	cmp	r1, r3
 800362e:	d002      	beq.n	8003636 <__sflush_r+0x8a>
 8003630:	4628      	mov	r0, r5
 8003632:	f7ff fec3 	bl	80033bc <_free_r>
 8003636:	2300      	movs	r3, #0
 8003638:	6363      	str	r3, [r4, #52]	@ 0x34
 800363a:	e00d      	b.n	8003658 <__sflush_r+0xac>
 800363c:	2301      	movs	r3, #1
 800363e:	4628      	mov	r0, r5
 8003640:	47b0      	blx	r6
 8003642:	4602      	mov	r2, r0
 8003644:	1c50      	adds	r0, r2, #1
 8003646:	d1c9      	bne.n	80035dc <__sflush_r+0x30>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0c6      	beq.n	80035dc <__sflush_r+0x30>
 800364e:	2b1d      	cmp	r3, #29
 8003650:	d001      	beq.n	8003656 <__sflush_r+0xaa>
 8003652:	2b16      	cmp	r3, #22
 8003654:	d11d      	bne.n	8003692 <__sflush_r+0xe6>
 8003656:	602f      	str	r7, [r5, #0]
 8003658:	2000      	movs	r0, #0
 800365a:	e021      	b.n	80036a0 <__sflush_r+0xf4>
 800365c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003660:	b21b      	sxth	r3, r3
 8003662:	e01a      	b.n	800369a <__sflush_r+0xee>
 8003664:	690f      	ldr	r7, [r1, #16]
 8003666:	2f00      	cmp	r7, #0
 8003668:	d0f6      	beq.n	8003658 <__sflush_r+0xac>
 800366a:	0793      	lsls	r3, r2, #30
 800366c:	680e      	ldr	r6, [r1, #0]
 800366e:	bf08      	it	eq
 8003670:	694b      	ldreq	r3, [r1, #20]
 8003672:	600f      	str	r7, [r1, #0]
 8003674:	bf18      	it	ne
 8003676:	2300      	movne	r3, #0
 8003678:	1bf6      	subs	r6, r6, r7
 800367a:	608b      	str	r3, [r1, #8]
 800367c:	2e00      	cmp	r6, #0
 800367e:	ddeb      	ble.n	8003658 <__sflush_r+0xac>
 8003680:	6a21      	ldr	r1, [r4, #32]
 8003682:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003686:	4633      	mov	r3, r6
 8003688:	463a      	mov	r2, r7
 800368a:	4628      	mov	r0, r5
 800368c:	47e0      	blx	ip
 800368e:	2800      	cmp	r0, #0
 8003690:	dc07      	bgt.n	80036a2 <__sflush_r+0xf6>
 8003692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a2:	4407      	add	r7, r0
 80036a4:	1a36      	subs	r6, r6, r0
 80036a6:	e7e9      	b.n	800367c <__sflush_r+0xd0>
 80036a8:	dfbffffe 	.word	0xdfbffffe

080036ac <_fflush_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	690b      	ldr	r3, [r1, #16]
 80036b0:	4605      	mov	r5, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	b913      	cbnz	r3, 80036bc <_fflush_r+0x10>
 80036b6:	2500      	movs	r5, #0
 80036b8:	4628      	mov	r0, r5
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
 80036bc:	b118      	cbz	r0, 80036c6 <_fflush_r+0x1a>
 80036be:	6a03      	ldr	r3, [r0, #32]
 80036c0:	b90b      	cbnz	r3, 80036c6 <_fflush_r+0x1a>
 80036c2:	f7ff fc93 	bl	8002fec <__sinit>
 80036c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f3      	beq.n	80036b6 <_fflush_r+0xa>
 80036ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80036d0:	07d0      	lsls	r0, r2, #31
 80036d2:	d404      	bmi.n	80036de <_fflush_r+0x32>
 80036d4:	0599      	lsls	r1, r3, #22
 80036d6:	d402      	bmi.n	80036de <_fflush_r+0x32>
 80036d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036da:	f7ff fe6c 	bl	80033b6 <__retarget_lock_acquire_recursive>
 80036de:	4628      	mov	r0, r5
 80036e0:	4621      	mov	r1, r4
 80036e2:	f7ff ff63 	bl	80035ac <__sflush_r>
 80036e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036e8:	07da      	lsls	r2, r3, #31
 80036ea:	4605      	mov	r5, r0
 80036ec:	d4e4      	bmi.n	80036b8 <_fflush_r+0xc>
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	059b      	lsls	r3, r3, #22
 80036f2:	d4e1      	bmi.n	80036b8 <_fflush_r+0xc>
 80036f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036f6:	f7ff fe5f 	bl	80033b8 <__retarget_lock_release_recursive>
 80036fa:	e7dd      	b.n	80036b8 <_fflush_r+0xc>

080036fc <__swhatbuf_r>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	460c      	mov	r4, r1
 8003700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003704:	2900      	cmp	r1, #0
 8003706:	b096      	sub	sp, #88	@ 0x58
 8003708:	4615      	mov	r5, r2
 800370a:	461e      	mov	r6, r3
 800370c:	da0d      	bge.n	800372a <__swhatbuf_r+0x2e>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	bf14      	ite	ne
 800371a:	2340      	movne	r3, #64	@ 0x40
 800371c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003720:	2000      	movs	r0, #0
 8003722:	6031      	str	r1, [r6, #0]
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	b016      	add	sp, #88	@ 0x58
 8003728:	bd70      	pop	{r4, r5, r6, pc}
 800372a:	466a      	mov	r2, sp
 800372c:	f000 f848 	bl	80037c0 <_fstat_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	dbec      	blt.n	800370e <__swhatbuf_r+0x12>
 8003734:	9901      	ldr	r1, [sp, #4]
 8003736:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800373a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800373e:	4259      	negs	r1, r3
 8003740:	4159      	adcs	r1, r3
 8003742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003746:	e7eb      	b.n	8003720 <__swhatbuf_r+0x24>

08003748 <__smakebuf_r>:
 8003748:	898b      	ldrh	r3, [r1, #12]
 800374a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800374c:	079d      	lsls	r5, r3, #30
 800374e:	4606      	mov	r6, r0
 8003750:	460c      	mov	r4, r1
 8003752:	d507      	bpl.n	8003764 <__smakebuf_r+0x1c>
 8003754:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	6123      	str	r3, [r4, #16]
 800375c:	2301      	movs	r3, #1
 800375e:	6163      	str	r3, [r4, #20]
 8003760:	b003      	add	sp, #12
 8003762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003764:	ab01      	add	r3, sp, #4
 8003766:	466a      	mov	r2, sp
 8003768:	f7ff ffc8 	bl	80036fc <__swhatbuf_r>
 800376c:	9f00      	ldr	r7, [sp, #0]
 800376e:	4605      	mov	r5, r0
 8003770:	4639      	mov	r1, r7
 8003772:	4630      	mov	r0, r6
 8003774:	f7ff fe8e 	bl	8003494 <_malloc_r>
 8003778:	b948      	cbnz	r0, 800378e <__smakebuf_r+0x46>
 800377a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800377e:	059a      	lsls	r2, r3, #22
 8003780:	d4ee      	bmi.n	8003760 <__smakebuf_r+0x18>
 8003782:	f023 0303 	bic.w	r3, r3, #3
 8003786:	f043 0302 	orr.w	r3, r3, #2
 800378a:	81a3      	strh	r3, [r4, #12]
 800378c:	e7e2      	b.n	8003754 <__smakebuf_r+0xc>
 800378e:	89a3      	ldrh	r3, [r4, #12]
 8003790:	6020      	str	r0, [r4, #0]
 8003792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	9b01      	ldr	r3, [sp, #4]
 800379a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800379e:	b15b      	cbz	r3, 80037b8 <__smakebuf_r+0x70>
 80037a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037a4:	4630      	mov	r0, r6
 80037a6:	f000 f81d 	bl	80037e4 <_isatty_r>
 80037aa:	b128      	cbz	r0, 80037b8 <__smakebuf_r+0x70>
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	81a3      	strh	r3, [r4, #12]
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	431d      	orrs	r5, r3
 80037bc:	81a5      	strh	r5, [r4, #12]
 80037be:	e7cf      	b.n	8003760 <__smakebuf_r+0x18>

080037c0 <_fstat_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4d07      	ldr	r5, [pc, #28]	@ (80037e0 <_fstat_r+0x20>)
 80037c4:	2300      	movs	r3, #0
 80037c6:	4604      	mov	r4, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	602b      	str	r3, [r5, #0]
 80037ce:	f7fc fec4 	bl	800055a <_fstat>
 80037d2:	1c43      	adds	r3, r0, #1
 80037d4:	d102      	bne.n	80037dc <_fstat_r+0x1c>
 80037d6:	682b      	ldr	r3, [r5, #0]
 80037d8:	b103      	cbz	r3, 80037dc <_fstat_r+0x1c>
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	bd38      	pop	{r3, r4, r5, pc}
 80037de:	bf00      	nop
 80037e0:	2000026c 	.word	0x2000026c

080037e4 <_isatty_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4d06      	ldr	r5, [pc, #24]	@ (8003800 <_isatty_r+0x1c>)
 80037e8:	2300      	movs	r3, #0
 80037ea:	4604      	mov	r4, r0
 80037ec:	4608      	mov	r0, r1
 80037ee:	602b      	str	r3, [r5, #0]
 80037f0:	f7fc fec2 	bl	8000578 <_isatty>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d102      	bne.n	80037fe <_isatty_r+0x1a>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	b103      	cbz	r3, 80037fe <_isatty_r+0x1a>
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	2000026c 	.word	0x2000026c

08003804 <_sbrk_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4d06      	ldr	r5, [pc, #24]	@ (8003820 <_sbrk_r+0x1c>)
 8003808:	2300      	movs	r3, #0
 800380a:	4604      	mov	r4, r0
 800380c:	4608      	mov	r0, r1
 800380e:	602b      	str	r3, [r5, #0]
 8003810:	f7fc fec8 	bl	80005a4 <_sbrk>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d102      	bne.n	800381e <_sbrk_r+0x1a>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	b103      	cbz	r3, 800381e <_sbrk_r+0x1a>
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	2000026c 	.word	0x2000026c

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
